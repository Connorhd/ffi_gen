# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module GLU
  extend FFI::Library
  ffi_lib 'GLU'
  
  # (Not documented)
  class GLUnurbs < FFI::Struct
  end
  
  # (Not documented)
  class GLUquadric < FFI::Struct
  end
  
  # (Not documented)
  class GLUtesselator < FFI::Struct
  end
  
  # (Not documented)
  # 
  # @method begin_curve(nurb)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @return [nil] 
  # @scope class
  attach_function :begin_curve, :gluBeginCurve, [:pointer], :void
  
  # (Not documented)
  # 
  # @method begin_polygon(tess)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @return [nil] 
  # @scope class
  attach_function :begin_polygon, :gluBeginPolygon, [:pointer], :void
  
  # (Not documented)
  # 
  # @method begin_surface(nurb)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @return [nil] 
  # @scope class
  attach_function :begin_surface, :gluBeginSurface, [:pointer], :void
  
  # (Not documented)
  # 
  # @method begin_trim(nurb)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @return [nil] 
  # @scope class
  attach_function :begin_trim, :gluBeginTrim, [:pointer], :void
  
  # (Not documented)
  # 
  # @method build1d_mipmap_levels(target, internal_format, width, format, type, level, base, max, data)
  # @param [Integer] target 
  # @param [Integer] internal_format 
  # @param [Integer] width 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [Integer] level 
  # @param [Integer] base 
  # @param [Integer] max 
  # @param [FFI::Pointer(*Void)] data 
  # @return [Integer] 
  # @scope class
  attach_function :build1d_mipmap_levels, :gluBuild1DMipmapLevels, [:uint, :int, :int, :uint, :uint, :int, :int, :int, :pointer], :int
  
  # (Not documented)
  # 
  # @method build1d_mipmaps(target, internal_format, width, format, type, data)
  # @param [Integer] target 
  # @param [Integer] internal_format 
  # @param [Integer] width 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*Void)] data 
  # @return [Integer] 
  # @scope class
  attach_function :build1d_mipmaps, :gluBuild1DMipmaps, [:uint, :int, :int, :uint, :uint, :pointer], :int
  
  # (Not documented)
  # 
  # @method build2d_mipmap_levels(target, internal_format, width, height, format, type, level, base, max, data)
  # @param [Integer] target 
  # @param [Integer] internal_format 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [Integer] level 
  # @param [Integer] base 
  # @param [Integer] max 
  # @param [FFI::Pointer(*Void)] data 
  # @return [Integer] 
  # @scope class
  attach_function :build2d_mipmap_levels, :gluBuild2DMipmapLevels, [:uint, :int, :int, :int, :uint, :uint, :int, :int, :int, :pointer], :int
  
  # (Not documented)
  # 
  # @method build2d_mipmaps(target, internal_format, width, height, format, type, data)
  # @param [Integer] target 
  # @param [Integer] internal_format 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*Void)] data 
  # @return [Integer] 
  # @scope class
  attach_function :build2d_mipmaps, :gluBuild2DMipmaps, [:uint, :int, :int, :int, :uint, :uint, :pointer], :int
  
  # (Not documented)
  # 
  # @method build3d_mipmap_levels(target, internal_format, width, height, depth, format, type, level, base, max, data)
  # @param [Integer] target 
  # @param [Integer] internal_format 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] depth 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [Integer] level 
  # @param [Integer] base 
  # @param [Integer] max 
  # @param [FFI::Pointer(*Void)] data 
  # @return [Integer] 
  # @scope class
  attach_function :build3d_mipmap_levels, :gluBuild3DMipmapLevels, [:uint, :int, :int, :int, :int, :uint, :uint, :int, :int, :int, :pointer], :int
  
  # (Not documented)
  # 
  # @method build3d_mipmaps(target, internal_format, width, height, depth, format, type, data)
  # @param [Integer] target 
  # @param [Integer] internal_format 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] depth 
  # @param [Integer] format 
  # @param [Integer] type 
  # @param [FFI::Pointer(*Void)] data 
  # @return [Integer] 
  # @scope class
  attach_function :build3d_mipmaps, :gluBuild3DMipmaps, [:uint, :int, :int, :int, :int, :uint, :uint, :pointer], :int
  
  # (Not documented)
  # 
  # @method check_extension(ext_name, ext_string)
  # @param [FFI::Pointer(*GLubyte)] ext_name 
  # @param [FFI::Pointer(*GLubyte)] ext_string 
  # @return [Integer] 
  # @scope class
  attach_function :check_extension, :gluCheckExtension, [:pointer, :pointer], :uchar
  
  # (Not documented)
  # 
  # @method cylinder(quad, base, top, height, slices, stacks)
  # @param [FFI::Pointer(*GLUquadric)] quad 
  # @param [Float] base 
  # @param [Float] top 
  # @param [Float] height 
  # @param [Integer] slices 
  # @param [Integer] stacks 
  # @return [nil] 
  # @scope class
  attach_function :cylinder, :gluCylinder, [:pointer, :double, :double, :double, :int, :int], :void
  
  # (Not documented)
  # 
  # @method delete_nurbs_renderer(nurb)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @return [nil] 
  # @scope class
  attach_function :delete_nurbs_renderer, :gluDeleteNurbsRenderer, [:pointer], :void
  
  # (Not documented)
  # 
  # @method delete_quadric(quad)
  # @param [FFI::Pointer(*GLUquadric)] quad 
  # @return [nil] 
  # @scope class
  attach_function :delete_quadric, :gluDeleteQuadric, [:pointer], :void
  
  # (Not documented)
  # 
  # @method delete_tess(tess)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @return [nil] 
  # @scope class
  attach_function :delete_tess, :gluDeleteTess, [:pointer], :void
  
  # (Not documented)
  # 
  # @method disk(quad, inner, outer, slices, loops)
  # @param [FFI::Pointer(*GLUquadric)] quad 
  # @param [Float] inner 
  # @param [Float] outer 
  # @param [Integer] slices 
  # @param [Integer] loops 
  # @return [nil] 
  # @scope class
  attach_function :disk, :gluDisk, [:pointer, :double, :double, :int, :int], :void
  
  # (Not documented)
  # 
  # @method end_curve(nurb)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @return [nil] 
  # @scope class
  attach_function :end_curve, :gluEndCurve, [:pointer], :void
  
  # (Not documented)
  # 
  # @method end_polygon(tess)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @return [nil] 
  # @scope class
  attach_function :end_polygon, :gluEndPolygon, [:pointer], :void
  
  # (Not documented)
  # 
  # @method end_surface(nurb)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @return [nil] 
  # @scope class
  attach_function :end_surface, :gluEndSurface, [:pointer], :void
  
  # (Not documented)
  # 
  # @method end_trim(nurb)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @return [nil] 
  # @scope class
  attach_function :end_trim, :gluEndTrim, [:pointer], :void
  
  # (Not documented)
  # 
  # @method error_string(error)
  # @param [Integer] error 
  # @return [FFI::Pointer(*GLubyte)] 
  # @scope class
  attach_function :error_string, :gluErrorString, [:uint], :pointer
  
  # (Not documented)
  # 
  # @method get_nurbs_property(nurb, property, data)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @param [Integer] property 
  # @param [FFI::Pointer(*GLfloat)] data 
  # @return [nil] 
  # @scope class
  attach_function :get_nurbs_property, :gluGetNurbsProperty, [:pointer, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method get_string(name)
  # @param [Integer] name 
  # @return [FFI::Pointer(*GLubyte)] 
  # @scope class
  attach_function :get_string, :gluGetString, [:uint], :pointer
  
  # (Not documented)
  # 
  # @method get_tess_property(tess, which, data)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @param [Integer] which 
  # @param [FFI::Pointer(*GLdouble)] data 
  # @return [nil] 
  # @scope class
  attach_function :get_tess_property, :gluGetTessProperty, [:pointer, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method load_sampling_matrices(nurb, model, perspective, view)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @param [FFI::Pointer(*GLfloat)] model 
  # @param [FFI::Pointer(*GLfloat)] perspective 
  # @param [FFI::Pointer(*GLint)] view 
  # @return [nil] 
  # @scope class
  attach_function :load_sampling_matrices, :gluLoadSamplingMatrices, [:pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method look_at(eye_x, eye_y, eye_z, center_x, center_y, center_z, up_x, up_y, up_z)
  # @param [Float] eye_x 
  # @param [Float] eye_y 
  # @param [Float] eye_z 
  # @param [Float] center_x 
  # @param [Float] center_y 
  # @param [Float] center_z 
  # @param [Float] up_x 
  # @param [Float] up_y 
  # @param [Float] up_z 
  # @return [nil] 
  # @scope class
  attach_function :look_at, :gluLookAt, [:double, :double, :double, :double, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method new_nurbs_renderer()
  # @return [FFI::Pointer(*GLUnurbs)] 
  # @scope class
  attach_function :new_nurbs_renderer, :gluNewNurbsRenderer, [], :pointer
  
  # (Not documented)
  # 
  # @method new_quadric()
  # @return [FFI::Pointer(*GLUquadric)] 
  # @scope class
  attach_function :new_quadric, :gluNewQuadric, [], :pointer
  
  # (Not documented)
  # 
  # @method new_tess()
  # @return [FFI::Pointer(*GLUtesselator)] 
  # @scope class
  attach_function :new_tess, :gluNewTess, [], :pointer
  
  # (Not documented)
  # 
  # @method next_contour(tess, type)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :next_contour, :gluNextContour, [:pointer, :uint], :void
  
  # (Not documented)
  # 
  # @method nurbs_callback(nurb, which, call_back_func)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @param [Integer] which 
  # @param [FFI::Pointer(_GLUfuncptr)] call_back_func 
  # @return [nil] 
  # @scope class
  attach_function :nurbs_callback, :gluNurbsCallback, [:pointer, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method nurbs_callback_data(nurb, user_data)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @param [FFI::Pointer(*GLvoid)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :nurbs_callback_data, :gluNurbsCallbackData, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method nurbs_callback_data_ext(nurb, user_data)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @param [FFI::Pointer(*GLvoid)] user_data 
  # @return [nil] 
  # @scope class
  attach_function :nurbs_callback_data_ext, :gluNurbsCallbackDataEXT, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method nurbs_curve(nurb, knot_count, knots, stride, control, order, type)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @param [Integer] knot_count 
  # @param [FFI::Pointer(*GLfloat)] knots 
  # @param [Integer] stride 
  # @param [FFI::Pointer(*GLfloat)] control 
  # @param [Integer] order 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :nurbs_curve, :gluNurbsCurve, [:pointer, :int, :pointer, :int, :pointer, :int, :uint], :void
  
  # (Not documented)
  # 
  # @method nurbs_property(nurb, property, value)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @param [Integer] property 
  # @param [Float] value 
  # @return [nil] 
  # @scope class
  attach_function :nurbs_property, :gluNurbsProperty, [:pointer, :uint, :float], :void
  
  # (Not documented)
  # 
  # @method nurbs_surface(nurb, s_knot_count, s_knots, t_knot_count, t_knots, s_stride, t_stride, control, s_order, t_order, type)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @param [Integer] s_knot_count 
  # @param [FFI::Pointer(*GLfloat)] s_knots 
  # @param [Integer] t_knot_count 
  # @param [FFI::Pointer(*GLfloat)] t_knots 
  # @param [Integer] s_stride 
  # @param [Integer] t_stride 
  # @param [FFI::Pointer(*GLfloat)] control 
  # @param [Integer] s_order 
  # @param [Integer] t_order 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :nurbs_surface, :gluNurbsSurface, [:pointer, :int, :pointer, :int, :pointer, :int, :int, :pointer, :int, :int, :uint], :void
  
  # (Not documented)
  # 
  # @method ortho2d(left, right, bottom, top)
  # @param [Float] left 
  # @param [Float] right 
  # @param [Float] bottom 
  # @param [Float] top 
  # @return [nil] 
  # @scope class
  attach_function :ortho2d, :gluOrtho2D, [:double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method partial_disk(quad, inner, outer, slices, loops, start, sweep)
  # @param [FFI::Pointer(*GLUquadric)] quad 
  # @param [Float] inner 
  # @param [Float] outer 
  # @param [Integer] slices 
  # @param [Integer] loops 
  # @param [Float] start 
  # @param [Float] sweep 
  # @return [nil] 
  # @scope class
  attach_function :partial_disk, :gluPartialDisk, [:pointer, :double, :double, :int, :int, :double, :double], :void
  
  # (Not documented)
  # 
  # @method perspective(fovy, aspect, z_near, z_far)
  # @param [Float] fovy 
  # @param [Float] aspect 
  # @param [Float] z_near 
  # @param [Float] z_far 
  # @return [nil] 
  # @scope class
  attach_function :perspective, :gluPerspective, [:double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method pick_matrix(x, y, del_x, del_y, viewport)
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] del_x 
  # @param [Float] del_y 
  # @param [FFI::Pointer(*GLint)] viewport 
  # @return [nil] 
  # @scope class
  attach_function :pick_matrix, :gluPickMatrix, [:double, :double, :double, :double, :pointer], :void
  
  # (Not documented)
  # 
  # @method project(obj_x, obj_y, obj_z, model, proj, view, win_x, win_y, win_z)
  # @param [Float] obj_x 
  # @param [Float] obj_y 
  # @param [Float] obj_z 
  # @param [FFI::Pointer(*GLdouble)] model 
  # @param [FFI::Pointer(*GLdouble)] proj 
  # @param [FFI::Pointer(*GLint)] view 
  # @param [FFI::Pointer(*GLdouble)] win_x 
  # @param [FFI::Pointer(*GLdouble)] win_y 
  # @param [FFI::Pointer(*GLdouble)] win_z 
  # @return [Integer] 
  # @scope class
  attach_function :project, :gluProject, [:double, :double, :double, :pointer, :pointer, :pointer, :pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method pwl_curve(nurb, count, data, stride, type)
  # @param [FFI::Pointer(*GLUnurbs)] nurb 
  # @param [Integer] count 
  # @param [FFI::Pointer(*GLfloat)] data 
  # @param [Integer] stride 
  # @param [Integer] type 
  # @return [nil] 
  # @scope class
  attach_function :pwl_curve, :gluPwlCurve, [:pointer, :int, :pointer, :int, :uint], :void
  
  # (Not documented)
  # 
  # @method quadric_callback(quad, which, call_back_func)
  # @param [FFI::Pointer(*GLUquadric)] quad 
  # @param [Integer] which 
  # @param [FFI::Pointer(_GLUfuncptr)] call_back_func 
  # @return [nil] 
  # @scope class
  attach_function :quadric_callback, :gluQuadricCallback, [:pointer, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method quadric_draw_style(quad, draw)
  # @param [FFI::Pointer(*GLUquadric)] quad 
  # @param [Integer] draw 
  # @return [nil] 
  # @scope class
  attach_function :quadric_draw_style, :gluQuadricDrawStyle, [:pointer, :uint], :void
  
  # (Not documented)
  # 
  # @method quadric_normals(quad, normal)
  # @param [FFI::Pointer(*GLUquadric)] quad 
  # @param [Integer] normal 
  # @return [nil] 
  # @scope class
  attach_function :quadric_normals, :gluQuadricNormals, [:pointer, :uint], :void
  
  # (Not documented)
  # 
  # @method quadric_orientation(quad, orientation)
  # @param [FFI::Pointer(*GLUquadric)] quad 
  # @param [Integer] orientation 
  # @return [nil] 
  # @scope class
  attach_function :quadric_orientation, :gluQuadricOrientation, [:pointer, :uint], :void
  
  # (Not documented)
  # 
  # @method quadric_texture(quad, texture)
  # @param [FFI::Pointer(*GLUquadric)] quad 
  # @param [Integer] texture 
  # @return [nil] 
  # @scope class
  attach_function :quadric_texture, :gluQuadricTexture, [:pointer, :uchar], :void
  
  # (Not documented)
  # 
  # @method scale_image(format, w_in, h_in, type_in, data_in, w_out, h_out, type_out, data_out)
  # @param [Integer] format 
  # @param [Integer] w_in 
  # @param [Integer] h_in 
  # @param [Integer] type_in 
  # @param [FFI::Pointer(*Void)] data_in 
  # @param [Integer] w_out 
  # @param [Integer] h_out 
  # @param [Integer] type_out 
  # @param [FFI::Pointer(*GLvoid)] data_out 
  # @return [Integer] 
  # @scope class
  attach_function :scale_image, :gluScaleImage, [:uint, :int, :int, :uint, :pointer, :int, :int, :uint, :pointer], :int
  
  # (Not documented)
  # 
  # @method sphere(quad, radius, slices, stacks)
  # @param [FFI::Pointer(*GLUquadric)] quad 
  # @param [Float] radius 
  # @param [Integer] slices 
  # @param [Integer] stacks 
  # @return [nil] 
  # @scope class
  attach_function :sphere, :gluSphere, [:pointer, :double, :int, :int], :void
  
  # (Not documented)
  # 
  # @method tess_begin_contour(tess)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @return [nil] 
  # @scope class
  attach_function :tess_begin_contour, :gluTessBeginContour, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tess_begin_polygon(tess, data)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [nil] 
  # @scope class
  attach_function :tess_begin_polygon, :gluTessBeginPolygon, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method tess_callback(tess, which, call_back_func)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @param [Integer] which 
  # @param [FFI::Pointer(_GLUfuncptr)] call_back_func 
  # @return [nil] 
  # @scope class
  attach_function :tess_callback, :gluTessCallback, [:pointer, :uint, :pointer], :void
  
  # (Not documented)
  # 
  # @method tess_end_contour(tess)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @return [nil] 
  # @scope class
  attach_function :tess_end_contour, :gluTessEndContour, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tess_end_polygon(tess)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @return [nil] 
  # @scope class
  attach_function :tess_end_polygon, :gluTessEndPolygon, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tess_normal(tess, value_x, value_y, value_z)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @param [Float] value_x 
  # @param [Float] value_y 
  # @param [Float] value_z 
  # @return [nil] 
  # @scope class
  attach_function :tess_normal, :gluTessNormal, [:pointer, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method tess_property(tess, which, data)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @param [Integer] which 
  # @param [Float] data 
  # @return [nil] 
  # @scope class
  attach_function :tess_property, :gluTessProperty, [:pointer, :uint, :double], :void
  
  # (Not documented)
  # 
  # @method tess_vertex(tess, location, data)
  # @param [FFI::Pointer(*GLUtesselator)] tess 
  # @param [FFI::Pointer(*GLdouble)] location 
  # @param [FFI::Pointer(*GLvoid)] data 
  # @return [nil] 
  # @scope class
  attach_function :tess_vertex, :gluTessVertex, [:pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method un_project(win_x, win_y, win_z, model, proj, view, obj_x, obj_y, obj_z)
  # @param [Float] win_x 
  # @param [Float] win_y 
  # @param [Float] win_z 
  # @param [FFI::Pointer(*GLdouble)] model 
  # @param [FFI::Pointer(*GLdouble)] proj 
  # @param [FFI::Pointer(*GLint)] view 
  # @param [FFI::Pointer(*GLdouble)] obj_x 
  # @param [FFI::Pointer(*GLdouble)] obj_y 
  # @param [FFI::Pointer(*GLdouble)] obj_z 
  # @return [Integer] 
  # @scope class
  attach_function :un_project, :gluUnProject, [:double, :double, :double, :pointer, :pointer, :pointer, :pointer, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method un_project4(win_x, win_y, win_z, clip_w, model, proj, view, near_val, far_val, obj_x, obj_y, obj_z, obj_w)
  # @param [Float] win_x 
  # @param [Float] win_y 
  # @param [Float] win_z 
  # @param [Float] clip_w 
  # @param [FFI::Pointer(*GLdouble)] model 
  # @param [FFI::Pointer(*GLdouble)] proj 
  # @param [FFI::Pointer(*GLint)] view 
  # @param [Float] near_val 
  # @param [Float] far_val 
  # @param [FFI::Pointer(*GLdouble)] obj_x 
  # @param [FFI::Pointer(*GLdouble)] obj_y 
  # @param [FFI::Pointer(*GLdouble)] obj_z 
  # @param [FFI::Pointer(*GLdouble)] obj_w 
  # @return [Integer] 
  # @scope class
  attach_function :un_project4, :gluUnProject4, [:double, :double, :double, :double, :pointer, :pointer, :pointer, :double, :double, :pointer, :pointer, :pointer, :pointer], :int
  
end
