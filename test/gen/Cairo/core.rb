# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module Cairo
  extend FFI::Library
  ffi_lib 'cairo'
  
  CAIRO_MIME_TYPE_JPEG = "image/jpeg"
  
  CAIRO_MIME_TYPE_PNG = "image/png"
  
  CAIRO_MIME_TYPE_JP2 = "image/jp2"
  
  CAIRO_MIME_TYPE_URI = "text/x-uri"
  
  # (Not documented)
  # 
  # @method cairo_version()
  # @return [Integer] 
  # @scope class
  attach_function :cairo_version, :cairo_version, [], :int
  
  # (Not documented)
  # 
  # @method cairo_version_string()
  # @return [String] 
  # @scope class
  attach_function :cairo_version_string, :cairo_version_string, [], :string
  
  # cairo_t:
  # 
  # A #cairo_t contains the current state of the rendering device,
  # including coordinates of yet to be drawn shapes.
  # 
  # Cairo contexts, as #cairo_t objects are named, are central to
  # cairo and all drawing with cairo is always done to a #cairo_t
  # object.
  # 
  # Memory management of #cairo_t is done with
  # cairo_reference() and cairo_destroy().
  class Cairo < FFI::Struct
  end
  
  # cairo_surface_t:
  # 
  # A #cairo_surface_t represents an image, either as the destination
  # of a drawing operation or as source when drawing onto another
  # surface.  To draw to a #cairo_surface_t, create a cairo context
  # with the surface as the target, using cairo_create().
  # 
  # There are different subtypes of #cairo_surface_t for
  # different drawing backends; for example, cairo_image_surface_create()
  # creates a bitmap image in memory.
  # The type of a surface can be queried with cairo_surface_get_type().
  # 
  # The initial contents of a surface after creation depend upon the manner
  # of its creation. If cairo creates the surface and backing storage for
  # the user, it will be initially cleared; for example,
  # cairo_image_surface_create() and cairo_surface_create_similar().
  # Alternatively, if the user passes in a reference to some backing storage
  # and asks cairo to wrap that in a #cairo_surface_t, then the contents are
  # not modified; for example, cairo_image_surface_create_for_data() and
  # cairo_xlib_surface_create().
  # 
  # Memory management of #cairo_surface_t is done with
  # cairo_surface_reference() and cairo_surface_destroy().
  class CairoSurface < FFI::Struct
  end
  
  # cairo_device_t:
  # 
  # A #cairo_device_t represents the driver interface for drawing
  # operations to a #cairo_surface_t.  There are different subtypes of
  # #cairo_device_t for different drawing backends; for example,
  # cairo_xcb_device_create() creates a device that wraps the connection
  # to an X Windows System using the XCB library.
  # 
  # The type of a device can be queried with cairo_device_get_type().
  # 
  # Memory management of #cairo_device_t is done with
  # cairo_device_reference() and cairo_device_destroy().
  # 
  # Since: 1.10
  class CairoDevice < FFI::Struct
  end
  
  # cairo_matrix_t:
  # @xx: xx component of the affine transformation
  # @yx: yx component of the affine transformation
  # @xy: xy component of the affine transformation
  # @yy: yy component of the affine transformation
  # @x0: X translation component of the affine transformation
  # @y0: Y translation component of the affine transformation
  # 
  # A #cairo_matrix_t holds an affine transformation, such as a scale,
  # rotation, shear, or a combination of those. The transformation of
  # a point (x, y) is given by:
  # <programlisting>
  #     x_new = xx * x + xy * y + x0;
  #     y_new = yx * x + yy * y + y0;
  # </programlisting>
  # 
  # = Fields:
  # :xx ::
  #   (Float) 
  # :yx ::
  #   (Float) 
  # :xy ::
  #   (Float) 
  # :yy ::
  #   (Float) 
  # :x0 ::
  #   (Float) 
  # :y0 ::
  #   (Float) 
  class CairoMatrix < FFI::Struct
    layout :xx, :double,
           :yx, :double,
           :xy, :double,
           :yy, :double,
           :x0, :double,
           :y0, :double
  end
  
  # cairo_matrix_t:
  # @xx: xx component of the affine transformation
  # @yx: yx component of the affine transformation
  # @xy: xy component of the affine transformation
  # @yy: yy component of the affine transformation
  # @x0: X translation component of the affine transformation
  # @y0: Y translation component of the affine transformation
  # 
  # A #cairo_matrix_t holds an affine transformation, such as a scale,
  # rotation, shear, or a combination of those. The transformation of
  # a point (x, y) is given by:
  # <programlisting>
  #     x_new = xx * x + xy * y + x0;
  #     y_new = yx * x + yy * y + y0;
  # </programlisting>
  # 
  # = Fields:
  # :xx ::
  #   (Float) 
  # :yx ::
  #   (Float) 
  # :xy ::
  #   (Float) 
  # :yy ::
  #   (Float) 
  # :x0 ::
  #   (Float) 
  # :y0 ::
  #   (Float) 
  class CairoMatrixT < FFI::Struct
    layout :xx, :double,
           :yx, :double,
           :xy, :double,
           :yy, :double,
           :x0, :double,
           :y0, :double
  end
  
  # cairo_pattern_t:
  # 
  # A #cairo_pattern_t represents a source when drawing onto a
  # surface. There are different subtypes of #cairo_pattern_t,
  # for different types of sources; for example,
  # cairo_pattern_create_rgb() creates a pattern for a solid
  # opaque color.
  # 
  # Other than various cairo_pattern_create_<emphasis>type</emphasis>()
  # functions, some of the pattern types can be implicitly created
  # using various cairo_set_source_<emphasis>type</emphasis>() functions;
  # for example cairo_set_source_rgb().
  # 
  # The type of a pattern can be queried with cairo_pattern_get_type().
  # 
  # Memory management of #cairo_pattern_t is done with
  # cairo_pattern_reference() and cairo_pattern_destroy().
  class CairoPattern < FFI::Struct
  end
  
  # cairo_user_data_key_t:
  # @unused: not used; ignore.
  # 
  # #cairo_user_data_key_t is used for attaching user data to cairo
  # data structures.  The actual contents of the struct is never used,
  # and there is no need to initialize the object; only the unique
  # address of a #cairo_data_key_t object is used.  Typically, you
  # would just use the address of a static #cairo_data_key_t object.
  # 
  # = Fields:
  # :unused ::
  #   (Integer) 
  class CairoUserDataKey < FFI::Struct
    layout :unused, :int
  end
  
  # cairo_user_data_key_t:
  # @unused: not used; ignore.
  # 
  # #cairo_user_data_key_t is used for attaching user data to cairo
  # data structures.  The actual contents of the struct is never used,
  # and there is no need to initialize the object; only the unique
  # address of a #cairo_data_key_t object is used.  Typically, you
  # would just use the address of a static #cairo_data_key_t object.
  # 
  # = Fields:
  # :unused ::
  #   (Integer) 
  class CairoUserDataKeyT < FFI::Struct
    layout :unused, :int
  end
  
  # cairo_status_t:
  # @CAIRO_STATUS_SUCCESS: no error has occurred
  # @CAIRO_STATUS_NO_MEMORY: out of memory
  # @CAIRO_STATUS_INVALID_RESTORE: cairo_restore() called without matching cairo_save()
  # @CAIRO_STATUS_INVALID_POP_GROUP: no saved group to pop, i.e. cairo_pop_group() without matching cairo_push_group()
  # @CAIRO_STATUS_NO_CURRENT_POINT: no current point defined
  # @CAIRO_STATUS_INVALID_MATRIX: invalid matrix (not invertible)
  # @CAIRO_STATUS_INVALID_STATUS: invalid value for an input #cairo_status_t
  # @CAIRO_STATUS_NULL_POINTER: %NULL pointer
  # @CAIRO_STATUS_INVALID_STRING: input string not valid UTF-8
  # @CAIRO_STATUS_INVALID_PATH_DATA: input path data not valid
  # @CAIRO_STATUS_READ_ERROR: error while reading from input stream
  # @CAIRO_STATUS_WRITE_ERROR: error while writing to output stream
  # @CAIRO_STATUS_SURFACE_FINISHED: target surface has been finished
  # @CAIRO_STATUS_SURFACE_TYPE_MISMATCH: the surface type is not appropriate for the operation
  # @CAIRO_STATUS_PATTERN_TYPE_MISMATCH: the pattern type is not appropriate for the operation
  # @CAIRO_STATUS_INVALID_CONTENT: invalid value for an input #cairo_content_t
  # @CAIRO_STATUS_INVALID_FORMAT: invalid value for an input #cairo_format_t
  # @CAIRO_STATUS_INVALID_VISUAL: invalid value for an input Visual*
  # @CAIRO_STATUS_FILE_NOT_FOUND: file not found
  # @CAIRO_STATUS_INVALID_DASH: invalid value for a dash setting
  # @CAIRO_STATUS_INVALID_DSC_COMMENT: invalid value for a DSC comment (Since 1.2)
  # @CAIRO_STATUS_INVALID_INDEX: invalid index passed to getter (Since 1.4)
  # @CAIRO_STATUS_CLIP_NOT_REPRESENTABLE: clip region not representable in desired format (Since 1.4)
  # @CAIRO_STATUS_TEMP_FILE_ERROR: error creating or writing to a temporary file (Since 1.6)
  # @CAIRO_STATUS_INVALID_STRIDE: invalid value for stride (Since 1.6)
  # @CAIRO_STATUS_FONT_TYPE_MISMATCH: the font type is not appropriate for the operation (Since 1.8)
  # @CAIRO_STATUS_USER_FONT_IMMUTABLE: the user-font is immutable (Since 1.8)
  # @CAIRO_STATUS_USER_FONT_ERROR: error occurred in a user-font callback function (Since 1.8)
  # @CAIRO_STATUS_NEGATIVE_COUNT: negative number used where it is not allowed (Since 1.8)
  # @CAIRO_STATUS_INVALID_CLUSTERS: input clusters do not represent the accompanying text and glyph array (Since 1.8)
  # @CAIRO_STATUS_INVALID_SLANT: invalid value for an input #cairo_font_slant_t (Since 1.8)
  # @CAIRO_STATUS_INVALID_WEIGHT: invalid value for an input #cairo_font_weight_t (Since 1.8)
  # @CAIRO_STATUS_INVALID_SIZE: invalid value (typically too big) for the size of the input (surface, pattern, etc.) (Since 1.10)
  # @CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED: user-font method not implemented (Since 1.10)
  # @CAIRO_STATUS_DEVICE_TYPE_MISMATCH: the device type is not appropriate for the operation (Since 1.10)
  # @CAIRO_STATUS_DEVICE_ERROR: an operation to the device caused an unspecified error (Since 1.10)
  # @CAIRO_STATUS_LAST_STATUS: this is a special value indicating the number of
  #   status values defined in this enumeration.  When using this value, note
  #   that the version of cairo at run-time may have additional status values
  #   defined than the value of this symbol at compile-time. (Since 1.10)
  # 
  # #cairo_status_t is used to indicate errors that can occur when
  # using Cairo. In some cases it is returned directly by functions.
  # but when using #cairo_t, the last error, if any, is stored in
  # the context and can be retrieved with cairo_status().
  # 
  # New entries may be added in future versions.  Use cairo_status_to_string()
  # to get a human-readable representation of an error message.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_status).</em>
  # 
  # === Options:
  # :success ::
  #   
  # :no_memory ::
  #   
  # :invalid_restore ::
  #   
  # :invalid_pop_group ::
  #   
  # :no_current_point ::
  #   
  # :invalid_matrix ::
  #   
  # :invalid_status ::
  #   
  # :null_pointer ::
  #   
  # :invalid_string ::
  #   
  # :invalid_path_data ::
  #   
  # :read_error ::
  #   
  # :write_error ::
  #   
  # :surface_finished ::
  #   
  # :surface_type_mismatch ::
  #   
  # :pattern_type_mismatch ::
  #   
  # :invalid_content ::
  #   
  # :invalid_format ::
  #   
  # :invalid_visual ::
  #   
  # :file_not_found ::
  #   
  # :invalid_dash ::
  #   
  # :invalid_dsc_comment ::
  #   
  # :invalid_index ::
  #   
  # :clip_not_representable ::
  #   
  # :temp_file_error ::
  #   
  # :invalid_stride ::
  #   
  # :font_type_mismatch ::
  #   
  # :user_font_immutable ::
  #   
  # :user_font_error ::
  #   
  # :negative_count ::
  #   
  # :invalid_clusters ::
  #   
  # :invalid_slant ::
  #   
  # :invalid_weight ::
  #   
  # :invalid_size ::
  #   
  # :user_font_not_implemented ::
  #   
  # :device_type_mismatch ::
  #   
  # :device_error ::
  #   
  # :last_status ::
  #   
  # 
  # @method _enum_cairo_status_
  # @return [Symbol]
  # @scope class
  enum :cairo_status, [
    :success, 0,
    :no_memory,
    :invalid_restore,
    :invalid_pop_group,
    :no_current_point,
    :invalid_matrix,
    :invalid_status,
    :null_pointer,
    :invalid_string,
    :invalid_path_data,
    :read_error,
    :write_error,
    :surface_finished,
    :surface_type_mismatch,
    :pattern_type_mismatch,
    :invalid_content,
    :invalid_format,
    :invalid_visual,
    :file_not_found,
    :invalid_dash,
    :invalid_dsc_comment,
    :invalid_index,
    :clip_not_representable,
    :temp_file_error,
    :invalid_stride,
    :font_type_mismatch,
    :user_font_immutable,
    :user_font_error,
    :negative_count,
    :invalid_clusters,
    :invalid_slant,
    :invalid_weight,
    :invalid_size,
    :user_font_not_implemented,
    :device_type_mismatch,
    :device_error,
    :last_status
  ]
  
  # cairo_status_t:
  # @CAIRO_STATUS_SUCCESS: no error has occurred
  # @CAIRO_STATUS_NO_MEMORY: out of memory
  # @CAIRO_STATUS_INVALID_RESTORE: cairo_restore() called without matching cairo_save()
  # @CAIRO_STATUS_INVALID_POP_GROUP: no saved group to pop, i.e. cairo_pop_group() without matching cairo_push_group()
  # @CAIRO_STATUS_NO_CURRENT_POINT: no current point defined
  # @CAIRO_STATUS_INVALID_MATRIX: invalid matrix (not invertible)
  # @CAIRO_STATUS_INVALID_STATUS: invalid value for an input #cairo_status_t
  # @CAIRO_STATUS_NULL_POINTER: %NULL pointer
  # @CAIRO_STATUS_INVALID_STRING: input string not valid UTF-8
  # @CAIRO_STATUS_INVALID_PATH_DATA: input path data not valid
  # @CAIRO_STATUS_READ_ERROR: error while reading from input stream
  # @CAIRO_STATUS_WRITE_ERROR: error while writing to output stream
  # @CAIRO_STATUS_SURFACE_FINISHED: target surface has been finished
  # @CAIRO_STATUS_SURFACE_TYPE_MISMATCH: the surface type is not appropriate for the operation
  # @CAIRO_STATUS_PATTERN_TYPE_MISMATCH: the pattern type is not appropriate for the operation
  # @CAIRO_STATUS_INVALID_CONTENT: invalid value for an input #cairo_content_t
  # @CAIRO_STATUS_INVALID_FORMAT: invalid value for an input #cairo_format_t
  # @CAIRO_STATUS_INVALID_VISUAL: invalid value for an input Visual*
  # @CAIRO_STATUS_FILE_NOT_FOUND: file not found
  # @CAIRO_STATUS_INVALID_DASH: invalid value for a dash setting
  # @CAIRO_STATUS_INVALID_DSC_COMMENT: invalid value for a DSC comment (Since 1.2)
  # @CAIRO_STATUS_INVALID_INDEX: invalid index passed to getter (Since 1.4)
  # @CAIRO_STATUS_CLIP_NOT_REPRESENTABLE: clip region not representable in desired format (Since 1.4)
  # @CAIRO_STATUS_TEMP_FILE_ERROR: error creating or writing to a temporary file (Since 1.6)
  # @CAIRO_STATUS_INVALID_STRIDE: invalid value for stride (Since 1.6)
  # @CAIRO_STATUS_FONT_TYPE_MISMATCH: the font type is not appropriate for the operation (Since 1.8)
  # @CAIRO_STATUS_USER_FONT_IMMUTABLE: the user-font is immutable (Since 1.8)
  # @CAIRO_STATUS_USER_FONT_ERROR: error occurred in a user-font callback function (Since 1.8)
  # @CAIRO_STATUS_NEGATIVE_COUNT: negative number used where it is not allowed (Since 1.8)
  # @CAIRO_STATUS_INVALID_CLUSTERS: input clusters do not represent the accompanying text and glyph array (Since 1.8)
  # @CAIRO_STATUS_INVALID_SLANT: invalid value for an input #cairo_font_slant_t (Since 1.8)
  # @CAIRO_STATUS_INVALID_WEIGHT: invalid value for an input #cairo_font_weight_t (Since 1.8)
  # @CAIRO_STATUS_INVALID_SIZE: invalid value (typically too big) for the size of the input (surface, pattern, etc.) (Since 1.10)
  # @CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED: user-font method not implemented (Since 1.10)
  # @CAIRO_STATUS_DEVICE_TYPE_MISMATCH: the device type is not appropriate for the operation (Since 1.10)
  # @CAIRO_STATUS_DEVICE_ERROR: an operation to the device caused an unspecified error (Since 1.10)
  # @CAIRO_STATUS_LAST_STATUS: this is a special value indicating the number of
  #   status values defined in this enumeration.  When using this value, note
  #   that the version of cairo at run-time may have additional status values
  #   defined than the value of this symbol at compile-time. (Since 1.10)
  # 
  # #cairo_status_t is used to indicate errors that can occur when
  # using Cairo. In some cases it is returned directly by functions.
  # but when using #cairo_t, the last error, if any, is stored in
  # the context and can be retrieved with cairo_status().
  # 
  # New entries may be added in future versions.  Use cairo_status_to_string()
  # to get a human-readable representation of an error message.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_status_t).</em>
  # 
  # === Options:
  # :success ::
  #   
  # :no_memory ::
  #   
  # :invalid_restore ::
  #   
  # :invalid_pop_group ::
  #   
  # :no_current_point ::
  #   
  # :invalid_matrix ::
  #   
  # :invalid_status ::
  #   
  # :null_pointer ::
  #   
  # :invalid_string ::
  #   
  # :invalid_path_data ::
  #   
  # :read_error ::
  #   
  # :write_error ::
  #   
  # :surface_finished ::
  #   
  # :surface_type_mismatch ::
  #   
  # :pattern_type_mismatch ::
  #   
  # :invalid_content ::
  #   
  # :invalid_format ::
  #   
  # :invalid_visual ::
  #   
  # :file_not_found ::
  #   
  # :invalid_dash ::
  #   
  # :invalid_dsc_comment ::
  #   
  # :invalid_index ::
  #   
  # :clip_not_representable ::
  #   
  # :temp_file_error ::
  #   
  # :invalid_stride ::
  #   
  # :font_type_mismatch ::
  #   
  # :user_font_immutable ::
  #   
  # :user_font_error ::
  #   
  # :negative_count ::
  #   
  # :invalid_clusters ::
  #   
  # :invalid_slant ::
  #   
  # :invalid_weight ::
  #   
  # :invalid_size ::
  #   
  # :user_font_not_implemented ::
  #   
  # :device_type_mismatch ::
  #   
  # :device_error ::
  #   
  # :last_status ::
  #   
  # 
  # @method _enum_cairo_status_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_status_t, [
    :success, 0,
    :no_memory,
    :invalid_restore,
    :invalid_pop_group,
    :no_current_point,
    :invalid_matrix,
    :invalid_status,
    :null_pointer,
    :invalid_string,
    :invalid_path_data,
    :read_error,
    :write_error,
    :surface_finished,
    :surface_type_mismatch,
    :pattern_type_mismatch,
    :invalid_content,
    :invalid_format,
    :invalid_visual,
    :file_not_found,
    :invalid_dash,
    :invalid_dsc_comment,
    :invalid_index,
    :clip_not_representable,
    :temp_file_error,
    :invalid_stride,
    :font_type_mismatch,
    :user_font_immutable,
    :user_font_error,
    :negative_count,
    :invalid_clusters,
    :invalid_slant,
    :invalid_weight,
    :invalid_size,
    :user_font_not_implemented,
    :device_type_mismatch,
    :device_error,
    :last_status
  ]
  
  # cairo_content_t:
  # @CAIRO_CONTENT_COLOR: The surface will hold color content only.
  # @CAIRO_CONTENT_ALPHA: The surface will hold alpha content only.
  # @CAIRO_CONTENT_COLOR_ALPHA: The surface will hold color and alpha content.
  # 
  # #cairo_content_t is used to describe the content that a surface will
  # contain, whether color information, alpha information (translucence
  # vs. opacity), or both.
  # 
  # Note: The large values here are designed to keep #cairo_content_t
  # values distinct from #cairo_format_t values so that the
  # implementation can detect the error if users confuse the two types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_content).</em>
  # 
  # === Options:
  # :color ::
  #   
  # :alpha ::
  #   
  # :color_alpha ::
  #   
  # 
  # @method _enum_cairo_content_
  # @return [Symbol]
  # @scope class
  enum :cairo_content, [
    :color, 0x1000,
    :alpha, 0x2000,
    :color_alpha, 0x3000
  ]
  
  # cairo_content_t:
  # @CAIRO_CONTENT_COLOR: The surface will hold color content only.
  # @CAIRO_CONTENT_ALPHA: The surface will hold alpha content only.
  # @CAIRO_CONTENT_COLOR_ALPHA: The surface will hold color and alpha content.
  # 
  # #cairo_content_t is used to describe the content that a surface will
  # contain, whether color information, alpha information (translucence
  # vs. opacity), or both.
  # 
  # Note: The large values here are designed to keep #cairo_content_t
  # values distinct from #cairo_format_t values so that the
  # implementation can detect the error if users confuse the two types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_content_t).</em>
  # 
  # === Options:
  # :color ::
  #   
  # :alpha ::
  #   
  # :color_alpha ::
  #   
  # 
  # @method _enum_cairo_content_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_content_t, [
    :color, 0x1000,
    :alpha, 0x2000,
    :color_alpha, 0x3000
  ]
  
  # cairo_write_func_t:
  # @closure: the output closure
  # @data: the buffer containing the data to write
  # @length: the amount of data to write
  # 
  # #cairo_write_func_t is the type of function which is called when a
  # backend needs to write data to an output stream.  It is passed the
  # closure which was specified by the user at the time the write
  # function was registered, the data to write and the length of the
  # data in bytes.  The write function should return
  # %CAIRO_STATUS_SUCCESS if all the data was successfully written,
  # %CAIRO_STATUS_WRITE_ERROR otherwise.
  # 
  # Returns: the status code of the write operation
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_cairo_write_func_t_(closure, data, length)
  # @param [FFI::Pointer(*Void)] closure 
  # @param [FFI::Pointer(*UChar)] data 
  # @param [Integer] length 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  callback :cairo_write_func_t, [:pointer, :pointer, :uint], :cairo_status_t
  
  # cairo_read_func_t:
  # @closure: the input closure
  # @data: the buffer into which to read the data
  # @length: the amount of data to read
  # 
  # #cairo_read_func_t is the type of function which is called when a
  # backend needs to read data from an input stream.  It is passed the
  # closure which was specified by the user at the time the read
  # function was registered, the buffer to read the data into and the
  # length of the data in bytes.  The read function should return
  # %CAIRO_STATUS_SUCCESS if all the data was successfully read,
  # %CAIRO_STATUS_READ_ERROR otherwise.
  # 
  # Returns: the status code of the read operation
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_cairo_read_func_t_(closure, data, length)
  # @param [FFI::Pointer(*Void)] closure 
  # @param [FFI::Pointer(*UChar)] data 
  # @param [Integer] length 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  callback :cairo_read_func_t, [:pointer, :pointer, :uint], :cairo_status_t
  
  # Functions for manipulating state objects
  # 
  # @method cairo_create(target)
  # @param [CairoSurface] target 
  # @return [Cairo] 
  # @scope class
  attach_function :cairo_create, :cairo_create, [CairoSurface], Cairo
  
  # (Not documented)
  # 
  # @method cairo_reference(cr)
  # @param [Cairo] cr 
  # @return [Cairo] 
  # @scope class
  attach_function :cairo_reference, :cairo_reference, [Cairo], Cairo
  
  # (Not documented)
  # 
  # @method cairo_destroy(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_destroy, :cairo_destroy, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_get_reference_count(cr)
  # @param [Cairo] cr 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_get_reference_count, :cairo_get_reference_count, [Cairo], :uint
  
  # (Not documented)
  # 
  # @method cairo_get_user_data(cr, key)
  # @param [Cairo] cr 
  # @param [CairoUserDataKey] key 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :cairo_get_user_data, :cairo_get_user_data, [Cairo, CairoUserDataKey], :pointer
  
  # (Not documented)
  # 
  # @method cairo_set_user_data(cr, key, user_data, destroy)
  # @param [Cairo] cr 
  # @param [CairoUserDataKey] key 
  # @param [FFI::Pointer(*Void)] user_data 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_set_user_data, :cairo_set_user_data, [Cairo, CairoUserDataKey, :pointer, :pointer], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_save(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_save, :cairo_save, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_restore(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_restore, :cairo_restore, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_push_group(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_push_group, :cairo_push_group, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_push_group_with_content(cr, content)
  # @param [Cairo] cr 
  # @param [Symbol from _enum_cairo_content_t_] content 
  # @return [nil] 
  # @scope class
  attach_function :cairo_push_group_with_content, :cairo_push_group_with_content, [Cairo, :cairo_content_t], :void
  
  # (Not documented)
  # 
  # @method cairo_pop_group(cr)
  # @param [Cairo] cr 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pop_group, :cairo_pop_group, [Cairo], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pop_group_to_source(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pop_group_to_source, :cairo_pop_group_to_source, [Cairo], :void
  
  # cairo_operator_t:
  # @CAIRO_OPERATOR_CLEAR: clear destination layer (bounded)
  # @CAIRO_OPERATOR_SOURCE: replace destination layer (bounded)
  # @CAIRO_OPERATOR_OVER: draw source layer on top of destination layer
  # (bounded)
  # @CAIRO_OPERATOR_IN: draw source where there was destination content
  # (unbounded)
  # @CAIRO_OPERATOR_OUT: draw source where there was no destination
  # content (unbounded)
  # @CAIRO_OPERATOR_ATOP: draw source on top of destination content and
  # only there
  # @CAIRO_OPERATOR_DEST: ignore the source
  # @CAIRO_OPERATOR_DEST_OVER: draw destination on top of source
  # @CAIRO_OPERATOR_DEST_IN: leave destination only where there was
  # source content (unbounded)
  # @CAIRO_OPERATOR_DEST_OUT: leave destination only where there was no
  # source content
  # @CAIRO_OPERATOR_DEST_ATOP: leave destination on top of source content
  # and only there (unbounded)
  # @CAIRO_OPERATOR_XOR: source and destination are shown where there is only
  # one of them
  # @CAIRO_OPERATOR_ADD: source and destination layers are accumulated
  # @CAIRO_OPERATOR_SATURATE: like over, but assuming source and dest are
  # disjoint geometries
  # @CAIRO_OPERATOR_MULTIPLY: source and destination layers are multiplied.
  # This causes the result to be at least as dark as the darker inputs.
  # @CAIRO_OPERATOR_SCREEN: source and destination are complemented and
  # multiplied. This causes the result to be at least as light as the lighter
  # inputs.
  # @CAIRO_OPERATOR_OVERLAY: multiplies or screens, depending on the
  # lightness of the destination color.
  # @CAIRO_OPERATOR_DARKEN: replaces the destination with the source if it
  # is darker, otherwise keeps the source.
  # @CAIRO_OPERATOR_LIGHTEN: replaces the destination with the source if it
  # is lighter, otherwise keeps the source.
  # @CAIRO_OPERATOR_COLOR_DODGE: brightens the destination color to reflect
  # the source color.
  # @CAIRO_OPERATOR_COLOR_BURN: darkens the destination color to reflect
  # the source color.
  # @CAIRO_OPERATOR_HARD_LIGHT: Multiplies or screens, dependant on source
  # color.
  # @CAIRO_OPERATOR_SOFT_LIGHT: Darkens or lightens, dependant on source
  # color.
  # @CAIRO_OPERATOR_DIFFERENCE: Takes the difference of the source and
  # destination color.
  # @CAIRO_OPERATOR_EXCLUSION: Produces an effect similar to difference, but
  # with lower contrast.
  # @CAIRO_OPERATOR_HSL_HUE: Creates a color with the hue of the source
  # and the saturation and luminosity of the target.
  # @CAIRO_OPERATOR_HSL_SATURATION: Creates a color with the saturation
  # of the source and the hue and luminosity of the target. Painting with
  # this mode onto a gray area prduces no change.
  # @CAIRO_OPERATOR_HSL_COLOR: Creates a color with the hue and saturation
  # of the source and the luminosity of the target. This preserves the gray
  # levels of the target and is useful for coloring monochrome images or
  # tinting color images.
  # @CAIRO_OPERATOR_HSL_LUMINOSITY: Creates a color with the luminosity of
  # the source and the hue and saturation of the target. This produces an
  # inverse effect to @CAIRO_OPERATOR_HSL_COLOR.
  # 
  # #cairo_operator_t is used to set the compositing operator for all cairo
  # drawing operations.
  # 
  # The default operator is %CAIRO_OPERATOR_OVER.
  # 
  # The operators marked as <firstterm>unbounded</firstterm> modify their
  # destination even outside of the mask layer (that is, their effect is not
  # bound by the mask layer).  However, their effect can still be limited by
  # way of clipping.
  # 
  # To keep things simple, the operator descriptions here
  # document the behavior for when both source and destination are either fully
  # transparent or fully opaque.  The actual implementation works for
  # translucent layers too.
  # For a more detailed explanation of the effects of each operator, including
  # the mathematical definitions, see
  # <ulink url="http://cairographics.org/operators/">http://cairographics.org/operators/</ulink>.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_operator).</em>
  # 
  # === Options:
  # :clear ::
  #   
  # :source ::
  #   
  # :over ::
  #   
  # :in ::
  #   
  # :out ::
  #   
  # :atop ::
  #   
  # :dest ::
  #   
  # :dest_over ::
  #   
  # :dest_in ::
  #   
  # :dest_out ::
  #   
  # :dest_atop ::
  #   
  # :xor ::
  #   
  # :add ::
  #   
  # :saturate ::
  #   
  # :multiply ::
  #   
  # :screen ::
  #   
  # :overlay ::
  #   
  # :darken ::
  #   
  # :lighten ::
  #   
  # :color_dodge ::
  #   
  # :color_burn ::
  #   
  # :hard_light ::
  #   
  # :soft_light ::
  #   
  # :difference ::
  #   
  # :exclusion ::
  #   
  # :hsl_hue ::
  #   
  # :hsl_saturation ::
  #   
  # :hsl_color ::
  #   
  # :hsl_luminosity ::
  #   
  # 
  # @method _enum_cairo_operator_
  # @return [Symbol]
  # @scope class
  enum :cairo_operator, [
    :clear,
    :source,
    :over,
    :in,
    :out,
    :atop,
    :dest,
    :dest_over,
    :dest_in,
    :dest_out,
    :dest_atop,
    :xor,
    :add,
    :saturate,
    :multiply,
    :screen,
    :overlay,
    :darken,
    :lighten,
    :color_dodge,
    :color_burn,
    :hard_light,
    :soft_light,
    :difference,
    :exclusion,
    :hsl_hue,
    :hsl_saturation,
    :hsl_color,
    :hsl_luminosity
  ]
  
  # cairo_operator_t:
  # @CAIRO_OPERATOR_CLEAR: clear destination layer (bounded)
  # @CAIRO_OPERATOR_SOURCE: replace destination layer (bounded)
  # @CAIRO_OPERATOR_OVER: draw source layer on top of destination layer
  # (bounded)
  # @CAIRO_OPERATOR_IN: draw source where there was destination content
  # (unbounded)
  # @CAIRO_OPERATOR_OUT: draw source where there was no destination
  # content (unbounded)
  # @CAIRO_OPERATOR_ATOP: draw source on top of destination content and
  # only there
  # @CAIRO_OPERATOR_DEST: ignore the source
  # @CAIRO_OPERATOR_DEST_OVER: draw destination on top of source
  # @CAIRO_OPERATOR_DEST_IN: leave destination only where there was
  # source content (unbounded)
  # @CAIRO_OPERATOR_DEST_OUT: leave destination only where there was no
  # source content
  # @CAIRO_OPERATOR_DEST_ATOP: leave destination on top of source content
  # and only there (unbounded)
  # @CAIRO_OPERATOR_XOR: source and destination are shown where there is only
  # one of them
  # @CAIRO_OPERATOR_ADD: source and destination layers are accumulated
  # @CAIRO_OPERATOR_SATURATE: like over, but assuming source and dest are
  # disjoint geometries
  # @CAIRO_OPERATOR_MULTIPLY: source and destination layers are multiplied.
  # This causes the result to be at least as dark as the darker inputs.
  # @CAIRO_OPERATOR_SCREEN: source and destination are complemented and
  # multiplied. This causes the result to be at least as light as the lighter
  # inputs.
  # @CAIRO_OPERATOR_OVERLAY: multiplies or screens, depending on the
  # lightness of the destination color.
  # @CAIRO_OPERATOR_DARKEN: replaces the destination with the source if it
  # is darker, otherwise keeps the source.
  # @CAIRO_OPERATOR_LIGHTEN: replaces the destination with the source if it
  # is lighter, otherwise keeps the source.
  # @CAIRO_OPERATOR_COLOR_DODGE: brightens the destination color to reflect
  # the source color.
  # @CAIRO_OPERATOR_COLOR_BURN: darkens the destination color to reflect
  # the source color.
  # @CAIRO_OPERATOR_HARD_LIGHT: Multiplies or screens, dependant on source
  # color.
  # @CAIRO_OPERATOR_SOFT_LIGHT: Darkens or lightens, dependant on source
  # color.
  # @CAIRO_OPERATOR_DIFFERENCE: Takes the difference of the source and
  # destination color.
  # @CAIRO_OPERATOR_EXCLUSION: Produces an effect similar to difference, but
  # with lower contrast.
  # @CAIRO_OPERATOR_HSL_HUE: Creates a color with the hue of the source
  # and the saturation and luminosity of the target.
  # @CAIRO_OPERATOR_HSL_SATURATION: Creates a color with the saturation
  # of the source and the hue and luminosity of the target. Painting with
  # this mode onto a gray area prduces no change.
  # @CAIRO_OPERATOR_HSL_COLOR: Creates a color with the hue and saturation
  # of the source and the luminosity of the target. This preserves the gray
  # levels of the target and is useful for coloring monochrome images or
  # tinting color images.
  # @CAIRO_OPERATOR_HSL_LUMINOSITY: Creates a color with the luminosity of
  # the source and the hue and saturation of the target. This produces an
  # inverse effect to @CAIRO_OPERATOR_HSL_COLOR.
  # 
  # #cairo_operator_t is used to set the compositing operator for all cairo
  # drawing operations.
  # 
  # The default operator is %CAIRO_OPERATOR_OVER.
  # 
  # The operators marked as <firstterm>unbounded</firstterm> modify their
  # destination even outside of the mask layer (that is, their effect is not
  # bound by the mask layer).  However, their effect can still be limited by
  # way of clipping.
  # 
  # To keep things simple, the operator descriptions here
  # document the behavior for when both source and destination are either fully
  # transparent or fully opaque.  The actual implementation works for
  # translucent layers too.
  # For a more detailed explanation of the effects of each operator, including
  # the mathematical definitions, see
  # <ulink url="http://cairographics.org/operators/">http://cairographics.org/operators/</ulink>.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_operator_t).</em>
  # 
  # === Options:
  # :clear ::
  #   
  # :source ::
  #   
  # :over ::
  #   
  # :in ::
  #   
  # :out ::
  #   
  # :atop ::
  #   
  # :dest ::
  #   
  # :dest_over ::
  #   
  # :dest_in ::
  #   
  # :dest_out ::
  #   
  # :dest_atop ::
  #   
  # :xor ::
  #   
  # :add ::
  #   
  # :saturate ::
  #   
  # :multiply ::
  #   
  # :screen ::
  #   
  # :overlay ::
  #   
  # :darken ::
  #   
  # :lighten ::
  #   
  # :color_dodge ::
  #   
  # :color_burn ::
  #   
  # :hard_light ::
  #   
  # :soft_light ::
  #   
  # :difference ::
  #   
  # :exclusion ::
  #   
  # :hsl_hue ::
  #   
  # :hsl_saturation ::
  #   
  # :hsl_color ::
  #   
  # :hsl_luminosity ::
  #   
  # 
  # @method _enum_cairo_operator_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_operator_t, [
    :clear,
    :source,
    :over,
    :in,
    :out,
    :atop,
    :dest,
    :dest_over,
    :dest_in,
    :dest_out,
    :dest_atop,
    :xor,
    :add,
    :saturate,
    :multiply,
    :screen,
    :overlay,
    :darken,
    :lighten,
    :color_dodge,
    :color_burn,
    :hard_light,
    :soft_light,
    :difference,
    :exclusion,
    :hsl_hue,
    :hsl_saturation,
    :hsl_color,
    :hsl_luminosity
  ]
  
  # (Not documented)
  # 
  # @method cairo_set_operator(cr, op)
  # @param [Cairo] cr 
  # @param [Symbol from _enum_cairo_operator_t_] op 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_operator, :cairo_set_operator, [Cairo, :cairo_operator_t], :void
  
  # (Not documented)
  # 
  # @method cairo_set_source(cr, source)
  # @param [Cairo] cr 
  # @param [CairoPattern] source 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_source, :cairo_set_source, [Cairo, CairoPattern], :void
  
  # (Not documented)
  # 
  # @method cairo_set_source_rgb(cr, red, green, blue)
  # @param [Cairo] cr 
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_source_rgb, :cairo_set_source_rgb, [Cairo, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_set_source_rgba(cr, red, green, blue, alpha)
  # @param [Cairo] cr 
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @param [Float] alpha 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_source_rgba, :cairo_set_source_rgba, [Cairo, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_set_source_surface(cr, surface, x, y)
  # @param [Cairo] cr 
  # @param [CairoSurface] surface 
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_source_surface, :cairo_set_source_surface, [Cairo, CairoSurface, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_set_tolerance(cr, tolerance)
  # @param [Cairo] cr 
  # @param [Float] tolerance 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_tolerance, :cairo_set_tolerance, [Cairo, :double], :void
  
  # cairo_antialias_t:
  # @CAIRO_ANTIALIAS_DEFAULT: Use the default antialiasing for
  #   the subsystem and target device
  # @CAIRO_ANTIALIAS_NONE: Use a bilevel alpha mask
  # @CAIRO_ANTIALIAS_GRAY: Perform single-color antialiasing (using
  #  shades of gray for black text on a white background, for example).
  # @CAIRO_ANTIALIAS_SUBPIXEL: Perform antialiasing by taking
  #  advantage of the order of subpixel elements on devices
  #  such as LCD panels
  # 
  # Specifies the type of antialiasing to do when rendering text or shapes.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_antialias).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :none ::
  #   
  # :gray ::
  #   
  # :subpixel ::
  #   
  # 
  # @method _enum_cairo_antialias_
  # @return [Symbol]
  # @scope class
  enum :cairo_antialias, [
    :default,
    :none,
    :gray,
    :subpixel
  ]
  
  # cairo_antialias_t:
  # @CAIRO_ANTIALIAS_DEFAULT: Use the default antialiasing for
  #   the subsystem and target device
  # @CAIRO_ANTIALIAS_NONE: Use a bilevel alpha mask
  # @CAIRO_ANTIALIAS_GRAY: Perform single-color antialiasing (using
  #  shades of gray for black text on a white background, for example).
  # @CAIRO_ANTIALIAS_SUBPIXEL: Perform antialiasing by taking
  #  advantage of the order of subpixel elements on devices
  #  such as LCD panels
  # 
  # Specifies the type of antialiasing to do when rendering text or shapes.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_antialias_t).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :none ::
  #   
  # :gray ::
  #   
  # :subpixel ::
  #   
  # 
  # @method _enum_cairo_antialias_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_antialias_t, [
    :default,
    :none,
    :gray,
    :subpixel
  ]
  
  # (Not documented)
  # 
  # @method cairo_set_antialias(cr, antialias)
  # @param [Cairo] cr 
  # @param [Symbol from _enum_cairo_antialias_t_] antialias 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_antialias, :cairo_set_antialias, [Cairo, :cairo_antialias_t], :void
  
  # cairo_fill_rule_t:
  # @CAIRO_FILL_RULE_WINDING: If the path crosses the ray from
  # left-to-right, counts +1. If the path crosses the ray
  # from right to left, counts -1. (Left and right are determined
  # from the perspective of looking along the ray from the starting
  # point.) If the total count is non-zero, the point will be filled.
  # @CAIRO_FILL_RULE_EVEN_ODD: Counts the total number of
  # intersections, without regard to the orientation of the contour. If
  # the total number of intersections is odd, the point will be
  # filled.
  # 
  # #cairo_fill_rule_t is used to select how paths are filled. For both
  # fill rules, whether or not a point is included in the fill is
  # determined by taking a ray from that point to infinity and looking
  # at intersections with the path. The ray can be in any direction,
  # as long as it doesn't pass through the end point of a segment
  # or have a tricky intersection such as intersecting tangent to the path.
  # (Note that filling is not actually implemented in this way. This
  # is just a description of the rule that is applied.)
  # 
  # The default fill rule is %CAIRO_FILL_RULE_WINDING.
  # 
  # New entries may be added in future versions.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_fill_rule).</em>
  # 
  # === Options:
  # :winding ::
  #   
  # :even_odd ::
  #   
  # 
  # @method _enum_cairo_fill_rule_
  # @return [Symbol]
  # @scope class
  enum :cairo_fill_rule, [
    :winding,
    :even_odd
  ]
  
  # cairo_fill_rule_t:
  # @CAIRO_FILL_RULE_WINDING: If the path crosses the ray from
  # left-to-right, counts +1. If the path crosses the ray
  # from right to left, counts -1. (Left and right are determined
  # from the perspective of looking along the ray from the starting
  # point.) If the total count is non-zero, the point will be filled.
  # @CAIRO_FILL_RULE_EVEN_ODD: Counts the total number of
  # intersections, without regard to the orientation of the contour. If
  # the total number of intersections is odd, the point will be
  # filled.
  # 
  # #cairo_fill_rule_t is used to select how paths are filled. For both
  # fill rules, whether or not a point is included in the fill is
  # determined by taking a ray from that point to infinity and looking
  # at intersections with the path. The ray can be in any direction,
  # as long as it doesn't pass through the end point of a segment
  # or have a tricky intersection such as intersecting tangent to the path.
  # (Note that filling is not actually implemented in this way. This
  # is just a description of the rule that is applied.)
  # 
  # The default fill rule is %CAIRO_FILL_RULE_WINDING.
  # 
  # New entries may be added in future versions.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_fill_rule_t).</em>
  # 
  # === Options:
  # :winding ::
  #   
  # :even_odd ::
  #   
  # 
  # @method _enum_cairo_fill_rule_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_fill_rule_t, [
    :winding,
    :even_odd
  ]
  
  # (Not documented)
  # 
  # @method cairo_set_fill_rule(cr, fill_rule)
  # @param [Cairo] cr 
  # @param [Symbol from _enum_cairo_fill_rule_t_] fill_rule 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_fill_rule, :cairo_set_fill_rule, [Cairo, :cairo_fill_rule_t], :void
  
  # (Not documented)
  # 
  # @method cairo_set_line_width(cr, width)
  # @param [Cairo] cr 
  # @param [Float] width 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_line_width, :cairo_set_line_width, [Cairo, :double], :void
  
  # cairo_line_cap_t:
  # @CAIRO_LINE_CAP_BUTT: start(stop) the line exactly at the start(end) point
  # @CAIRO_LINE_CAP_ROUND: use a round ending, the center of the circle is the end point
  # @CAIRO_LINE_CAP_SQUARE: use squared ending, the center of the square is the end point
  # 
  # Specifies how to render the endpoints of the path when stroking.
  # 
  # The default line cap style is %CAIRO_LINE_CAP_BUTT.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_line_cap).</em>
  # 
  # === Options:
  # :butt ::
  #   
  # :round ::
  #   
  # :square ::
  #   
  # 
  # @method _enum_cairo_line_cap_
  # @return [Symbol]
  # @scope class
  enum :cairo_line_cap, [
    :butt,
    :round,
    :square
  ]
  
  # cairo_line_cap_t:
  # @CAIRO_LINE_CAP_BUTT: start(stop) the line exactly at the start(end) point
  # @CAIRO_LINE_CAP_ROUND: use a round ending, the center of the circle is the end point
  # @CAIRO_LINE_CAP_SQUARE: use squared ending, the center of the square is the end point
  # 
  # Specifies how to render the endpoints of the path when stroking.
  # 
  # The default line cap style is %CAIRO_LINE_CAP_BUTT.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_line_cap_t).</em>
  # 
  # === Options:
  # :butt ::
  #   
  # :round ::
  #   
  # :square ::
  #   
  # 
  # @method _enum_cairo_line_cap_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_line_cap_t, [
    :butt,
    :round,
    :square
  ]
  
  # (Not documented)
  # 
  # @method cairo_set_line_cap(cr, line_cap)
  # @param [Cairo] cr 
  # @param [Symbol from _enum_cairo_line_cap_t_] line_cap 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_line_cap, :cairo_set_line_cap, [Cairo, :cairo_line_cap_t], :void
  
  # cairo_line_join_t:
  # @CAIRO_LINE_JOIN_MITER: use a sharp (angled) corner, see
  # cairo_set_miter_limit()
  # @CAIRO_LINE_JOIN_ROUND: use a rounded join, the center of the circle is the
  # joint point
  # @CAIRO_LINE_JOIN_BEVEL: use a cut-off join, the join is cut off at half
  # the line width from the joint point
  # 
  # Specifies how to render the junction of two lines when stroking.
  # 
  # The default line join style is %CAIRO_LINE_JOIN_MITER.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_line_join).</em>
  # 
  # === Options:
  # :miter ::
  #   
  # :round ::
  #   
  # :bevel ::
  #   
  # 
  # @method _enum_cairo_line_join_
  # @return [Symbol]
  # @scope class
  enum :cairo_line_join, [
    :miter,
    :round,
    :bevel
  ]
  
  # cairo_line_join_t:
  # @CAIRO_LINE_JOIN_MITER: use a sharp (angled) corner, see
  # cairo_set_miter_limit()
  # @CAIRO_LINE_JOIN_ROUND: use a rounded join, the center of the circle is the
  # joint point
  # @CAIRO_LINE_JOIN_BEVEL: use a cut-off join, the join is cut off at half
  # the line width from the joint point
  # 
  # Specifies how to render the junction of two lines when stroking.
  # 
  # The default line join style is %CAIRO_LINE_JOIN_MITER.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_line_join_t).</em>
  # 
  # === Options:
  # :miter ::
  #   
  # :round ::
  #   
  # :bevel ::
  #   
  # 
  # @method _enum_cairo_line_join_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_line_join_t, [
    :miter,
    :round,
    :bevel
  ]
  
  # (Not documented)
  # 
  # @method cairo_set_line_join(cr, line_join)
  # @param [Cairo] cr 
  # @param [Symbol from _enum_cairo_line_join_t_] line_join 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_line_join, :cairo_set_line_join, [Cairo, :cairo_line_join_t], :void
  
  # (Not documented)
  # 
  # @method cairo_set_dash(cr, dashes, num_dashes, offset)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] dashes 
  # @param [Integer] num_dashes 
  # @param [Float] offset 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_dash, :cairo_set_dash, [Cairo, :pointer, :int, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_set_miter_limit(cr, limit)
  # @param [Cairo] cr 
  # @param [Float] limit 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_miter_limit, :cairo_set_miter_limit, [Cairo, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_translate(cr, tx, ty)
  # @param [Cairo] cr 
  # @param [Float] tx 
  # @param [Float] ty 
  # @return [nil] 
  # @scope class
  attach_function :cairo_translate, :cairo_translate, [Cairo, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_scale(cr, sx, sy)
  # @param [Cairo] cr 
  # @param [Float] sx 
  # @param [Float] sy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scale, :cairo_scale, [Cairo, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_rotate(cr, angle)
  # @param [Cairo] cr 
  # @param [Float] angle 
  # @return [nil] 
  # @scope class
  attach_function :cairo_rotate, :cairo_rotate, [Cairo, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_transform(cr, matrix)
  # @param [Cairo] cr 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_transform, :cairo_transform, [Cairo, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_set_matrix(cr, matrix)
  # @param [Cairo] cr 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_matrix, :cairo_set_matrix, [Cairo, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_identity_matrix(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_identity_matrix, :cairo_identity_matrix, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_user_to_device(cr, x, y)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x 
  # @param [FFI::Pointer(*Double)] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_user_to_device, :cairo_user_to_device, [Cairo, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_user_to_device_distance(cr, dx, dy)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] dx 
  # @param [FFI::Pointer(*Double)] dy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_user_to_device_distance, :cairo_user_to_device_distance, [Cairo, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_device_to_user(cr, x, y)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x 
  # @param [FFI::Pointer(*Double)] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_device_to_user, :cairo_device_to_user, [Cairo, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_device_to_user_distance(cr, dx, dy)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] dx 
  # @param [FFI::Pointer(*Double)] dy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_device_to_user_distance, :cairo_device_to_user_distance, [Cairo, :pointer, :pointer], :void
  
  # Path creation functions
  # 
  # @method cairo_new_path(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_new_path, :cairo_new_path, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_move_to(cr, x, y)
  # @param [Cairo] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_move_to, :cairo_move_to, [Cairo, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_new_sub_path(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_new_sub_path, :cairo_new_sub_path, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_line_to(cr, x, y)
  # @param [Cairo] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_line_to, :cairo_line_to, [Cairo, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_curve_to(cr, x1, y1, x2, y2, x3, y3)
  # @param [Cairo] cr 
  # @param [Float] x1 
  # @param [Float] y1 
  # @param [Float] x2 
  # @param [Float] y2 
  # @param [Float] x3 
  # @param [Float] y3 
  # @return [nil] 
  # @scope class
  attach_function :cairo_curve_to, :cairo_curve_to, [Cairo, :double, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_arc(cr, xc, yc, radius, angle1, angle2)
  # @param [Cairo] cr 
  # @param [Float] xc 
  # @param [Float] yc 
  # @param [Float] radius 
  # @param [Float] angle1 
  # @param [Float] angle2 
  # @return [nil] 
  # @scope class
  attach_function :cairo_arc, :cairo_arc, [Cairo, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_arc_negative(cr, xc, yc, radius, angle1, angle2)
  # @param [Cairo] cr 
  # @param [Float] xc 
  # @param [Float] yc 
  # @param [Float] radius 
  # @param [Float] angle1 
  # @param [Float] angle2 
  # @return [nil] 
  # @scope class
  attach_function :cairo_arc_negative, :cairo_arc_negative, [Cairo, :double, :double, :double, :double, :double], :void
  
  # XXX: NYI
  # cairo_public void
  # cairo_arc_to (cairo_t *cr,
  # 	      double x1, double y1,
  # 	      double x2, double y2,
  # 	      double radius);
  # 
  # @method cairo_rel_move_to(cr, dx, dy)
  # @param [Cairo] cr 
  # @param [Float] dx 
  # @param [Float] dy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_rel_move_to, :cairo_rel_move_to, [Cairo, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_rel_line_to(cr, dx, dy)
  # @param [Cairo] cr 
  # @param [Float] dx 
  # @param [Float] dy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_rel_line_to, :cairo_rel_line_to, [Cairo, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_rel_curve_to(cr, dx1, dy1, dx2, dy2, dx3, dy3)
  # @param [Cairo] cr 
  # @param [Float] dx1 
  # @param [Float] dy1 
  # @param [Float] dx2 
  # @param [Float] dy2 
  # @param [Float] dx3 
  # @param [Float] dy3 
  # @return [nil] 
  # @scope class
  attach_function :cairo_rel_curve_to, :cairo_rel_curve_to, [Cairo, :double, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_rectangle(cr, x, y, width, height)
  # @param [Cairo] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @return [nil] 
  # @scope class
  attach_function :cairo_rectangle, :cairo_rectangle, [Cairo, :double, :double, :double, :double], :void
  
  # XXX: NYI
  # cairo_public void
  # cairo_stroke_to_path (cairo_t *cr);
  # 
  # @method cairo_close_path(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_close_path, :cairo_close_path, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_path_extents(cr, x1, y1, x2, y2)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x1 
  # @param [FFI::Pointer(*Double)] y1 
  # @param [FFI::Pointer(*Double)] x2 
  # @param [FFI::Pointer(*Double)] y2 
  # @return [nil] 
  # @scope class
  attach_function :cairo_path_extents, :cairo_path_extents, [Cairo, :pointer, :pointer, :pointer, :pointer], :void
  
  # Painting functions
  # 
  # @method cairo_paint(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_paint, :cairo_paint, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_paint_with_alpha(cr, alpha)
  # @param [Cairo] cr 
  # @param [Float] alpha 
  # @return [nil] 
  # @scope class
  attach_function :cairo_paint_with_alpha, :cairo_paint_with_alpha, [Cairo, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_mask(cr, pattern)
  # @param [Cairo] cr 
  # @param [CairoPattern] pattern 
  # @return [nil] 
  # @scope class
  attach_function :cairo_mask, :cairo_mask, [Cairo, CairoPattern], :void
  
  # (Not documented)
  # 
  # @method cairo_mask_surface(cr, surface, surface_x, surface_y)
  # @param [Cairo] cr 
  # @param [CairoSurface] surface 
  # @param [Float] surface_x 
  # @param [Float] surface_y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_mask_surface, :cairo_mask_surface, [Cairo, CairoSurface, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_stroke(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_stroke, :cairo_stroke, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_stroke_preserve(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_stroke_preserve, :cairo_stroke_preserve, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_fill(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_fill, :cairo_fill, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_fill_preserve(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_fill_preserve, :cairo_fill_preserve, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_copy_page(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_copy_page, :cairo_copy_page, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_show_page(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_show_page, :cairo_show_page, [Cairo], :void
  
  # Insideness testing
  # 
  # @method cairo_in_stroke(cr, x, y)
  # @param [Cairo] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_in_stroke, :cairo_in_stroke, [Cairo, :double, :double], :int
  
  # (Not documented)
  # 
  # @method cairo_in_fill(cr, x, y)
  # @param [Cairo] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_in_fill, :cairo_in_fill, [Cairo, :double, :double], :int
  
  # (Not documented)
  # 
  # @method cairo_in_clip(cr, x, y)
  # @param [Cairo] cr 
  # @param [Float] x 
  # @param [Float] y 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_in_clip, :cairo_in_clip, [Cairo, :double, :double], :int
  
  # Rectangular extents
  # 
  # @method cairo_stroke_extents(cr, x1, y1, x2, y2)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x1 
  # @param [FFI::Pointer(*Double)] y1 
  # @param [FFI::Pointer(*Double)] x2 
  # @param [FFI::Pointer(*Double)] y2 
  # @return [nil] 
  # @scope class
  attach_function :cairo_stroke_extents, :cairo_stroke_extents, [Cairo, :pointer, :pointer, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_fill_extents(cr, x1, y1, x2, y2)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x1 
  # @param [FFI::Pointer(*Double)] y1 
  # @param [FFI::Pointer(*Double)] x2 
  # @param [FFI::Pointer(*Double)] y2 
  # @return [nil] 
  # @scope class
  attach_function :cairo_fill_extents, :cairo_fill_extents, [Cairo, :pointer, :pointer, :pointer, :pointer], :void
  
  # Clipping
  # 
  # @method cairo_reset_clip(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_reset_clip, :cairo_reset_clip, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_clip(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_clip, :cairo_clip, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_clip_preserve(cr)
  # @param [Cairo] cr 
  # @return [nil] 
  # @scope class
  attach_function :cairo_clip_preserve, :cairo_clip_preserve, [Cairo], :void
  
  # (Not documented)
  # 
  # @method cairo_clip_extents(cr, x1, y1, x2, y2)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x1 
  # @param [FFI::Pointer(*Double)] y1 
  # @param [FFI::Pointer(*Double)] x2 
  # @param [FFI::Pointer(*Double)] y2 
  # @return [nil] 
  # @scope class
  attach_function :cairo_clip_extents, :cairo_clip_extents, [Cairo, :pointer, :pointer, :pointer, :pointer], :void
  
  # cairo_rectangle_t:
  # @x: X coordinate of the left side of the rectangle
  # @y: Y coordinate of the the top side of the rectangle
  # @width: width of the rectangle
  # @height: height of the rectangle
  # 
  # A data structure for holding a rectangle.
  # 
  # Since: 1.4
  # 
  # = Fields:
  # :x ::
  #   (Float) 
  # :y ::
  #   (Float) 
  # :width ::
  #   (Float) 
  # :height ::
  #   (Float) 
  class CairoRectangle < FFI::Struct
    layout :x, :double,
           :y, :double,
           :width, :double,
           :height, :double
  end
  
  # cairo_rectangle_t:
  # @x: X coordinate of the left side of the rectangle
  # @y: Y coordinate of the the top side of the rectangle
  # @width: width of the rectangle
  # @height: height of the rectangle
  # 
  # A data structure for holding a rectangle.
  # 
  # Since: 1.4
  # 
  # = Fields:
  # :x ::
  #   (Float) 
  # :y ::
  #   (Float) 
  # :width ::
  #   (Float) 
  # :height ::
  #   (Float) 
  class CairoRectangleT < FFI::Struct
    layout :x, :double,
           :y, :double,
           :width, :double,
           :height, :double
  end
  
  # cairo_rectangle_list_t:
  # @status: Error status of the rectangle list
  # @rectangles: Array containing the rectangles
  # @num_rectangles: Number of rectangles in this list
  # 
  # A data structure for holding a dynamically allocated
  # array of rectangles.
  # 
  # Since: 1.4
  # 
  # = Fields:
  # :status ::
  #   (Symbol from _enum_cairo_status_t_) 
  # :rectangles ::
  #   (CairoRectangle) 
  # :num_rectangles ::
  #   (Integer) 
  class CairoRectangleList < FFI::Struct
    layout :status, :cairo_status_t,
           :rectangles, CairoRectangle,
           :num_rectangles, :int
  end
  
  # cairo_rectangle_list_t:
  # @status: Error status of the rectangle list
  # @rectangles: Array containing the rectangles
  # @num_rectangles: Number of rectangles in this list
  # 
  # A data structure for holding a dynamically allocated
  # array of rectangles.
  # 
  # Since: 1.4
  # 
  # = Fields:
  # :status ::
  #   (Symbol from _enum_cairo_status_t_) 
  # :rectangles ::
  #   (CairoRectangle) 
  # :num_rectangles ::
  #   (Integer) 
  class CairoRectangleListT < FFI::Struct
    layout :status, :cairo_status_t,
           :rectangles, CairoRectangle,
           :num_rectangles, :int
  end
  
  # (Not documented)
  # 
  # @method cairo_copy_clip_rectangle_list(cr)
  # @param [Cairo] cr 
  # @return [CairoRectangleList] 
  # @scope class
  attach_function :cairo_copy_clip_rectangle_list, :cairo_copy_clip_rectangle_list, [Cairo], CairoRectangleList
  
  # (Not documented)
  # 
  # @method cairo_rectangle_list_destroy(rectangle_list)
  # @param [CairoRectangleList] rectangle_list 
  # @return [nil] 
  # @scope class
  attach_function :cairo_rectangle_list_destroy, :cairo_rectangle_list_destroy, [CairoRectangleList], :void
  
  # cairo_scaled_font_t:
  # 
  # A #cairo_scaled_font_t is a font scaled to a particular size and device
  # resolution. A #cairo_scaled_font_t is most useful for low-level font
  # usage where a library or application wants to cache a reference
  # to a scaled font to speed up the computation of metrics.
  # 
  # There are various types of scaled fonts, depending on the
  # <firstterm>font backend</firstterm> they use. The type of a
  # scaled font can be queried using cairo_scaled_font_get_type().
  # 
  # Memory management of #cairo_scaled_font_t is done with
  # cairo_scaled_font_reference() and cairo_scaled_font_destroy().
  class CairoScaledFont < FFI::Struct
  end
  
  # cairo_font_face_t:
  # 
  # A #cairo_font_face_t specifies all aspects of a font other
  # than the size or font matrix (a font matrix is used to distort
  # a font by sheering it or scaling it unequally in the two
  # directions) . A font face can be set on a #cairo_t by using
  # cairo_set_font_face(); the size and font matrix are set with
  # cairo_set_font_size() and cairo_set_font_matrix().
  # 
  # There are various types of font faces, depending on the
  # <firstterm>font backend</firstterm> they use. The type of a
  # font face can be queried using cairo_font_face_get_type().
  # 
  # Memory management of #cairo_font_face_t is done with
  # cairo_font_face_reference() and cairo_font_face_destroy().
  class CairoFontFace < FFI::Struct
  end
  
  # cairo_glyph_t:
  # @index: glyph index in the font. The exact interpretation of the
  #      glyph index depends on the font technology being used.
  # @x: the offset in the X direction between the origin used for
  #     drawing or measuring the string and the origin of this glyph.
  # @y: the offset in the Y direction between the origin used for
  #     drawing or measuring the string and the origin of this glyph.
  # 
  # The #cairo_glyph_t structure holds information about a single glyph
  # when drawing or measuring text. A font is (in simple terms) a
  # collection of shapes used to draw text. A glyph is one of these
  # shapes. There can be multiple glyphs for a single character
  # (alternates to be used in different contexts, for example), or a
  # glyph can be a <firstterm>ligature</firstterm> of multiple
  # characters. Cairo doesn't expose any way of converting input text
  # into glyphs, so in order to use the Cairo interfaces that take
  # arrays of glyphs, you must directly access the appropriate
  # underlying font system.
  # 
  # Note that the offsets given by @x and @y are not cumulative. When
  # drawing or measuring text, each glyph is individually positioned
  # with respect to the overall origin
  # 
  # = Fields:
  # :index ::
  #   (Integer) 
  # :x ::
  #   (Float) 
  # :y ::
  #   (Float) 
  class CairoGlyphT < FFI::Struct
    layout :index, :ulong,
           :x, :double,
           :y, :double
  end
  
  # (Not documented)
  # 
  # @method cairo_glyph_allocate(num_glyphs)
  # @param [Integer] num_glyphs 
  # @return [FFI::Pointer(*CairoGlyphT)] 
  # @scope class
  attach_function :cairo_glyph_allocate, :cairo_glyph_allocate, [:int], :pointer
  
  # (Not documented)
  # 
  # @method cairo_glyph_free(glyphs)
  # @param [FFI::Pointer(*CairoGlyphT)] glyphs 
  # @return [nil] 
  # @scope class
  attach_function :cairo_glyph_free, :cairo_glyph_free, [:pointer], :void
  
  # cairo_text_cluster_t:
  # @num_bytes: the number of bytes of UTF-8 text covered by cluster
  # @num_glyphs: the number of glyphs covered by cluster
  # 
  # The #cairo_text_cluster_t structure holds information about a single
  # <firstterm>text cluster</firstterm>.  A text cluster is a minimal
  # mapping of some glyphs corresponding to some UTF-8 text.
  # 
  # For a cluster to be valid, both @num_bytes and @num_glyphs should
  # be non-negative, and at least one should be non-zero.
  # Note that clusters with zero glyphs are not as well supported as
  # normal clusters.  For example, PDF rendering applications typically
  # ignore those clusters when PDF text is being selected.
  # 
  # See cairo_show_text_glyphs() for how clusters are used in advanced
  # text operations.
  # 
  # Since: 1.8
  # 
  # = Fields:
  # :num_bytes ::
  #   (Integer) 
  # :num_glyphs ::
  #   (Integer) 
  class CairoTextClusterT < FFI::Struct
    layout :num_bytes, :int,
           :num_glyphs, :int
  end
  
  # (Not documented)
  # 
  # @method cairo_text_cluster_allocate(num_clusters)
  # @param [Integer] num_clusters 
  # @return [FFI::Pointer(*CairoTextClusterT)] 
  # @scope class
  attach_function :cairo_text_cluster_allocate, :cairo_text_cluster_allocate, [:int], :pointer
  
  # (Not documented)
  # 
  # @method cairo_text_cluster_free(clusters)
  # @param [FFI::Pointer(*CairoTextClusterT)] clusters 
  # @return [nil] 
  # @scope class
  attach_function :cairo_text_cluster_free, :cairo_text_cluster_free, [:pointer], :void
  
  # cairo_text_cluster_flags_t:
  # @CAIRO_TEXT_CLUSTER_FLAG_BACKWARD: The clusters in the cluster array
  # map to glyphs in the glyph array from end to start.
  # 
  # Specifies properties of a text cluster mapping.
  # 
  # Since: 1.8
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_text_cluster_flags).</em>
  # 
  # === Options:
  # :cairo_text_cluster_flag_backward ::
  #   
  # 
  # @method _enum_cairo_text_cluster_flags_
  # @return [Symbol]
  # @scope class
  enum :cairo_text_cluster_flags, [
    :cairo_text_cluster_flag_backward, 0x00000001
  ]
  
  # cairo_text_cluster_flags_t:
  # @CAIRO_TEXT_CLUSTER_FLAG_BACKWARD: The clusters in the cluster array
  # map to glyphs in the glyph array from end to start.
  # 
  # Specifies properties of a text cluster mapping.
  # 
  # Since: 1.8
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_text_cluster_flags_t).</em>
  # 
  # === Options:
  # :cairo_text_cluster_flag_backward ::
  #   
  # 
  # @method _enum_cairo_text_cluster_flags_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_text_cluster_flags_t, [
    :cairo_text_cluster_flag_backward, 0x00000001
  ]
  
  # cairo_text_extents_t:
  # @x_bearing: the horizontal distance from the origin to the
  #   leftmost part of the glyphs as drawn. Positive if the
  #   glyphs lie entirely to the right of the origin.
  # @y_bearing: the vertical distance from the origin to the
  #   topmost part of the glyphs as drawn. Positive only if the
  #   glyphs lie completely below the origin; will usually be
  #   negative.
  # @width: width of the glyphs as drawn
  # @height: height of the glyphs as drawn
  # @x_advance:distance to advance in the X direction
  #    after drawing these glyphs
  # @y_advance: distance to advance in the Y direction
  #   after drawing these glyphs. Will typically be zero except
  #   for vertical text layout as found in East-Asian languages.
  # 
  # The #cairo_text_extents_t structure stores the extents of a single
  # glyph or a string of glyphs in user-space coordinates. Because text
  # extents are in user-space coordinates, they are mostly, but not
  # entirely, independent of the current transformation matrix. If you call
  # <literal>cairo_scale(cr, 2.0, 2.0)</literal>, text will
  # be drawn twice as big, but the reported text extents will not be
  # doubled. They will change slightly due to hinting (so you can't
  # assume that metrics are independent of the transformation matrix),
  # but otherwise will remain unchanged.
  # 
  # = Fields:
  # :x_bearing ::
  #   (Float) 
  # :y_bearing ::
  #   (Float) 
  # :width ::
  #   (Float) 
  # :height ::
  #   (Float) 
  # :x_advance ::
  #   (Float) 
  # :y_advance ::
  #   (Float) 
  class CairoTextExtentsT < FFI::Struct
    layout :x_bearing, :double,
           :y_bearing, :double,
           :width, :double,
           :height, :double,
           :x_advance, :double,
           :y_advance, :double
  end
  
  # cairo_font_extents_t:
  # @ascent: the distance that the font extends above the baseline.
  #          Note that this is not always exactly equal to the maximum
  #          of the extents of all the glyphs in the font, but rather
  #          is picked to express the font designer's intent as to
  #          how the font should align with elements above it.
  # @descent: the distance that the font extends below the baseline.
  #           This value is positive for typical fonts that include
  #           portions below the baseline. Note that this is not always
  #           exactly equal to the maximum of the extents of all the
  #           glyphs in the font, but rather is picked to express the
  #           font designer's intent as to how the the font should
  #           align with elements below it.
  # @height: the recommended vertical distance between baselines when
  #          setting consecutive lines of text with the font. This
  #          is greater than @ascent+@descent by a
  #          quantity known as the <firstterm>line spacing</firstterm>
  #          or <firstterm>external leading</firstterm>. When space
  #          is at a premium, most fonts can be set with only
  #          a distance of @ascent+@descent between lines.
  # @max_x_advance: the maximum distance in the X direction that
  #         the the origin is advanced for any glyph in the font.
  # @max_y_advance: the maximum distance in the Y direction that
  #         the the origin is advanced for any glyph in the font.
  #         this will be zero for normal fonts used for horizontal
  #         writing. (The scripts of East Asia are sometimes written
  #         vertically.)
  # 
  # The #cairo_font_extents_t structure stores metric information for
  # a font. Values are given in the current user-space coordinate
  # system.
  # 
  # Because font metrics are in user-space coordinates, they are
  # mostly, but not entirely, independent of the current transformation
  # matrix. If you call <literal>cairo_scale(cr, 2.0, 2.0)</literal>,
  # text will be drawn twice as big, but the reported text extents will
  # not be doubled. They will change slightly due to hinting (so you
  # can't assume that metrics are independent of the transformation
  # matrix), but otherwise will remain unchanged.
  # 
  # = Fields:
  # :ascent ::
  #   (Float) 
  # :descent ::
  #   (Float) 
  # :height ::
  #   (Float) 
  # :max_x_advance ::
  #   (Float) 
  # :max_y_advance ::
  #   (Float) 
  class CairoFontExtentsT < FFI::Struct
    layout :ascent, :double,
           :descent, :double,
           :height, :double,
           :max_x_advance, :double,
           :max_y_advance, :double
  end
  
  # cairo_font_slant_t:
  # @CAIRO_FONT_SLANT_NORMAL: Upright font style
  # @CAIRO_FONT_SLANT_ITALIC: Italic font style
  # @CAIRO_FONT_SLANT_OBLIQUE: Oblique font style
  # 
  # Specifies variants of a font face based on their slant.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_font_slant).</em>
  # 
  # === Options:
  # :normal ::
  #   
  # :italic ::
  #   
  # :oblique ::
  #   
  # 
  # @method _enum_cairo_font_slant_
  # @return [Symbol]
  # @scope class
  enum :cairo_font_slant, [
    :normal,
    :italic,
    :oblique
  ]
  
  # cairo_font_slant_t:
  # @CAIRO_FONT_SLANT_NORMAL: Upright font style
  # @CAIRO_FONT_SLANT_ITALIC: Italic font style
  # @CAIRO_FONT_SLANT_OBLIQUE: Oblique font style
  # 
  # Specifies variants of a font face based on their slant.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_font_slant_t).</em>
  # 
  # === Options:
  # :normal ::
  #   
  # :italic ::
  #   
  # :oblique ::
  #   
  # 
  # @method _enum_cairo_font_slant_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_font_slant_t, [
    :normal,
    :italic,
    :oblique
  ]
  
  # cairo_font_weight_t:
  # @CAIRO_FONT_WEIGHT_NORMAL: Normal font weight
  # @CAIRO_FONT_WEIGHT_BOLD: Bold font weight
  # 
  # Specifies variants of a font face based on their weight.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_font_weight).</em>
  # 
  # === Options:
  # :normal ::
  #   
  # :bold ::
  #   
  # 
  # @method _enum_cairo_font_weight_
  # @return [Symbol]
  # @scope class
  enum :cairo_font_weight, [
    :normal,
    :bold
  ]
  
  # cairo_font_weight_t:
  # @CAIRO_FONT_WEIGHT_NORMAL: Normal font weight
  # @CAIRO_FONT_WEIGHT_BOLD: Bold font weight
  # 
  # Specifies variants of a font face based on their weight.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_font_weight_t).</em>
  # 
  # === Options:
  # :normal ::
  #   
  # :bold ::
  #   
  # 
  # @method _enum_cairo_font_weight_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_font_weight_t, [
    :normal,
    :bold
  ]
  
  # cairo_subpixel_order_t:
  # @CAIRO_SUBPIXEL_ORDER_DEFAULT: Use the default subpixel order for
  #   for the target device
  # @CAIRO_SUBPIXEL_ORDER_RGB: Subpixel elements are arranged horizontally
  #   with red at the left
  # @CAIRO_SUBPIXEL_ORDER_BGR:  Subpixel elements are arranged horizontally
  #   with blue at the left
  # @CAIRO_SUBPIXEL_ORDER_VRGB: Subpixel elements are arranged vertically
  #   with red at the top
  # @CAIRO_SUBPIXEL_ORDER_VBGR: Subpixel elements are arranged vertically
  #   with blue at the top
  # 
  # The subpixel order specifies the order of color elements within
  # each pixel on the display device when rendering with an
  # antialiasing mode of %CAIRO_ANTIALIAS_SUBPIXEL.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_subpixel_order).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :rgb ::
  #   
  # :bgr ::
  #   
  # :vrgb ::
  #   
  # :vbgr ::
  #   
  # 
  # @method _enum_cairo_subpixel_order_
  # @return [Symbol]
  # @scope class
  enum :cairo_subpixel_order, [
    :default,
    :rgb,
    :bgr,
    :vrgb,
    :vbgr
  ]
  
  # cairo_subpixel_order_t:
  # @CAIRO_SUBPIXEL_ORDER_DEFAULT: Use the default subpixel order for
  #   for the target device
  # @CAIRO_SUBPIXEL_ORDER_RGB: Subpixel elements are arranged horizontally
  #   with red at the left
  # @CAIRO_SUBPIXEL_ORDER_BGR:  Subpixel elements are arranged horizontally
  #   with blue at the left
  # @CAIRO_SUBPIXEL_ORDER_VRGB: Subpixel elements are arranged vertically
  #   with red at the top
  # @CAIRO_SUBPIXEL_ORDER_VBGR: Subpixel elements are arranged vertically
  #   with blue at the top
  # 
  # The subpixel order specifies the order of color elements within
  # each pixel on the display device when rendering with an
  # antialiasing mode of %CAIRO_ANTIALIAS_SUBPIXEL.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_subpixel_order_t).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :rgb ::
  #   
  # :bgr ::
  #   
  # :vrgb ::
  #   
  # :vbgr ::
  #   
  # 
  # @method _enum_cairo_subpixel_order_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_subpixel_order_t, [
    :default,
    :rgb,
    :bgr,
    :vrgb,
    :vbgr
  ]
  
  # cairo_hint_style_t:
  # @CAIRO_HINT_STYLE_DEFAULT: Use the default hint style for
  #   font backend and target device
  # @CAIRO_HINT_STYLE_NONE: Do not hint outlines
  # @CAIRO_HINT_STYLE_SLIGHT: Hint outlines slightly to improve
  #   contrast while retaining good fidelity to the original
  #   shapes.
  # @CAIRO_HINT_STYLE_MEDIUM: Hint outlines with medium strength
  #   giving a compromise between fidelity to the original shapes
  #   and contrast
  # @CAIRO_HINT_STYLE_FULL: Hint outlines to maximize contrast
  # 
  # Specifies the type of hinting to do on font outlines. Hinting
  # is the process of fitting outlines to the pixel grid in order
  # to improve the appearance of the result. Since hinting outlines
  # involves distorting them, it also reduces the faithfulness
  # to the original outline shapes. Not all of the outline hinting
  # styles are supported by all font backends.
  # 
  # New entries may be added in future versions.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_hint_style).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :none ::
  #   
  # :slight ::
  #   
  # :medium ::
  #   
  # :full ::
  #   
  # 
  # @method _enum_cairo_hint_style_
  # @return [Symbol]
  # @scope class
  enum :cairo_hint_style, [
    :default,
    :none,
    :slight,
    :medium,
    :full
  ]
  
  # cairo_hint_style_t:
  # @CAIRO_HINT_STYLE_DEFAULT: Use the default hint style for
  #   font backend and target device
  # @CAIRO_HINT_STYLE_NONE: Do not hint outlines
  # @CAIRO_HINT_STYLE_SLIGHT: Hint outlines slightly to improve
  #   contrast while retaining good fidelity to the original
  #   shapes.
  # @CAIRO_HINT_STYLE_MEDIUM: Hint outlines with medium strength
  #   giving a compromise between fidelity to the original shapes
  #   and contrast
  # @CAIRO_HINT_STYLE_FULL: Hint outlines to maximize contrast
  # 
  # Specifies the type of hinting to do on font outlines. Hinting
  # is the process of fitting outlines to the pixel grid in order
  # to improve the appearance of the result. Since hinting outlines
  # involves distorting them, it also reduces the faithfulness
  # to the original outline shapes. Not all of the outline hinting
  # styles are supported by all font backends.
  # 
  # New entries may be added in future versions.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_hint_style_t).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :none ::
  #   
  # :slight ::
  #   
  # :medium ::
  #   
  # :full ::
  #   
  # 
  # @method _enum_cairo_hint_style_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_hint_style_t, [
    :default,
    :none,
    :slight,
    :medium,
    :full
  ]
  
  # cairo_hint_metrics_t:
  # @CAIRO_HINT_METRICS_DEFAULT: Hint metrics in the default
  #  manner for the font backend and target device
  # @CAIRO_HINT_METRICS_OFF: Do not hint font metrics
  # @CAIRO_HINT_METRICS_ON: Hint font metrics
  # 
  # Specifies whether to hint font metrics; hinting font metrics
  # means quantizing them so that they are integer values in
  # device space. Doing this improves the consistency of
  # letter and line spacing, however it also means that text
  # will be laid out differently at different zoom factors.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_hint_metrics).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :off ::
  #   
  # :on ::
  #   
  # 
  # @method _enum_cairo_hint_metrics_
  # @return [Symbol]
  # @scope class
  enum :cairo_hint_metrics, [
    :default,
    :off,
    :on
  ]
  
  # cairo_hint_metrics_t:
  # @CAIRO_HINT_METRICS_DEFAULT: Hint metrics in the default
  #  manner for the font backend and target device
  # @CAIRO_HINT_METRICS_OFF: Do not hint font metrics
  # @CAIRO_HINT_METRICS_ON: Hint font metrics
  # 
  # Specifies whether to hint font metrics; hinting font metrics
  # means quantizing them so that they are integer values in
  # device space. Doing this improves the consistency of
  # letter and line spacing, however it also means that text
  # will be laid out differently at different zoom factors.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_hint_metrics_t).</em>
  # 
  # === Options:
  # :default ::
  #   
  # :off ::
  #   
  # :on ::
  #   
  # 
  # @method _enum_cairo_hint_metrics_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_hint_metrics_t, [
    :default,
    :off,
    :on
  ]
  
  # cairo_font_options_t:
  # 
  # An opaque structure holding all options that are used when
  # rendering fonts.
  # 
  # Individual features of a #cairo_font_options_t can be set or
  # accessed using functions named
  # cairo_font_options_set_<emphasis>feature_name</emphasis> and
  # cairo_font_options_get_<emphasis>feature_name</emphasis>, like
  # cairo_font_options_set_antialias() and
  # cairo_font_options_get_antialias().
  # 
  # New features may be added to a #cairo_font_options_t in the
  # future.  For this reason, cairo_font_options_copy(),
  # cairo_font_options_equal(), cairo_font_options_merge(), and
  # cairo_font_options_hash() should be used to copy, check
  # for equality, merge, or compute a hash value of
  # #cairo_font_options_t objects.
  class CairoFontOptions < FFI::Struct
  end
  
  # (Not documented)
  # 
  # @method cairo_font_options_create()
  # @return [CairoFontOptions] 
  # @scope class
  attach_function :cairo_font_options_create, :cairo_font_options_create, [], CairoFontOptions
  
  # (Not documented)
  # 
  # @method cairo_font_options_copy(original)
  # @param [CairoFontOptions] original 
  # @return [CairoFontOptions] 
  # @scope class
  attach_function :cairo_font_options_copy, :cairo_font_options_copy, [CairoFontOptions], CairoFontOptions
  
  # (Not documented)
  # 
  # @method cairo_font_options_destroy(options)
  # @param [CairoFontOptions] options 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_options_destroy, :cairo_font_options_destroy, [CairoFontOptions], :void
  
  # (Not documented)
  # 
  # @method cairo_font_options_status(options)
  # @param [CairoFontOptions] options 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_font_options_status, :cairo_font_options_status, [CairoFontOptions], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_font_options_merge(options, other)
  # @param [CairoFontOptions] options 
  # @param [CairoFontOptions] other 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_options_merge, :cairo_font_options_merge, [CairoFontOptions, CairoFontOptions], :void
  
  # (Not documented)
  # 
  # @method cairo_font_options_equal(options, other)
  # @param [CairoFontOptions] options 
  # @param [CairoFontOptions] other 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_font_options_equal, :cairo_font_options_equal, [CairoFontOptions, CairoFontOptions], :int
  
  # (Not documented)
  # 
  # @method cairo_font_options_hash(options)
  # @param [CairoFontOptions] options 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_font_options_hash, :cairo_font_options_hash, [CairoFontOptions], :ulong
  
  # (Not documented)
  # 
  # @method cairo_font_options_set_antialias(options, antialias)
  # @param [CairoFontOptions] options 
  # @param [Symbol from _enum_cairo_antialias_t_] antialias 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_options_set_antialias, :cairo_font_options_set_antialias, [CairoFontOptions, :cairo_antialias_t], :void
  
  # (Not documented)
  # 
  # @method cairo_font_options_get_antialias(options)
  # @param [CairoFontOptions] options 
  # @return [Symbol from _enum_cairo_antialias_t_] 
  # @scope class
  attach_function :cairo_font_options_get_antialias, :cairo_font_options_get_antialias, [CairoFontOptions], :cairo_antialias_t
  
  # (Not documented)
  # 
  # @method cairo_font_options_set_subpixel_order(options, subpixel_order)
  # @param [CairoFontOptions] options 
  # @param [Symbol from _enum_cairo_subpixel_order_t_] subpixel_order 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_options_set_subpixel_order, :cairo_font_options_set_subpixel_order, [CairoFontOptions, :cairo_subpixel_order_t], :void
  
  # (Not documented)
  # 
  # @method cairo_font_options_get_subpixel_order(options)
  # @param [CairoFontOptions] options 
  # @return [Symbol from _enum_cairo_subpixel_order_t_] 
  # @scope class
  attach_function :cairo_font_options_get_subpixel_order, :cairo_font_options_get_subpixel_order, [CairoFontOptions], :cairo_subpixel_order_t
  
  # (Not documented)
  # 
  # @method cairo_font_options_set_hint_style(options, hint_style)
  # @param [CairoFontOptions] options 
  # @param [Symbol from _enum_cairo_hint_style_t_] hint_style 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_options_set_hint_style, :cairo_font_options_set_hint_style, [CairoFontOptions, :cairo_hint_style_t], :void
  
  # (Not documented)
  # 
  # @method cairo_font_options_get_hint_style(options)
  # @param [CairoFontOptions] options 
  # @return [Symbol from _enum_cairo_hint_style_t_] 
  # @scope class
  attach_function :cairo_font_options_get_hint_style, :cairo_font_options_get_hint_style, [CairoFontOptions], :cairo_hint_style_t
  
  # (Not documented)
  # 
  # @method cairo_font_options_set_hint_metrics(options, hint_metrics)
  # @param [CairoFontOptions] options 
  # @param [Symbol from _enum_cairo_hint_metrics_t_] hint_metrics 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_options_set_hint_metrics, :cairo_font_options_set_hint_metrics, [CairoFontOptions, :cairo_hint_metrics_t], :void
  
  # (Not documented)
  # 
  # @method cairo_font_options_get_hint_metrics(options)
  # @param [CairoFontOptions] options 
  # @return [Symbol from _enum_cairo_hint_metrics_t_] 
  # @scope class
  attach_function :cairo_font_options_get_hint_metrics, :cairo_font_options_get_hint_metrics, [CairoFontOptions], :cairo_hint_metrics_t
  
  # This interface is for dealing with text as text, not caring about the
  #    font object inside the the cairo_t.
  # 
  # @method cairo_select_font_face(cr, family, slant, weight)
  # @param [Cairo] cr 
  # @param [String] family 
  # @param [Symbol from _enum_cairo_font_slant_t_] slant 
  # @param [Symbol from _enum_cairo_font_weight_t_] weight 
  # @return [nil] 
  # @scope class
  attach_function :cairo_select_font_face, :cairo_select_font_face, [Cairo, :string, :cairo_font_slant_t, :cairo_font_weight_t], :void
  
  # (Not documented)
  # 
  # @method cairo_set_font_size(cr, size)
  # @param [Cairo] cr 
  # @param [Float] size 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_font_size, :cairo_set_font_size, [Cairo, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_set_font_matrix(cr, matrix)
  # @param [Cairo] cr 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_font_matrix, :cairo_set_font_matrix, [Cairo, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_get_font_matrix(cr, matrix)
  # @param [Cairo] cr 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_get_font_matrix, :cairo_get_font_matrix, [Cairo, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_set_font_options(cr, options)
  # @param [Cairo] cr 
  # @param [CairoFontOptions] options 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_font_options, :cairo_set_font_options, [Cairo, CairoFontOptions], :void
  
  # (Not documented)
  # 
  # @method cairo_get_font_options(cr, options)
  # @param [Cairo] cr 
  # @param [CairoFontOptions] options 
  # @return [nil] 
  # @scope class
  attach_function :cairo_get_font_options, :cairo_get_font_options, [Cairo, CairoFontOptions], :void
  
  # (Not documented)
  # 
  # @method cairo_set_font_face(cr, font_face)
  # @param [Cairo] cr 
  # @param [CairoFontFace] font_face 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_font_face, :cairo_set_font_face, [Cairo, CairoFontFace], :void
  
  # (Not documented)
  # 
  # @method cairo_get_font_face(cr)
  # @param [Cairo] cr 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_get_font_face, :cairo_get_font_face, [Cairo], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_set_scaled_font(cr, scaled_font)
  # @param [Cairo] cr 
  # @param [CairoScaledFont] scaled_font 
  # @return [nil] 
  # @scope class
  attach_function :cairo_set_scaled_font, :cairo_set_scaled_font, [Cairo, CairoScaledFont], :void
  
  # (Not documented)
  # 
  # @method cairo_get_scaled_font(cr)
  # @param [Cairo] cr 
  # @return [CairoScaledFont] 
  # @scope class
  attach_function :cairo_get_scaled_font, :cairo_get_scaled_font, [Cairo], CairoScaledFont
  
  # (Not documented)
  # 
  # @method cairo_show_text(cr, utf8)
  # @param [Cairo] cr 
  # @param [String] utf8 
  # @return [nil] 
  # @scope class
  attach_function :cairo_show_text, :cairo_show_text, [Cairo, :string], :void
  
  # (Not documented)
  # 
  # @method cairo_show_glyphs(cr, glyphs, num_glyphs)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*CairoGlyphT)] glyphs 
  # @param [Integer] num_glyphs 
  # @return [nil] 
  # @scope class
  attach_function :cairo_show_glyphs, :cairo_show_glyphs, [Cairo, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method cairo_show_text_glyphs(cr, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
  # @param [Cairo] cr 
  # @param [String] utf8 
  # @param [Integer] utf8_len 
  # @param [FFI::Pointer(*CairoGlyphT)] glyphs 
  # @param [Integer] num_glyphs 
  # @param [FFI::Pointer(*CairoTextClusterT)] clusters 
  # @param [Integer] num_clusters 
  # @param [Symbol from _enum_cairo_text_cluster_flags_t_] cluster_flags 
  # @return [nil] 
  # @scope class
  attach_function :cairo_show_text_glyphs, :cairo_show_text_glyphs, [Cairo, :string, :int, :pointer, :int, :pointer, :int, :cairo_text_cluster_flags_t], :void
  
  # (Not documented)
  # 
  # @method cairo_text_path(cr, utf8)
  # @param [Cairo] cr 
  # @param [String] utf8 
  # @return [nil] 
  # @scope class
  attach_function :cairo_text_path, :cairo_text_path, [Cairo, :string], :void
  
  # (Not documented)
  # 
  # @method cairo_glyph_path(cr, glyphs, num_glyphs)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*CairoGlyphT)] glyphs 
  # @param [Integer] num_glyphs 
  # @return [nil] 
  # @scope class
  attach_function :cairo_glyph_path, :cairo_glyph_path, [Cairo, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method cairo_text_extents(cr, utf8, extents)
  # @param [Cairo] cr 
  # @param [String] utf8 
  # @param [FFI::Pointer(*CairoTextExtentsT)] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_text_extents, :cairo_text_extents, [Cairo, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_glyph_extents(cr, glyphs, num_glyphs, extents)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*CairoGlyphT)] glyphs 
  # @param [Integer] num_glyphs 
  # @param [FFI::Pointer(*CairoTextExtentsT)] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_glyph_extents, :cairo_glyph_extents, [Cairo, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_font_extents(cr, extents)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*CairoFontExtentsT)] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_extents, :cairo_font_extents, [Cairo, :pointer], :void
  
  # Generic identifier for a font style
  # 
  # @method cairo_font_face_reference(font_face)
  # @param [CairoFontFace] font_face 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_font_face_reference, :cairo_font_face_reference, [CairoFontFace], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_font_face_destroy(font_face)
  # @param [CairoFontFace] font_face 
  # @return [nil] 
  # @scope class
  attach_function :cairo_font_face_destroy, :cairo_font_face_destroy, [CairoFontFace], :void
  
  # (Not documented)
  # 
  # @method cairo_font_face_get_reference_count(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_font_face_get_reference_count, :cairo_font_face_get_reference_count, [CairoFontFace], :uint
  
  # (Not documented)
  # 
  # @method cairo_font_face_status(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_font_face_status, :cairo_font_face_status, [CairoFontFace], :cairo_status_t
  
  # cairo_font_type_t:
  # @CAIRO_FONT_TYPE_TOY: The font was created using cairo's toy font api
  # @CAIRO_FONT_TYPE_FT: The font is of type FreeType
  # @CAIRO_FONT_TYPE_WIN32: The font is of type Win32
  # @CAIRO_FONT_TYPE_QUARTZ: The font is of type Quartz (Since: 1.6)
  # @CAIRO_FONT_TYPE_USER: The font was create using cairo's user font api (Since: 1.8)
  # 
  # #cairo_font_type_t is used to describe the type of a given font
  # face or scaled font. The font types are also known as "font
  # backends" within cairo.
  # 
  # The type of a font face is determined by the function used to
  # create it, which will generally be of the form
  # cairo_<emphasis>type</emphasis>_font_face_create(). The font face type can be queried
  # with cairo_font_face_get_type()
  # 
  # The various #cairo_font_face_t functions can be used with a font face
  # of any type.
  # 
  # The type of a scaled font is determined by the type of the font
  # face passed to cairo_scaled_font_create(). The scaled font type can
  # be queried with cairo_scaled_font_get_type()
  # 
  # The various #cairo_scaled_font_t functions can be used with scaled
  # fonts of any type, but some font backends also provide
  # type-specific functions that must only be called with a scaled font
  # of the appropriate type. These functions have names that begin with
  # cairo_<emphasis>type</emphasis>_scaled_font() such as cairo_ft_scaled_font_lock_face().
  # 
  # The behavior of calling a type-specific function with a scaled font
  # of the wrong type is undefined.
  # 
  # New entries may be added in future versions.
  # 
  # Since: 1.2
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_font_type).</em>
  # 
  # === Options:
  # :toy ::
  #   
  # :ft ::
  #   
  # :win32 ::
  #   
  # :quartz ::
  #   
  # :user ::
  #   
  # 
  # @method _enum_cairo_font_type_
  # @return [Symbol]
  # @scope class
  enum :cairo_font_type, [
    :toy,
    :ft,
    :win32,
    :quartz,
    :user
  ]
  
  # cairo_font_type_t:
  # @CAIRO_FONT_TYPE_TOY: The font was created using cairo's toy font api
  # @CAIRO_FONT_TYPE_FT: The font is of type FreeType
  # @CAIRO_FONT_TYPE_WIN32: The font is of type Win32
  # @CAIRO_FONT_TYPE_QUARTZ: The font is of type Quartz (Since: 1.6)
  # @CAIRO_FONT_TYPE_USER: The font was create using cairo's user font api (Since: 1.8)
  # 
  # #cairo_font_type_t is used to describe the type of a given font
  # face or scaled font. The font types are also known as "font
  # backends" within cairo.
  # 
  # The type of a font face is determined by the function used to
  # create it, which will generally be of the form
  # cairo_<emphasis>type</emphasis>_font_face_create(). The font face type can be queried
  # with cairo_font_face_get_type()
  # 
  # The various #cairo_font_face_t functions can be used with a font face
  # of any type.
  # 
  # The type of a scaled font is determined by the type of the font
  # face passed to cairo_scaled_font_create(). The scaled font type can
  # be queried with cairo_scaled_font_get_type()
  # 
  # The various #cairo_scaled_font_t functions can be used with scaled
  # fonts of any type, but some font backends also provide
  # type-specific functions that must only be called with a scaled font
  # of the appropriate type. These functions have names that begin with
  # cairo_<emphasis>type</emphasis>_scaled_font() such as cairo_ft_scaled_font_lock_face().
  # 
  # The behavior of calling a type-specific function with a scaled font
  # of the wrong type is undefined.
  # 
  # New entries may be added in future versions.
  # 
  # Since: 1.2
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_font_type_t).</em>
  # 
  # === Options:
  # :toy ::
  #   
  # :ft ::
  #   
  # :win32 ::
  #   
  # :quartz ::
  #   
  # :user ::
  #   
  # 
  # @method _enum_cairo_font_type_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_font_type_t, [
    :toy,
    :ft,
    :win32,
    :quartz,
    :user
  ]
  
  # (Not documented)
  # 
  # @method cairo_font_face_get_type(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Symbol from _enum_cairo_font_type_t_] 
  # @scope class
  attach_function :cairo_font_face_get_type, :cairo_font_face_get_type, [CairoFontFace], :cairo_font_type_t
  
  # (Not documented)
  # 
  # @method cairo_font_face_get_user_data(font_face, key)
  # @param [CairoFontFace] font_face 
  # @param [CairoUserDataKey] key 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :cairo_font_face_get_user_data, :cairo_font_face_get_user_data, [CairoFontFace, CairoUserDataKey], :pointer
  
  # (Not documented)
  # 
  # @method cairo_font_face_set_user_data(font_face, key, user_data, destroy)
  # @param [CairoFontFace] font_face 
  # @param [CairoUserDataKey] key 
  # @param [FFI::Pointer(*Void)] user_data 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_font_face_set_user_data, :cairo_font_face_set_user_data, [CairoFontFace, CairoUserDataKey, :pointer, :pointer], :cairo_status_t
  
  # Portable interface to general font features.
  # 
  # @method cairo_scaled_font_create(font_face, font_matrix, ctm, options)
  # @param [CairoFontFace] font_face 
  # @param [CairoMatrix] font_matrix 
  # @param [CairoMatrix] ctm 
  # @param [CairoFontOptions] options 
  # @return [CairoScaledFont] 
  # @scope class
  attach_function :cairo_scaled_font_create, :cairo_scaled_font_create, [CairoFontFace, CairoMatrix, CairoMatrix, CairoFontOptions], CairoScaledFont
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_reference(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [CairoScaledFont] 
  # @scope class
  attach_function :cairo_scaled_font_reference, :cairo_scaled_font_reference, [CairoScaledFont], CairoScaledFont
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_destroy(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_destroy, :cairo_scaled_font_destroy, [CairoScaledFont], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_reference_count(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_scaled_font_get_reference_count, :cairo_scaled_font_get_reference_count, [CairoScaledFont], :uint
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_status(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_scaled_font_status, :cairo_scaled_font_status, [CairoScaledFont], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_type(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [Symbol from _enum_cairo_font_type_t_] 
  # @scope class
  attach_function :cairo_scaled_font_get_type, :cairo_scaled_font_get_type, [CairoScaledFont], :cairo_font_type_t
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_user_data(scaled_font, key)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoUserDataKey] key 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :cairo_scaled_font_get_user_data, :cairo_scaled_font_get_user_data, [CairoScaledFont, CairoUserDataKey], :pointer
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_set_user_data(scaled_font, key, user_data, destroy)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoUserDataKey] key 
  # @param [FFI::Pointer(*Void)] user_data 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_scaled_font_set_user_data, :cairo_scaled_font_set_user_data, [CairoScaledFont, CairoUserDataKey, :pointer, :pointer], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_extents(scaled_font, extents)
  # @param [CairoScaledFont] scaled_font 
  # @param [FFI::Pointer(*CairoFontExtentsT)] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_extents, :cairo_scaled_font_extents, [CairoScaledFont, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_text_extents(scaled_font, utf8, extents)
  # @param [CairoScaledFont] scaled_font 
  # @param [String] utf8 
  # @param [FFI::Pointer(*CairoTextExtentsT)] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_text_extents, :cairo_scaled_font_text_extents, [CairoScaledFont, :string, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_glyph_extents(scaled_font, glyphs, num_glyphs, extents)
  # @param [CairoScaledFont] scaled_font 
  # @param [FFI::Pointer(*CairoGlyphT)] glyphs 
  # @param [Integer] num_glyphs 
  # @param [FFI::Pointer(*CairoTextExtentsT)] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_glyph_extents, :cairo_scaled_font_glyph_extents, [CairoScaledFont, :pointer, :int, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_text_to_glyphs(scaled_font, x, y, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
  # @param [CairoScaledFont] scaled_font 
  # @param [Float] x 
  # @param [Float] y 
  # @param [String] utf8 
  # @param [Integer] utf8_len 
  # @param [FFI::Pointer(**CairoGlyphT)] glyphs 
  # @param [FFI::Pointer(*Int)] num_glyphs 
  # @param [FFI::Pointer(**CairoTextClusterT)] clusters 
  # @param [FFI::Pointer(*Int)] num_clusters 
  # @param [FFI::Pointer(*CairoTextClusterFlagsT)] cluster_flags 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_scaled_font_text_to_glyphs, :cairo_scaled_font_text_to_glyphs, [CairoScaledFont, :double, :double, :string, :int, :pointer, :pointer, :pointer, :pointer, :pointer], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_font_face(scaled_font)
  # @param [CairoScaledFont] scaled_font 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_scaled_font_get_font_face, :cairo_scaled_font_get_font_face, [CairoScaledFont], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_font_matrix(scaled_font, font_matrix)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoMatrix] font_matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_get_font_matrix, :cairo_scaled_font_get_font_matrix, [CairoScaledFont, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_ctm(scaled_font, ctm)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoMatrix] ctm 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_get_ctm, :cairo_scaled_font_get_ctm, [CairoScaledFont, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_scale_matrix(scaled_font, scale_matrix)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoMatrix] scale_matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_get_scale_matrix, :cairo_scaled_font_get_scale_matrix, [CairoScaledFont, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_scaled_font_get_font_options(scaled_font, options)
  # @param [CairoScaledFont] scaled_font 
  # @param [CairoFontOptions] options 
  # @return [nil] 
  # @scope class
  attach_function :cairo_scaled_font_get_font_options, :cairo_scaled_font_get_font_options, [CairoScaledFont, CairoFontOptions], :void
  
  # Toy fonts
  # 
  # @method cairo_toy_font_face_create(family, slant, weight)
  # @param [String] family 
  # @param [Symbol from _enum_cairo_font_slant_t_] slant 
  # @param [Symbol from _enum_cairo_font_weight_t_] weight 
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_toy_font_face_create, :cairo_toy_font_face_create, [:string, :cairo_font_slant_t, :cairo_font_weight_t], CairoFontFace
  
  # (Not documented)
  # 
  # @method cairo_toy_font_face_get_family(font_face)
  # @param [CairoFontFace] font_face 
  # @return [String] 
  # @scope class
  attach_function :cairo_toy_font_face_get_family, :cairo_toy_font_face_get_family, [CairoFontFace], :string
  
  # (Not documented)
  # 
  # @method cairo_toy_font_face_get_slant(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Symbol from _enum_cairo_font_slant_t_] 
  # @scope class
  attach_function :cairo_toy_font_face_get_slant, :cairo_toy_font_face_get_slant, [CairoFontFace], :cairo_font_slant_t
  
  # (Not documented)
  # 
  # @method cairo_toy_font_face_get_weight(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Symbol from _enum_cairo_font_weight_t_] 
  # @scope class
  attach_function :cairo_toy_font_face_get_weight, :cairo_toy_font_face_get_weight, [CairoFontFace], :cairo_font_weight_t
  
  # User fonts
  # 
  # @method cairo_user_font_face_create()
  # @return [CairoFontFace] 
  # @scope class
  attach_function :cairo_user_font_face_create, :cairo_user_font_face_create, [], CairoFontFace
  
  # cairo_user_scaled_font_init_func_t:
  # @scaled_font: the scaled-font being created
  # @cr: a cairo context, in font space
  # @extents: font extents to fill in, in font space
  # 
  # #cairo_user_scaled_font_init_func_t is the type of function which is
  # called when a scaled-font needs to be created for a user font-face.
  # 
  # The cairo context @cr is not used by the caller, but is prepared in font
  # space, similar to what the cairo contexts passed to the render_glyph
  # method will look like.  The callback can use this context for extents
  # computation for example.  After the callback is called, @cr is checked
  # for any error status.
  # 
  # The @extents argument is where the user font sets the font extents for
  # @scaled_font.  It is in font space, which means that for most cases its
  # ascent and descent members should add to 1.0.  @extents is preset to
  # hold a value of 1.0 for ascent, height, and max_x_advance, and 0.0 for
  # descent and max_y_advance members.
  # 
  # The callback is optional.  If not set, default font extents as described
  # in the previous paragraph will be used.
  # 
  # Note that @scaled_font is not fully initialized at this
  # point and trying to use it for text operations in the callback will result
  # in deadlock.
  # 
  # Returns: %CAIRO_STATUS_SUCCESS upon success, or an error status on error.
  # 
  # Since: 1.8
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_cairo_user_scaled_font_init_func_t_(scaled_font, cr, extents)
  # @param [CairoScaledFont] scaled_font 
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*CairoFontExtentsT)] extents 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  callback :cairo_user_scaled_font_init_func_t, [CairoScaledFont, Cairo, :pointer], :cairo_status_t
  
  # cairo_user_scaled_font_render_glyph_func_t:
  # @scaled_font: user scaled-font
  # @glyph: glyph code to render
  # @cr: cairo context to draw to, in font space
  # @extents: glyph extents to fill in, in font space
  # 
  # #cairo_user_scaled_font_render_glyph_func_t is the type of function which
  # is called when a user scaled-font needs to render a glyph.
  # 
  # The callback is mandatory, and expected to draw the glyph with code @glyph to
  # the cairo context @cr.  @cr is prepared such that the glyph drawing is done in
  # font space.  That is, the matrix set on @cr is the scale matrix of @scaled_font,
  # The @extents argument is where the user font sets the font extents for
  # @scaled_font.  However, if user prefers to draw in user space, they can
  # achieve that by changing the matrix on @cr.  All cairo rendering operations
  # to @cr are permitted, however, the result is undefined if any source other
  # than the default source on @cr is used.  That means, glyph bitmaps should
  # be rendered using cairo_mask() instead of cairo_paint().
  # 
  # Other non-default settings on @cr include a font size of 1.0 (given that
  # it is set up to be in font space), and font options corresponding to
  # @scaled_font.
  # 
  # The @extents argument is preset to have <literal>x_bearing</literal>,
  # <literal>width</literal>, and <literal>y_advance</literal> of zero,
  # <literal>y_bearing</literal> set to <literal>-font_extents.ascent</literal>,
  # <literal>height</literal> to <literal>font_extents.ascent+font_extents.descent</literal>,
  # and <literal>x_advance</literal> to <literal>font_extents.max_x_advance</literal>.
  # The only field user needs to set in majority of cases is
  # <literal>x_advance</literal>.
  # If the <literal>width</literal> field is zero upon the callback returning
  # (which is its preset value), the glyph extents are automatically computed
  # based on the drawings done to @cr.  This is in most cases exactly what the
  # desired behavior is.  However, if for any reason the callback sets the
  # extents, it must be ink extents, and include the extents of all drawing
  # done to @cr in the callback.
  # 
  # Returns: %CAIRO_STATUS_SUCCESS upon success, or
  # %CAIRO_STATUS_USER_FONT_ERROR or any other error status on error.
  # 
  # Since: 1.8
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_cairo_user_scaled_font_render_glyph_func_t_(scaled_font, glyph, cr, extents)
  # @param [CairoScaledFont] scaled_font 
  # @param [Integer] glyph 
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*CairoTextExtentsT)] extents 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  callback :cairo_user_scaled_font_render_glyph_func_t, [CairoScaledFont, :ulong, Cairo, :pointer], :cairo_status_t
  
  # cairo_user_scaled_font_text_to_glyphs_func_t:
  # @scaled_font: the scaled-font being created
  # @utf8: a string of text encoded in UTF-8
  # @utf8_len: length of @utf8 in bytes
  # @glyphs: pointer to array of glyphs to fill, in font space
  # @num_glyphs: pointer to number of glyphs
  # @clusters: pointer to array of cluster mapping information to fill, or %NULL
  # @num_clusters: pointer to number of clusters
  # @cluster_flags: pointer to location to store cluster flags corresponding to the
  #                 output @clusters
  # 
  # #cairo_user_scaled_font_text_to_glyphs_func_t is the type of function which
  # is called to convert input text to an array of glyphs.  This is used by the
  # cairo_show_text() operation.
  # 
  # Using this callback the user-font has full control on glyphs and their
  # positions.  That means, it allows for features like ligatures and kerning,
  # as well as complex <firstterm>shaping</firstterm> required for scripts like
  # Arabic and Indic.
  # 
  # The @num_glyphs argument is preset to the number of glyph entries available
  # in the @glyphs buffer. If the @glyphs buffer is %NULL, the value of
  # @num_glyphs will be zero.  If the provided glyph array is too short for
  # the conversion (or for convenience), a new glyph array may be allocated
  # using cairo_glyph_allocate() and placed in @glyphs.  Upon return,
  # @num_glyphs should contain the number of generated glyphs.  If the value
  # @glyphs points at has changed after the call, the caller will free the
  # allocated glyph array using cairo_glyph_free().
  # The callback should populate the glyph indices and positions (in font space)
  # assuming that the text is to be shown at the origin.
  # 
  # If @clusters is not %NULL, @num_clusters and @cluster_flags are also
  # non-%NULL, and cluster mapping should be computed. The semantics of how
  # cluster array allocation works is similar to the glyph array.  That is,
  # if @clusters initially points to a non-%NULL value, that array may be used
  # as a cluster buffer, and @num_clusters points to the number of cluster
  # entries available there.  If the provided cluster array is too short for
  # the conversion (or for convenience), a new cluster array may be allocated
  # using cairo_text_cluster_allocate() and placed in @clusters.  Upon return,
  # @num_clusters should contain the number of generated clusters.
  # If the value @clusters points at has changed after the call, the caller
  # will free the allocated cluster array using cairo_text_cluster_free().
  # 
  # The callback is optional.  If @num_glyphs is negative upon
  # the callback returning or if the return value
  # is %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED, the unicode_to_glyph callback
  # is tried.  See #cairo_user_scaled_font_unicode_to_glyph_func_t.
  # 
  # Note: While cairo does not impose any limitation on glyph indices,
  # some applications may assume that a glyph index fits in a 16-bit
  # unsigned integer.  As such, it is advised that user-fonts keep their
  # glyphs in the 0 to 65535 range.  Furthermore, some applications may
  # assume that glyph 0 is a special glyph-not-found glyph.  User-fonts
  # are advised to use glyph 0 for such purposes and do not use that
  # glyph value for other purposes.
  # 
  # Returns: %CAIRO_STATUS_SUCCESS upon success,
  # %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED if fallback options should be tried,
  # or %CAIRO_STATUS_USER_FONT_ERROR or any other error status on error.
  # 
  # Since: 1.8
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_cairo_user_scaled_font_text_to_glyphs_func_t_(scaled_font, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags)
  # @param [CairoScaledFont] scaled_font 
  # @param [String] utf8 
  # @param [Integer] utf8_len 
  # @param [FFI::Pointer(**CairoGlyphT)] glyphs 
  # @param [FFI::Pointer(*Int)] num_glyphs 
  # @param [FFI::Pointer(**CairoTextClusterT)] clusters 
  # @param [FFI::Pointer(*Int)] num_clusters 
  # @param [FFI::Pointer(*CairoTextClusterFlagsT)] cluster_flags 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  callback :cairo_user_scaled_font_text_to_glyphs_func_t, [CairoScaledFont, :string, :int, :pointer, :pointer, :pointer, :pointer, :pointer], :cairo_status_t
  
  # cairo_user_scaled_font_unicode_to_glyph_func_t:
  # @scaled_font: the scaled-font being created
  # @unicode: input unicode character code-point
  # @glyph_index: output glyph index
  # 
  # #cairo_user_scaled_font_unicode_to_glyph_func_t is the type of function which
  # is called to convert an input Unicode character to a single glyph.
  # This is used by the cairo_show_text() operation.
  # 
  # This callback is used to provide the same functionality as the
  # text_to_glyphs callback does (see #cairo_user_scaled_font_text_to_glyphs_func_t)
  # but has much less control on the output,
  # in exchange for increased ease of use.  The inherent assumption to using
  # this callback is that each character maps to one glyph, and that the
  # mapping is context independent.  It also assumes that glyphs are positioned
  # according to their advance width.  These mean no ligatures, kerning, or
  # complex scripts can be implemented using this callback.
  # 
  # The callback is optional, and only used if text_to_glyphs callback is not
  # set or fails to return glyphs.  If this callback is not set or if it returns
  # %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED, an identity mapping from Unicode
  # code-points to glyph indices is assumed.
  # 
  # Note: While cairo does not impose any limitation on glyph indices,
  # some applications may assume that a glyph index fits in a 16-bit
  # unsigned integer.  As such, it is advised that user-fonts keep their
  # glyphs in the 0 to 65535 range.  Furthermore, some applications may
  # assume that glyph 0 is a special glyph-not-found glyph.  User-fonts
  # are advised to use glyph 0 for such purposes and do not use that
  # glyph value for other purposes.
  # 
  # Returns: %CAIRO_STATUS_SUCCESS upon success,
  # %CAIRO_STATUS_USER_FONT_NOT_IMPLEMENTED if fallback options should be tried,
  # or %CAIRO_STATUS_USER_FONT_ERROR or any other error status on error.
  # 
  # Since: 1.8
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_cairo_user_scaled_font_unicode_to_glyph_func_t_(scaled_font, unicode, glyph_index)
  # @param [CairoScaledFont] scaled_font 
  # @param [Integer] unicode 
  # @param [FFI::Pointer(*ULong)] glyph_index 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  callback :cairo_user_scaled_font_unicode_to_glyph_func_t, [CairoScaledFont, :ulong, :pointer], :cairo_status_t
  
  # User-font method setters
  # 
  # @method cairo_user_font_face_set_init_func(font_face, init_func)
  # @param [CairoFontFace] font_face 
  # @param [Proc(_callback_cairo_user_scaled_font_init_func_t_)] init_func 
  # @return [nil] 
  # @scope class
  attach_function :cairo_user_font_face_set_init_func, :cairo_user_font_face_set_init_func, [CairoFontFace, :cairo_user_scaled_font_init_func_t], :void
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_set_render_glyph_func(font_face, render_glyph_func)
  # @param [CairoFontFace] font_face 
  # @param [Proc(_callback_cairo_user_scaled_font_render_glyph_func_t_)] render_glyph_func 
  # @return [nil] 
  # @scope class
  attach_function :cairo_user_font_face_set_render_glyph_func, :cairo_user_font_face_set_render_glyph_func, [CairoFontFace, :cairo_user_scaled_font_render_glyph_func_t], :void
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_set_text_to_glyphs_func(font_face, text_to_glyphs_func)
  # @param [CairoFontFace] font_face 
  # @param [Proc(_callback_cairo_user_scaled_font_text_to_glyphs_func_t_)] text_to_glyphs_func 
  # @return [nil] 
  # @scope class
  attach_function :cairo_user_font_face_set_text_to_glyphs_func, :cairo_user_font_face_set_text_to_glyphs_func, [CairoFontFace, :cairo_user_scaled_font_text_to_glyphs_func_t], :void
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_set_unicode_to_glyph_func(font_face, unicode_to_glyph_func)
  # @param [CairoFontFace] font_face 
  # @param [Proc(_callback_cairo_user_scaled_font_unicode_to_glyph_func_t_)] unicode_to_glyph_func 
  # @return [nil] 
  # @scope class
  attach_function :cairo_user_font_face_set_unicode_to_glyph_func, :cairo_user_font_face_set_unicode_to_glyph_func, [CairoFontFace, :cairo_user_scaled_font_unicode_to_glyph_func_t], :void
  
  # User-font method getters
  # 
  # @method cairo_user_font_face_get_init_func(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Proc(_callback_cairo_user_scaled_font_init_func_t_)] 
  # @scope class
  attach_function :cairo_user_font_face_get_init_func, :cairo_user_font_face_get_init_func, [CairoFontFace], :cairo_user_scaled_font_init_func_t
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_get_render_glyph_func(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Proc(_callback_cairo_user_scaled_font_render_glyph_func_t_)] 
  # @scope class
  attach_function :cairo_user_font_face_get_render_glyph_func, :cairo_user_font_face_get_render_glyph_func, [CairoFontFace], :cairo_user_scaled_font_render_glyph_func_t
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_get_text_to_glyphs_func(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Proc(_callback_cairo_user_scaled_font_text_to_glyphs_func_t_)] 
  # @scope class
  attach_function :cairo_user_font_face_get_text_to_glyphs_func, :cairo_user_font_face_get_text_to_glyphs_func, [CairoFontFace], :cairo_user_scaled_font_text_to_glyphs_func_t
  
  # (Not documented)
  # 
  # @method cairo_user_font_face_get_unicode_to_glyph_func(font_face)
  # @param [CairoFontFace] font_face 
  # @return [Proc(_callback_cairo_user_scaled_font_unicode_to_glyph_func_t_)] 
  # @scope class
  attach_function :cairo_user_font_face_get_unicode_to_glyph_func, :cairo_user_font_face_get_unicode_to_glyph_func, [CairoFontFace], :cairo_user_scaled_font_unicode_to_glyph_func_t
  
  # Query functions
  # 
  # @method cairo_get_operator(cr)
  # @param [Cairo] cr 
  # @return [Symbol from _enum_cairo_operator_t_] 
  # @scope class
  attach_function :cairo_get_operator, :cairo_get_operator, [Cairo], :cairo_operator_t
  
  # (Not documented)
  # 
  # @method cairo_get_source(cr)
  # @param [Cairo] cr 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_get_source, :cairo_get_source, [Cairo], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_get_tolerance(cr)
  # @param [Cairo] cr 
  # @return [Float] 
  # @scope class
  attach_function :cairo_get_tolerance, :cairo_get_tolerance, [Cairo], :double
  
  # (Not documented)
  # 
  # @method cairo_get_antialias(cr)
  # @param [Cairo] cr 
  # @return [Symbol from _enum_cairo_antialias_t_] 
  # @scope class
  attach_function :cairo_get_antialias, :cairo_get_antialias, [Cairo], :cairo_antialias_t
  
  # (Not documented)
  # 
  # @method cairo_has_current_point(cr)
  # @param [Cairo] cr 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_has_current_point, :cairo_has_current_point, [Cairo], :int
  
  # (Not documented)
  # 
  # @method cairo_get_current_point(cr, x, y)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] x 
  # @param [FFI::Pointer(*Double)] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_get_current_point, :cairo_get_current_point, [Cairo, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_get_fill_rule(cr)
  # @param [Cairo] cr 
  # @return [Symbol from _enum_cairo_fill_rule_t_] 
  # @scope class
  attach_function :cairo_get_fill_rule, :cairo_get_fill_rule, [Cairo], :cairo_fill_rule_t
  
  # (Not documented)
  # 
  # @method cairo_get_line_width(cr)
  # @param [Cairo] cr 
  # @return [Float] 
  # @scope class
  attach_function :cairo_get_line_width, :cairo_get_line_width, [Cairo], :double
  
  # (Not documented)
  # 
  # @method cairo_get_line_cap(cr)
  # @param [Cairo] cr 
  # @return [Symbol from _enum_cairo_line_cap_t_] 
  # @scope class
  attach_function :cairo_get_line_cap, :cairo_get_line_cap, [Cairo], :cairo_line_cap_t
  
  # (Not documented)
  # 
  # @method cairo_get_line_join(cr)
  # @param [Cairo] cr 
  # @return [Symbol from _enum_cairo_line_join_t_] 
  # @scope class
  attach_function :cairo_get_line_join, :cairo_get_line_join, [Cairo], :cairo_line_join_t
  
  # (Not documented)
  # 
  # @method cairo_get_miter_limit(cr)
  # @param [Cairo] cr 
  # @return [Float] 
  # @scope class
  attach_function :cairo_get_miter_limit, :cairo_get_miter_limit, [Cairo], :double
  
  # (Not documented)
  # 
  # @method cairo_get_dash_count(cr)
  # @param [Cairo] cr 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_get_dash_count, :cairo_get_dash_count, [Cairo], :int
  
  # (Not documented)
  # 
  # @method cairo_get_dash(cr, dashes, offset)
  # @param [Cairo] cr 
  # @param [FFI::Pointer(*Double)] dashes 
  # @param [FFI::Pointer(*Double)] offset 
  # @return [nil] 
  # @scope class
  attach_function :cairo_get_dash, :cairo_get_dash, [Cairo, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_get_matrix(cr, matrix)
  # @param [Cairo] cr 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_get_matrix, :cairo_get_matrix, [Cairo, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_get_target(cr)
  # @param [Cairo] cr 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_get_target, :cairo_get_target, [Cairo], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_get_group_target(cr)
  # @param [Cairo] cr 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_get_group_target, :cairo_get_group_target, [Cairo], CairoSurface
  
  # cairo_path_data_type_t:
  # @CAIRO_PATH_MOVE_TO: A move-to operation
  # @CAIRO_PATH_LINE_TO: A line-to operation
  # @CAIRO_PATH_CURVE_TO: A curve-to operation
  # @CAIRO_PATH_CLOSE_PATH: A close-path operation
  # 
  # #cairo_path_data_t is used to describe the type of one portion
  # of a path when represented as a #cairo_path_t.
  # See #cairo_path_data_t for details.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_path_data_type).</em>
  # 
  # === Options:
  # :move_to ::
  #   
  # :line_to ::
  #   
  # :curve_to ::
  #   
  # :close_path ::
  #   
  # 
  # @method _enum_cairo_path_data_type_
  # @return [Symbol]
  # @scope class
  enum :cairo_path_data_type, [
    :move_to,
    :line_to,
    :curve_to,
    :close_path
  ]
  
  # cairo_path_data_type_t:
  # @CAIRO_PATH_MOVE_TO: A move-to operation
  # @CAIRO_PATH_LINE_TO: A line-to operation
  # @CAIRO_PATH_CURVE_TO: A curve-to operation
  # @CAIRO_PATH_CLOSE_PATH: A close-path operation
  # 
  # #cairo_path_data_t is used to describe the type of one portion
  # of a path when represented as a #cairo_path_t.
  # See #cairo_path_data_t for details.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_path_data_type_t).</em>
  # 
  # === Options:
  # :move_to ::
  #   
  # :line_to ::
  #   
  # :curve_to ::
  #   
  # :close_path ::
  #   
  # 
  # @method _enum_cairo_path_data_type_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_path_data_type_t, [
    :move_to,
    :line_to,
    :curve_to,
    :close_path
  ]
  
  # cairo_path_t:
  # @status: the current error status
  # @data: the elements in the path
  # @num_data: the number of elements in the data array
  # 
  # A data structure for holding a path. This data structure serves as
  # the return value for cairo_copy_path() and
  # cairo_copy_path_flat() as well the input value for
  # cairo_append_path().
  # 
  # See #cairo_path_data_t for hints on how to iterate over the
  # actual data within the path.
  # 
  # The num_data member gives the number of elements in the data
  # array. This number is larger than the number of independent path
  # portions (defined in #cairo_path_data_type_t), since the data
  # includes both headers and coordinates for each portion.
  # 
  # = Fields:
  # :status ::
  #   (Symbol from _enum_cairo_status_t_) 
  # :data ::
  #   (FFI::Pointer(*CairoPathDataT)) 
  # :num_data ::
  #   (Integer) 
  class CairoPath < FFI::Struct
    layout :status, :cairo_status_t,
           :data, :pointer,
           :num_data, :int
  end
  
  # cairo_path_t:
  # @status: the current error status
  # @data: the elements in the path
  # @num_data: the number of elements in the data array
  # 
  # A data structure for holding a path. This data structure serves as
  # the return value for cairo_copy_path() and
  # cairo_copy_path_flat() as well the input value for
  # cairo_append_path().
  # 
  # See #cairo_path_data_t for hints on how to iterate over the
  # actual data within the path.
  # 
  # The num_data member gives the number of elements in the data
  # array. This number is larger than the number of independent path
  # portions (defined in #cairo_path_data_type_t), since the data
  # includes both headers and coordinates for each portion.
  # 
  # = Fields:
  # :status ::
  #   (Symbol from _enum_cairo_status_t_) 
  # :data ::
  #   (FFI::Pointer(*CairoPathDataT)) 
  # :num_data ::
  #   (Integer) 
  class CairoPathT < FFI::Struct
    layout :status, :cairo_status_t,
           :data, :pointer,
           :num_data, :int
  end
  
  # (Not documented)
  # 
  # @method cairo_copy_path(cr)
  # @param [Cairo] cr 
  # @return [CairoPath] 
  # @scope class
  attach_function :cairo_copy_path, :cairo_copy_path, [Cairo], CairoPath
  
  # (Not documented)
  # 
  # @method cairo_copy_path_flat(cr)
  # @param [Cairo] cr 
  # @return [CairoPath] 
  # @scope class
  attach_function :cairo_copy_path_flat, :cairo_copy_path_flat, [Cairo], CairoPath
  
  # (Not documented)
  # 
  # @method cairo_append_path(cr, path)
  # @param [Cairo] cr 
  # @param [CairoPath] path 
  # @return [nil] 
  # @scope class
  attach_function :cairo_append_path, :cairo_append_path, [Cairo, CairoPath], :void
  
  # (Not documented)
  # 
  # @method cairo_path_destroy(path)
  # @param [CairoPath] path 
  # @return [nil] 
  # @scope class
  attach_function :cairo_path_destroy, :cairo_path_destroy, [CairoPath], :void
  
  # Error status queries
  # 
  # @method cairo_status(cr)
  # @param [Cairo] cr 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_status, :cairo_status, [Cairo], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_status_to_string(status)
  # @param [Symbol from _enum_cairo_status_t_] status 
  # @return [String] 
  # @scope class
  attach_function :cairo_status_to_string, :cairo_status_to_string, [:cairo_status_t], :string
  
  # Backend device manipulation
  # 
  # @method cairo_device_reference(device)
  # @param [CairoDevice] device 
  # @return [CairoDevice] 
  # @scope class
  attach_function :cairo_device_reference, :cairo_device_reference, [CairoDevice], CairoDevice
  
  # cairo_device_type_t:
  # @CAIRO_DEVICE_TYPE_DRM: The surface is of type Direct Render Manager
  # @CAIRO_DEVICE_TYPE_GL: The surface is of type OpenGL
  # @CAIRO_DEVICE_TYPE_SCRIPT: The surface is of type script
  # @CAIRO_DEVICE_TYPE_XCB: The surface is of type xcb
  # @CAIRO_DEVICE_TYPE_XLIB: The surface is of type xlib
  # @CAIRO_DEVICE_TYPE_XML: The surface is of type XML
  #   cairo_surface_create_for_rectangle()
  # 
  # #cairo_device_type_t is used to describe the type of a given
  # device. The devices types are also known as "backends" within cairo.
  # 
  # The device type can be queried with cairo_device_get_type()
  # 
  # The various #cairo_device_t functions can be used with surfaces of
  # any type, but some backends also provide type-specific functions
  # that must only be called with a device of the appropriate
  # type. These functions have names that begin with
  # cairo_<emphasis>type</emphasis>_device<!-- --> such as cairo_xcb_device_debug_set_render_version().
  # 
  # The behavior of calling a type-specific function with a surface of
  # the wrong type is undefined.
  # 
  # New entries may be added in future versions.
  # 
  # Since: 1.10
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_device_type).</em>
  # 
  # === Options:
  # :drm ::
  #   
  # :gl ::
  #   
  # :script ::
  #   
  # :xcb ::
  #   
  # :xlib ::
  #   
  # :xml ::
  #   
  # 
  # @method _enum_cairo_device_type_
  # @return [Symbol]
  # @scope class
  enum :cairo_device_type, [
    :drm,
    :gl,
    :script,
    :xcb,
    :xlib,
    :xml
  ]
  
  # cairo_device_type_t:
  # @CAIRO_DEVICE_TYPE_DRM: The surface is of type Direct Render Manager
  # @CAIRO_DEVICE_TYPE_GL: The surface is of type OpenGL
  # @CAIRO_DEVICE_TYPE_SCRIPT: The surface is of type script
  # @CAIRO_DEVICE_TYPE_XCB: The surface is of type xcb
  # @CAIRO_DEVICE_TYPE_XLIB: The surface is of type xlib
  # @CAIRO_DEVICE_TYPE_XML: The surface is of type XML
  #   cairo_surface_create_for_rectangle()
  # 
  # #cairo_device_type_t is used to describe the type of a given
  # device. The devices types are also known as "backends" within cairo.
  # 
  # The device type can be queried with cairo_device_get_type()
  # 
  # The various #cairo_device_t functions can be used with surfaces of
  # any type, but some backends also provide type-specific functions
  # that must only be called with a device of the appropriate
  # type. These functions have names that begin with
  # cairo_<emphasis>type</emphasis>_device<!-- --> such as cairo_xcb_device_debug_set_render_version().
  # 
  # The behavior of calling a type-specific function with a surface of
  # the wrong type is undefined.
  # 
  # New entries may be added in future versions.
  # 
  # Since: 1.10
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_device_type_t).</em>
  # 
  # === Options:
  # :drm ::
  #   
  # :gl ::
  #   
  # :script ::
  #   
  # :xcb ::
  #   
  # :xlib ::
  #   
  # :xml ::
  #   
  # 
  # @method _enum_cairo_device_type_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_device_type_t, [
    :drm,
    :gl,
    :script,
    :xcb,
    :xlib,
    :xml
  ]
  
  # (Not documented)
  # 
  # @method cairo_device_get_type(device)
  # @param [CairoDevice] device 
  # @return [Symbol from _enum_cairo_device_type_t_] 
  # @scope class
  attach_function :cairo_device_get_type, :cairo_device_get_type, [CairoDevice], :cairo_device_type_t
  
  # (Not documented)
  # 
  # @method cairo_device_status(device)
  # @param [CairoDevice] device 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_device_status, :cairo_device_status, [CairoDevice], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_device_acquire(device)
  # @param [CairoDevice] device 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_device_acquire, :cairo_device_acquire, [CairoDevice], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_device_release(device)
  # @param [CairoDevice] device 
  # @return [nil] 
  # @scope class
  attach_function :cairo_device_release, :cairo_device_release, [CairoDevice], :void
  
  # (Not documented)
  # 
  # @method cairo_device_flush(device)
  # @param [CairoDevice] device 
  # @return [nil] 
  # @scope class
  attach_function :cairo_device_flush, :cairo_device_flush, [CairoDevice], :void
  
  # (Not documented)
  # 
  # @method cairo_device_finish(device)
  # @param [CairoDevice] device 
  # @return [nil] 
  # @scope class
  attach_function :cairo_device_finish, :cairo_device_finish, [CairoDevice], :void
  
  # (Not documented)
  # 
  # @method cairo_device_destroy(device)
  # @param [CairoDevice] device 
  # @return [nil] 
  # @scope class
  attach_function :cairo_device_destroy, :cairo_device_destroy, [CairoDevice], :void
  
  # (Not documented)
  # 
  # @method cairo_device_get_reference_count(device)
  # @param [CairoDevice] device 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_device_get_reference_count, :cairo_device_get_reference_count, [CairoDevice], :uint
  
  # (Not documented)
  # 
  # @method cairo_device_get_user_data(device, key)
  # @param [CairoDevice] device 
  # @param [CairoUserDataKey] key 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :cairo_device_get_user_data, :cairo_device_get_user_data, [CairoDevice, CairoUserDataKey], :pointer
  
  # (Not documented)
  # 
  # @method cairo_device_set_user_data(device, key, user_data, destroy)
  # @param [CairoDevice] device 
  # @param [CairoUserDataKey] key 
  # @param [FFI::Pointer(*Void)] user_data 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_device_set_user_data, :cairo_device_set_user_data, [CairoDevice, CairoUserDataKey, :pointer, :pointer], :cairo_status_t
  
  # Surface manipulation
  # 
  # @method cairo_surface_create_similar(other, content, width, height)
  # @param [CairoSurface] other 
  # @param [Symbol from _enum_cairo_content_t_] content 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_surface_create_similar, :cairo_surface_create_similar, [CairoSurface, :cairo_content_t, :int, :int], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_surface_create_for_rectangle(target, x, y, width, height)
  # @param [CairoSurface] target 
  # @param [Float] x 
  # @param [Float] y 
  # @param [Float] width 
  # @param [Float] height 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_surface_create_for_rectangle, :cairo_surface_create_for_rectangle, [CairoSurface, :double, :double, :double, :double], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_surface_reference(surface)
  # @param [CairoSurface] surface 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_surface_reference, :cairo_surface_reference, [CairoSurface], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_surface_finish(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_finish, :cairo_surface_finish, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_destroy(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_destroy, :cairo_surface_destroy, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_get_device(surface)
  # @param [CairoSurface] surface 
  # @return [CairoDevice] 
  # @scope class
  attach_function :cairo_surface_get_device, :cairo_surface_get_device, [CairoSurface], CairoDevice
  
  # (Not documented)
  # 
  # @method cairo_surface_get_reference_count(surface)
  # @param [CairoSurface] surface 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_surface_get_reference_count, :cairo_surface_get_reference_count, [CairoSurface], :uint
  
  # (Not documented)
  # 
  # @method cairo_surface_status(surface)
  # @param [CairoSurface] surface 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_surface_status, :cairo_surface_status, [CairoSurface], :cairo_status_t
  
  # cairo_surface_type_t:
  # @CAIRO_SURFACE_TYPE_IMAGE: The surface is of type image
  # @CAIRO_SURFACE_TYPE_PDF: The surface is of type pdf
  # @CAIRO_SURFACE_TYPE_PS: The surface is of type ps
  # @CAIRO_SURFACE_TYPE_XLIB: The surface is of type xlib
  # @CAIRO_SURFACE_TYPE_XCB: The surface is of type xcb
  # @CAIRO_SURFACE_TYPE_GLITZ: The surface is of type glitz
  # @CAIRO_SURFACE_TYPE_QUARTZ: The surface is of type quartz
  # @CAIRO_SURFACE_TYPE_WIN32: The surface is of type win32
  # @CAIRO_SURFACE_TYPE_BEOS: The surface is of type beos
  # @CAIRO_SURFACE_TYPE_DIRECTFB: The surface is of type directfb
  # @CAIRO_SURFACE_TYPE_SVG: The surface is of type svg
  # @CAIRO_SURFACE_TYPE_OS2: The surface is of type os2
  # @CAIRO_SURFACE_TYPE_WIN32_PRINTING: The surface is a win32 printing surface
  # @CAIRO_SURFACE_TYPE_QUARTZ_IMAGE: The surface is of type quartz_image
  # @CAIRO_SURFACE_TYPE_SCRIPT: The surface is of type script, since 1.10
  # @CAIRO_SURFACE_TYPE_QT: The surface is of type Qt, since 1.10
  # @CAIRO_SURFACE_TYPE_RECORDING: The surface is of type recording, since 1.10
  # @CAIRO_SURFACE_TYPE_VG: The surface is a OpenVG surface, since 1.10
  # @CAIRO_SURFACE_TYPE_GL: The surface is of type OpenGL, since 1.10
  # @CAIRO_SURFACE_TYPE_DRM: The surface is of type Direct Render Manager, since 1.10
  # @CAIRO_SURFACE_TYPE_TEE: The surface is of type 'tee' (a multiplexing surface), since 1.10
  # @CAIRO_SURFACE_TYPE_XML: The surface is of type XML (for debugging), since 1.10
  # @CAIRO_SURFACE_TYPE_SKIA: The surface is of type Skia, since 1.10
  # @CAIRO_SURFACE_TYPE_SUBSURFACE: The surface is a subsurface created with
  #   cairo_surface_create_for_rectangle(), since 1.10
  # 
  # #cairo_surface_type_t is used to describe the type of a given
  # surface. The surface types are also known as "backends" or "surface
  # backends" within cairo.
  # 
  # The type of a surface is determined by the function used to create
  # it, which will generally be of the form cairo_<emphasis>type</emphasis>_surface_create(),
  # (though see cairo_surface_create_similar() as well).
  # 
  # The surface type can be queried with cairo_surface_get_type()
  # 
  # The various #cairo_surface_t functions can be used with surfaces of
  # any type, but some backends also provide type-specific functions
  # that must only be called with a surface of the appropriate
  # type. These functions have names that begin with
  # cairo_<emphasis>type</emphasis>_surface<!-- --> such as cairo_image_surface_get_width().
  # 
  # The behavior of calling a type-specific function with a surface of
  # the wrong type is undefined.
  # 
  # New entries may be added in future versions.
  # 
  # Since: 1.2
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_surface_type).</em>
  # 
  # === Options:
  # :image ::
  #   
  # :pdf ::
  #   
  # :ps ::
  #   
  # :xlib ::
  #   
  # :xcb ::
  #   
  # :glitz ::
  #   
  # :quartz ::
  #   
  # :win32 ::
  #   
  # :beos ::
  #   
  # :directfb ::
  #   
  # :svg ::
  #   
  # :os2 ::
  #   
  # :win32_printing ::
  #   
  # :quartz_image ::
  #   
  # :script ::
  #   
  # :qt ::
  #   
  # :recording ::
  #   
  # :vg ::
  #   
  # :gl ::
  #   
  # :drm ::
  #   
  # :tee ::
  #   
  # :xml ::
  #   
  # :skia ::
  #   
  # :subsurface ::
  #   
  # 
  # @method _enum_cairo_surface_type_
  # @return [Symbol]
  # @scope class
  enum :cairo_surface_type, [
    :image,
    :pdf,
    :ps,
    :xlib,
    :xcb,
    :glitz,
    :quartz,
    :win32,
    :beos,
    :directfb,
    :svg,
    :os2,
    :win32_printing,
    :quartz_image,
    :script,
    :qt,
    :recording,
    :vg,
    :gl,
    :drm,
    :tee,
    :xml,
    :skia,
    :subsurface
  ]
  
  # cairo_surface_type_t:
  # @CAIRO_SURFACE_TYPE_IMAGE: The surface is of type image
  # @CAIRO_SURFACE_TYPE_PDF: The surface is of type pdf
  # @CAIRO_SURFACE_TYPE_PS: The surface is of type ps
  # @CAIRO_SURFACE_TYPE_XLIB: The surface is of type xlib
  # @CAIRO_SURFACE_TYPE_XCB: The surface is of type xcb
  # @CAIRO_SURFACE_TYPE_GLITZ: The surface is of type glitz
  # @CAIRO_SURFACE_TYPE_QUARTZ: The surface is of type quartz
  # @CAIRO_SURFACE_TYPE_WIN32: The surface is of type win32
  # @CAIRO_SURFACE_TYPE_BEOS: The surface is of type beos
  # @CAIRO_SURFACE_TYPE_DIRECTFB: The surface is of type directfb
  # @CAIRO_SURFACE_TYPE_SVG: The surface is of type svg
  # @CAIRO_SURFACE_TYPE_OS2: The surface is of type os2
  # @CAIRO_SURFACE_TYPE_WIN32_PRINTING: The surface is a win32 printing surface
  # @CAIRO_SURFACE_TYPE_QUARTZ_IMAGE: The surface is of type quartz_image
  # @CAIRO_SURFACE_TYPE_SCRIPT: The surface is of type script, since 1.10
  # @CAIRO_SURFACE_TYPE_QT: The surface is of type Qt, since 1.10
  # @CAIRO_SURFACE_TYPE_RECORDING: The surface is of type recording, since 1.10
  # @CAIRO_SURFACE_TYPE_VG: The surface is a OpenVG surface, since 1.10
  # @CAIRO_SURFACE_TYPE_GL: The surface is of type OpenGL, since 1.10
  # @CAIRO_SURFACE_TYPE_DRM: The surface is of type Direct Render Manager, since 1.10
  # @CAIRO_SURFACE_TYPE_TEE: The surface is of type 'tee' (a multiplexing surface), since 1.10
  # @CAIRO_SURFACE_TYPE_XML: The surface is of type XML (for debugging), since 1.10
  # @CAIRO_SURFACE_TYPE_SKIA: The surface is of type Skia, since 1.10
  # @CAIRO_SURFACE_TYPE_SUBSURFACE: The surface is a subsurface created with
  #   cairo_surface_create_for_rectangle(), since 1.10
  # 
  # #cairo_surface_type_t is used to describe the type of a given
  # surface. The surface types are also known as "backends" or "surface
  # backends" within cairo.
  # 
  # The type of a surface is determined by the function used to create
  # it, which will generally be of the form cairo_<emphasis>type</emphasis>_surface_create(),
  # (though see cairo_surface_create_similar() as well).
  # 
  # The surface type can be queried with cairo_surface_get_type()
  # 
  # The various #cairo_surface_t functions can be used with surfaces of
  # any type, but some backends also provide type-specific functions
  # that must only be called with a surface of the appropriate
  # type. These functions have names that begin with
  # cairo_<emphasis>type</emphasis>_surface<!-- --> such as cairo_image_surface_get_width().
  # 
  # The behavior of calling a type-specific function with a surface of
  # the wrong type is undefined.
  # 
  # New entries may be added in future versions.
  # 
  # Since: 1.2
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_surface_type_t).</em>
  # 
  # === Options:
  # :image ::
  #   
  # :pdf ::
  #   
  # :ps ::
  #   
  # :xlib ::
  #   
  # :xcb ::
  #   
  # :glitz ::
  #   
  # :quartz ::
  #   
  # :win32 ::
  #   
  # :beos ::
  #   
  # :directfb ::
  #   
  # :svg ::
  #   
  # :os2 ::
  #   
  # :win32_printing ::
  #   
  # :quartz_image ::
  #   
  # :script ::
  #   
  # :qt ::
  #   
  # :recording ::
  #   
  # :vg ::
  #   
  # :gl ::
  #   
  # :drm ::
  #   
  # :tee ::
  #   
  # :xml ::
  #   
  # :skia ::
  #   
  # :subsurface ::
  #   
  # 
  # @method _enum_cairo_surface_type_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_surface_type_t, [
    :image,
    :pdf,
    :ps,
    :xlib,
    :xcb,
    :glitz,
    :quartz,
    :win32,
    :beos,
    :directfb,
    :svg,
    :os2,
    :win32_printing,
    :quartz_image,
    :script,
    :qt,
    :recording,
    :vg,
    :gl,
    :drm,
    :tee,
    :xml,
    :skia,
    :subsurface
  ]
  
  # (Not documented)
  # 
  # @method cairo_surface_get_type(surface)
  # @param [CairoSurface] surface 
  # @return [Symbol from _enum_cairo_surface_type_t_] 
  # @scope class
  attach_function :cairo_surface_get_type, :cairo_surface_get_type, [CairoSurface], :cairo_surface_type_t
  
  # (Not documented)
  # 
  # @method cairo_surface_get_content(surface)
  # @param [CairoSurface] surface 
  # @return [Symbol from _enum_cairo_content_t_] 
  # @scope class
  attach_function :cairo_surface_get_content, :cairo_surface_get_content, [CairoSurface], :cairo_content_t
  
  # (Not documented)
  # 
  # @method cairo_surface_write_to_png(surface, filename)
  # @param [CairoSurface] surface 
  # @param [String] filename 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_surface_write_to_png, :cairo_surface_write_to_png, [CairoSurface, :string], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_surface_write_to_png_stream(surface, write_func, closure)
  # @param [CairoSurface] surface 
  # @param [Proc(_callback_cairo_write_func_t_)] write_func 
  # @param [FFI::Pointer(*Void)] closure 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_surface_write_to_png_stream, :cairo_surface_write_to_png_stream, [CairoSurface, :cairo_write_func_t, :pointer], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_surface_get_user_data(surface, key)
  # @param [CairoSurface] surface 
  # @param [CairoUserDataKey] key 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :cairo_surface_get_user_data, :cairo_surface_get_user_data, [CairoSurface, CairoUserDataKey], :pointer
  
  # (Not documented)
  # 
  # @method cairo_surface_set_user_data(surface, key, user_data, destroy)
  # @param [CairoSurface] surface 
  # @param [CairoUserDataKey] key 
  # @param [FFI::Pointer(*Void)] user_data 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_surface_set_user_data, :cairo_surface_set_user_data, [CairoSurface, CairoUserDataKey, :pointer, :pointer], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_surface_get_mime_data(surface, mime_type, data, length)
  # @param [CairoSurface] surface 
  # @param [String] mime_type 
  # @param [FFI::Pointer(**UChar)] data 
  # @param [FFI::Pointer(*ULong)] length 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_get_mime_data, :cairo_surface_get_mime_data, [CairoSurface, :string, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_set_mime_data(surface, mime_type, data, length, destroy, closure)
  # @param [CairoSurface] surface 
  # @param [String] mime_type 
  # @param [FFI::Pointer(*UChar)] data 
  # @param [Integer] length 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @param [FFI::Pointer(*Void)] closure 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_surface_set_mime_data, :cairo_surface_set_mime_data, [CairoSurface, :string, :pointer, :ulong, :pointer, :pointer], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_surface_get_font_options(surface, options)
  # @param [CairoSurface] surface 
  # @param [CairoFontOptions] options 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_get_font_options, :cairo_surface_get_font_options, [CairoSurface, CairoFontOptions], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_flush(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_flush, :cairo_surface_flush, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_mark_dirty(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_mark_dirty, :cairo_surface_mark_dirty, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_mark_dirty_rectangle(surface, x, y, width, height)
  # @param [CairoSurface] surface 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_mark_dirty_rectangle, :cairo_surface_mark_dirty_rectangle, [CairoSurface, :int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_set_device_offset(surface, x_offset, y_offset)
  # @param [CairoSurface] surface 
  # @param [Float] x_offset 
  # @param [Float] y_offset 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_set_device_offset, :cairo_surface_set_device_offset, [CairoSurface, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_get_device_offset(surface, x_offset, y_offset)
  # @param [CairoSurface] surface 
  # @param [FFI::Pointer(*Double)] x_offset 
  # @param [FFI::Pointer(*Double)] y_offset 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_get_device_offset, :cairo_surface_get_device_offset, [CairoSurface, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_set_fallback_resolution(surface, x_pixels_per_inch, y_pixels_per_inch)
  # @param [CairoSurface] surface 
  # @param [Float] x_pixels_per_inch 
  # @param [Float] y_pixels_per_inch 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_set_fallback_resolution, :cairo_surface_set_fallback_resolution, [CairoSurface, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_get_fallback_resolution(surface, x_pixels_per_inch, y_pixels_per_inch)
  # @param [CairoSurface] surface 
  # @param [FFI::Pointer(*Double)] x_pixels_per_inch 
  # @param [FFI::Pointer(*Double)] y_pixels_per_inch 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_get_fallback_resolution, :cairo_surface_get_fallback_resolution, [CairoSurface, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_copy_page(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_copy_page, :cairo_surface_copy_page, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_show_page(surface)
  # @param [CairoSurface] surface 
  # @return [nil] 
  # @scope class
  attach_function :cairo_surface_show_page, :cairo_surface_show_page, [CairoSurface], :void
  
  # (Not documented)
  # 
  # @method cairo_surface_has_show_text_glyphs(surface)
  # @param [CairoSurface] surface 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_surface_has_show_text_glyphs, :cairo_surface_has_show_text_glyphs, [CairoSurface], :int
  
  # cairo_format_t:
  # @CAIRO_FORMAT_INVALID: no such format exists or is supported.
  # @CAIRO_FORMAT_ARGB32: each pixel is a 32-bit quantity, with
  #   alpha in the upper 8 bits, then red, then green, then blue.
  #   The 32-bit quantities are stored native-endian. Pre-multiplied
  #   alpha is used. (That is, 50% transparent red is 0x80800000,
  #   not 0x80ff0000.)
  # @CAIRO_FORMAT_RGB24: each pixel is a 32-bit quantity, with
  #   the upper 8 bits unused. Red, Green, and Blue are stored
  #   in the remaining 24 bits in that order.
  # @CAIRO_FORMAT_A8: each pixel is a 8-bit quantity holding
  #   an alpha value.
  # @CAIRO_FORMAT_A1: each pixel is a 1-bit quantity holding
  #   an alpha value. Pixels are packed together into 32-bit
  #   quantities. The ordering of the bits matches the
  #   endianess of the platform. On a big-endian machine, the
  #   first pixel is in the uppermost bit, on a little-endian
  #   machine the first pixel is in the least-significant bit.
  # @CAIRO_FORMAT_RGB16_565: each pixel is a 16-bit quantity
  #   with red in the upper 5 bits, then green in the middle
  #   6 bits, and blue in the lower 5 bits.
  # 
  # #cairo_format_t is used to identify the memory format of
  # image data.
  # 
  # New entries may be added in future versions.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_format).</em>
  # 
  # === Options:
  # :argb32 ::
  #   
  # :rgb24 ::
  #   
  # :a8 ::
  #   
  # :a1 ::
  #   
  # :rgb16_565 ::
  #   
  # 
  # @method _enum_cairo_format_
  # @return [Symbol]
  # @scope class
  enum :cairo_format, [
    :argb32, 0,
    :rgb24, 1,
    :a8, 2,
    :a1, 3,
    :rgb16_565, 4
  ]
  
  # cairo_format_t:
  # @CAIRO_FORMAT_INVALID: no such format exists or is supported.
  # @CAIRO_FORMAT_ARGB32: each pixel is a 32-bit quantity, with
  #   alpha in the upper 8 bits, then red, then green, then blue.
  #   The 32-bit quantities are stored native-endian. Pre-multiplied
  #   alpha is used. (That is, 50% transparent red is 0x80800000,
  #   not 0x80ff0000.)
  # @CAIRO_FORMAT_RGB24: each pixel is a 32-bit quantity, with
  #   the upper 8 bits unused. Red, Green, and Blue are stored
  #   in the remaining 24 bits in that order.
  # @CAIRO_FORMAT_A8: each pixel is a 8-bit quantity holding
  #   an alpha value.
  # @CAIRO_FORMAT_A1: each pixel is a 1-bit quantity holding
  #   an alpha value. Pixels are packed together into 32-bit
  #   quantities. The ordering of the bits matches the
  #   endianess of the platform. On a big-endian machine, the
  #   first pixel is in the uppermost bit, on a little-endian
  #   machine the first pixel is in the least-significant bit.
  # @CAIRO_FORMAT_RGB16_565: each pixel is a 16-bit quantity
  #   with red in the upper 5 bits, then green in the middle
  #   6 bits, and blue in the lower 5 bits.
  # 
  # #cairo_format_t is used to identify the memory format of
  # image data.
  # 
  # New entries may be added in future versions.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_format_t).</em>
  # 
  # === Options:
  # :argb32 ::
  #   
  # :rgb24 ::
  #   
  # :a8 ::
  #   
  # :a1 ::
  #   
  # :rgb16_565 ::
  #   
  # 
  # @method _enum_cairo_format_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_format_t, [
    :argb32, 0,
    :rgb24, 1,
    :a8, 2,
    :a1, 3,
    :rgb16_565, 4
  ]
  
  # (Not documented)
  # 
  # @method cairo_image_surface_create(format, width, height)
  # @param [Symbol from _enum_cairo_format_t_] format 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_image_surface_create, :cairo_image_surface_create, [:cairo_format_t, :int, :int], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_format_stride_for_width(format, width)
  # @param [Symbol from _enum_cairo_format_t_] format 
  # @param [Integer] width 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_format_stride_for_width, :cairo_format_stride_for_width, [:cairo_format_t, :int], :int
  
  # (Not documented)
  # 
  # @method cairo_image_surface_create_for_data(data, format, width, height, stride)
  # @param [FFI::Pointer(*UChar)] data 
  # @param [Symbol from _enum_cairo_format_t_] format 
  # @param [Integer] width 
  # @param [Integer] height 
  # @param [Integer] stride 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_image_surface_create_for_data, :cairo_image_surface_create_for_data, [:pointer, :cairo_format_t, :int, :int, :int], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_image_surface_get_data(surface)
  # @param [CairoSurface] surface 
  # @return [FFI::Pointer(*UChar)] 
  # @scope class
  attach_function :cairo_image_surface_get_data, :cairo_image_surface_get_data, [CairoSurface], :pointer
  
  # (Not documented)
  # 
  # @method cairo_image_surface_get_format(surface)
  # @param [CairoSurface] surface 
  # @return [Symbol from _enum_cairo_format_t_] 
  # @scope class
  attach_function :cairo_image_surface_get_format, :cairo_image_surface_get_format, [CairoSurface], :cairo_format_t
  
  # (Not documented)
  # 
  # @method cairo_image_surface_get_width(surface)
  # @param [CairoSurface] surface 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_image_surface_get_width, :cairo_image_surface_get_width, [CairoSurface], :int
  
  # (Not documented)
  # 
  # @method cairo_image_surface_get_height(surface)
  # @param [CairoSurface] surface 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_image_surface_get_height, :cairo_image_surface_get_height, [CairoSurface], :int
  
  # (Not documented)
  # 
  # @method cairo_image_surface_get_stride(surface)
  # @param [CairoSurface] surface 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_image_surface_get_stride, :cairo_image_surface_get_stride, [CairoSurface], :int
  
  # (Not documented)
  # 
  # @method cairo_image_surface_create_from_png(filename)
  # @param [String] filename 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_image_surface_create_from_png, :cairo_image_surface_create_from_png, [:string], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_image_surface_create_from_png_stream(read_func, closure)
  # @param [Proc(_callback_cairo_read_func_t_)] read_func 
  # @param [FFI::Pointer(*Void)] closure 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_image_surface_create_from_png_stream, :cairo_image_surface_create_from_png_stream, [:cairo_read_func_t, :pointer], CairoSurface
  
  # Recording-surface functions
  # 
  # @method cairo_recording_surface_create(content, extents)
  # @param [Symbol from _enum_cairo_content_t_] content 
  # @param [CairoRectangle] extents 
  # @return [CairoSurface] 
  # @scope class
  attach_function :cairo_recording_surface_create, :cairo_recording_surface_create, [:cairo_content_t, CairoRectangle], CairoSurface
  
  # (Not documented)
  # 
  # @method cairo_recording_surface_ink_extents(surface, x0, y0, width, height)
  # @param [CairoSurface] surface 
  # @param [FFI::Pointer(*Double)] x0 
  # @param [FFI::Pointer(*Double)] y0 
  # @param [FFI::Pointer(*Double)] width 
  # @param [FFI::Pointer(*Double)] height 
  # @return [nil] 
  # @scope class
  attach_function :cairo_recording_surface_ink_extents, :cairo_recording_surface_ink_extents, [CairoSurface, :pointer, :pointer, :pointer, :pointer], :void
  
  # Pattern creation functions
  # 
  # @method cairo_pattern_create_rgb(red, green, blue)
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pattern_create_rgb, :cairo_pattern_create_rgb, [:double, :double, :double], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pattern_create_rgba(red, green, blue, alpha)
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @param [Float] alpha 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pattern_create_rgba, :cairo_pattern_create_rgba, [:double, :double, :double, :double], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pattern_create_for_surface(surface)
  # @param [CairoSurface] surface 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pattern_create_for_surface, :cairo_pattern_create_for_surface, [CairoSurface], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pattern_create_linear(x0, y0, x1, y1)
  # @param [Float] x0 
  # @param [Float] y0 
  # @param [Float] x1 
  # @param [Float] y1 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pattern_create_linear, :cairo_pattern_create_linear, [:double, :double, :double, :double], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pattern_create_radial(cx0, cy0, radius0, cx1, cy1, radius1)
  # @param [Float] cx0 
  # @param [Float] cy0 
  # @param [Float] radius0 
  # @param [Float] cx1 
  # @param [Float] cy1 
  # @param [Float] radius1 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pattern_create_radial, :cairo_pattern_create_radial, [:double, :double, :double, :double, :double, :double], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pattern_reference(pattern)
  # @param [CairoPattern] pattern 
  # @return [CairoPattern] 
  # @scope class
  attach_function :cairo_pattern_reference, :cairo_pattern_reference, [CairoPattern], CairoPattern
  
  # (Not documented)
  # 
  # @method cairo_pattern_destroy(pattern)
  # @param [CairoPattern] pattern 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_destroy, :cairo_pattern_destroy, [CairoPattern], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_reference_count(pattern)
  # @param [CairoPattern] pattern 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_pattern_get_reference_count, :cairo_pattern_get_reference_count, [CairoPattern], :uint
  
  # (Not documented)
  # 
  # @method cairo_pattern_status(pattern)
  # @param [CairoPattern] pattern 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_pattern_status, :cairo_pattern_status, [CairoPattern], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_user_data(pattern, key)
  # @param [CairoPattern] pattern 
  # @param [CairoUserDataKey] key 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :cairo_pattern_get_user_data, :cairo_pattern_get_user_data, [CairoPattern, CairoUserDataKey], :pointer
  
  # (Not documented)
  # 
  # @method cairo_pattern_set_user_data(pattern, key, user_data, destroy)
  # @param [CairoPattern] pattern 
  # @param [CairoUserDataKey] key 
  # @param [FFI::Pointer(*Void)] user_data 
  # @param [FFI::Pointer(CairoDestroyFuncT)] destroy 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_pattern_set_user_data, :cairo_pattern_set_user_data, [CairoPattern, CairoUserDataKey, :pointer, :pointer], :cairo_status_t
  
  # cairo_pattern_type_t:
  # @CAIRO_PATTERN_TYPE_SOLID: The pattern is a solid (uniform)
  # color. It may be opaque or translucent.
  # @CAIRO_PATTERN_TYPE_SURFACE: The pattern is a based on a surface (an image).
  # @CAIRO_PATTERN_TYPE_LINEAR: The pattern is a linear gradient.
  # @CAIRO_PATTERN_TYPE_RADIAL: The pattern is a radial gradient.
  # 
  # #cairo_pattern_type_t is used to describe the type of a given pattern.
  # 
  # The type of a pattern is determined by the function used to create
  # it. The cairo_pattern_create_rgb() and cairo_pattern_create_rgba()
  # functions create SOLID patterns. The remaining
  # cairo_pattern_create<!-- --> functions map to pattern types in obvious
  # ways.
  # 
  # The pattern type can be queried with cairo_pattern_get_type()
  # 
  # Most #cairo_pattern_t functions can be called with a pattern of any
  # type, (though trying to change the extend or filter for a solid
  # pattern will have no effect). A notable exception is
  # cairo_pattern_add_color_stop_rgb() and
  # cairo_pattern_add_color_stop_rgba() which must only be called with
  # gradient patterns (either LINEAR or RADIAL). Otherwise the pattern
  # will be shutdown and put into an error state.
  # 
  # New entries may be added in future versions.
  # 
  # Since: 1.2
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_pattern_type).</em>
  # 
  # === Options:
  # :solid ::
  #   
  # :surface ::
  #   
  # :linear ::
  #   
  # :radial ::
  #   
  # 
  # @method _enum_cairo_pattern_type_
  # @return [Symbol]
  # @scope class
  enum :cairo_pattern_type, [
    :solid,
    :surface,
    :linear,
    :radial
  ]
  
  # cairo_pattern_type_t:
  # @CAIRO_PATTERN_TYPE_SOLID: The pattern is a solid (uniform)
  # color. It may be opaque or translucent.
  # @CAIRO_PATTERN_TYPE_SURFACE: The pattern is a based on a surface (an image).
  # @CAIRO_PATTERN_TYPE_LINEAR: The pattern is a linear gradient.
  # @CAIRO_PATTERN_TYPE_RADIAL: The pattern is a radial gradient.
  # 
  # #cairo_pattern_type_t is used to describe the type of a given pattern.
  # 
  # The type of a pattern is determined by the function used to create
  # it. The cairo_pattern_create_rgb() and cairo_pattern_create_rgba()
  # functions create SOLID patterns. The remaining
  # cairo_pattern_create<!-- --> functions map to pattern types in obvious
  # ways.
  # 
  # The pattern type can be queried with cairo_pattern_get_type()
  # 
  # Most #cairo_pattern_t functions can be called with a pattern of any
  # type, (though trying to change the extend or filter for a solid
  # pattern will have no effect). A notable exception is
  # cairo_pattern_add_color_stop_rgb() and
  # cairo_pattern_add_color_stop_rgba() which must only be called with
  # gradient patterns (either LINEAR or RADIAL). Otherwise the pattern
  # will be shutdown and put into an error state.
  # 
  # New entries may be added in future versions.
  # 
  # Since: 1.2
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_pattern_type_t).</em>
  # 
  # === Options:
  # :solid ::
  #   
  # :surface ::
  #   
  # :linear ::
  #   
  # :radial ::
  #   
  # 
  # @method _enum_cairo_pattern_type_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_pattern_type_t, [
    :solid,
    :surface,
    :linear,
    :radial
  ]
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_type(pattern)
  # @param [CairoPattern] pattern 
  # @return [Symbol from _enum_cairo_pattern_type_t_] 
  # @scope class
  attach_function :cairo_pattern_get_type, :cairo_pattern_get_type, [CairoPattern], :cairo_pattern_type_t
  
  # (Not documented)
  # 
  # @method cairo_pattern_add_color_stop_rgb(pattern, offset, red, green, blue)
  # @param [CairoPattern] pattern 
  # @param [Float] offset 
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_add_color_stop_rgb, :cairo_pattern_add_color_stop_rgb, [CairoPattern, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_add_color_stop_rgba(pattern, offset, red, green, blue, alpha)
  # @param [CairoPattern] pattern 
  # @param [Float] offset 
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @param [Float] alpha 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_add_color_stop_rgba, :cairo_pattern_add_color_stop_rgba, [CairoPattern, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_set_matrix(pattern, matrix)
  # @param [CairoPattern] pattern 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_set_matrix, :cairo_pattern_set_matrix, [CairoPattern, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_matrix(pattern, matrix)
  # @param [CairoPattern] pattern 
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_get_matrix, :cairo_pattern_get_matrix, [CairoPattern, CairoMatrix], :void
  
  # cairo_extend_t:
  # @CAIRO_EXTEND_NONE: pixels outside of the source pattern
  #   are fully transparent
  # @CAIRO_EXTEND_REPEAT: the pattern is tiled by repeating
  # @CAIRO_EXTEND_REFLECT: the pattern is tiled by reflecting
  #   at the edges (Implemented for surface patterns since 1.6)
  # @CAIRO_EXTEND_PAD: pixels outside of the pattern copy
  #   the closest pixel from the source (Since 1.2; but only
  #   implemented for surface patterns since 1.6)
  # 
  # #cairo_extend_t is used to describe how pattern color/alpha will be
  # determined for areas "outside" the pattern's natural area, (for
  # example, outside the surface bounds or outside the gradient
  # geometry).
  # 
  # The default extend mode is %CAIRO_EXTEND_NONE for surface patterns
  # and %CAIRO_EXTEND_PAD for gradient patterns.
  # 
  # New entries may be added in future versions.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_extend).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :repeat ::
  #   
  # :reflect ::
  #   
  # :pad ::
  #   
  # 
  # @method _enum_cairo_extend_
  # @return [Symbol]
  # @scope class
  enum :cairo_extend, [
    :none,
    :repeat,
    :reflect,
    :pad
  ]
  
  # cairo_extend_t:
  # @CAIRO_EXTEND_NONE: pixels outside of the source pattern
  #   are fully transparent
  # @CAIRO_EXTEND_REPEAT: the pattern is tiled by repeating
  # @CAIRO_EXTEND_REFLECT: the pattern is tiled by reflecting
  #   at the edges (Implemented for surface patterns since 1.6)
  # @CAIRO_EXTEND_PAD: pixels outside of the pattern copy
  #   the closest pixel from the source (Since 1.2; but only
  #   implemented for surface patterns since 1.6)
  # 
  # #cairo_extend_t is used to describe how pattern color/alpha will be
  # determined for areas "outside" the pattern's natural area, (for
  # example, outside the surface bounds or outside the gradient
  # geometry).
  # 
  # The default extend mode is %CAIRO_EXTEND_NONE for surface patterns
  # and %CAIRO_EXTEND_PAD for gradient patterns.
  # 
  # New entries may be added in future versions.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_extend_t).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :repeat ::
  #   
  # :reflect ::
  #   
  # :pad ::
  #   
  # 
  # @method _enum_cairo_extend_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_extend_t, [
    :none,
    :repeat,
    :reflect,
    :pad
  ]
  
  # (Not documented)
  # 
  # @method cairo_pattern_set_extend(pattern, extend)
  # @param [CairoPattern] pattern 
  # @param [Symbol from _enum_cairo_extend_t_] extend 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_set_extend, :cairo_pattern_set_extend, [CairoPattern, :cairo_extend_t], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_extend(pattern)
  # @param [CairoPattern] pattern 
  # @return [Symbol from _enum_cairo_extend_t_] 
  # @scope class
  attach_function :cairo_pattern_get_extend, :cairo_pattern_get_extend, [CairoPattern], :cairo_extend_t
  
  # cairo_filter_t:
  # @CAIRO_FILTER_FAST: A high-performance filter, with quality similar
  #     to %CAIRO_FILTER_NEAREST
  # @CAIRO_FILTER_GOOD: A reasonable-performance filter, with quality
  #     similar to %CAIRO_FILTER_BILINEAR
  # @CAIRO_FILTER_BEST: The highest-quality available, performance may
  #     not be suitable for interactive use.
  # @CAIRO_FILTER_NEAREST: Nearest-neighbor filtering
  # @CAIRO_FILTER_BILINEAR: Linear interpolation in two dimensions
  # @CAIRO_FILTER_GAUSSIAN: This filter value is currently
  #     unimplemented, and should not be used in current code.
  # 
  # #cairo_filter_t is used to indicate what filtering should be
  # applied when reading pixel values from patterns. See
  # cairo_pattern_set_source() for indicating the desired filter to be
  # used with a particular pattern.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_filter).</em>
  # 
  # === Options:
  # :fast ::
  #   
  # :good ::
  #   
  # :best ::
  #   
  # :nearest ::
  #   
  # :bilinear ::
  #   
  # :gaussian ::
  #   
  # 
  # @method _enum_cairo_filter_
  # @return [Symbol]
  # @scope class
  enum :cairo_filter, [
    :fast,
    :good,
    :best,
    :nearest,
    :bilinear,
    :gaussian
  ]
  
  # cairo_filter_t:
  # @CAIRO_FILTER_FAST: A high-performance filter, with quality similar
  #     to %CAIRO_FILTER_NEAREST
  # @CAIRO_FILTER_GOOD: A reasonable-performance filter, with quality
  #     similar to %CAIRO_FILTER_BILINEAR
  # @CAIRO_FILTER_BEST: The highest-quality available, performance may
  #     not be suitable for interactive use.
  # @CAIRO_FILTER_NEAREST: Nearest-neighbor filtering
  # @CAIRO_FILTER_BILINEAR: Linear interpolation in two dimensions
  # @CAIRO_FILTER_GAUSSIAN: This filter value is currently
  #     unimplemented, and should not be used in current code.
  # 
  # #cairo_filter_t is used to indicate what filtering should be
  # applied when reading pixel values from patterns. See
  # cairo_pattern_set_source() for indicating the desired filter to be
  # used with a particular pattern.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_filter_t).</em>
  # 
  # === Options:
  # :fast ::
  #   
  # :good ::
  #   
  # :best ::
  #   
  # :nearest ::
  #   
  # :bilinear ::
  #   
  # :gaussian ::
  #   
  # 
  # @method _enum_cairo_filter_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_filter_t, [
    :fast,
    :good,
    :best,
    :nearest,
    :bilinear,
    :gaussian
  ]
  
  # (Not documented)
  # 
  # @method cairo_pattern_set_filter(pattern, filter)
  # @param [CairoPattern] pattern 
  # @param [Symbol from _enum_cairo_filter_t_] filter 
  # @return [nil] 
  # @scope class
  attach_function :cairo_pattern_set_filter, :cairo_pattern_set_filter, [CairoPattern, :cairo_filter_t], :void
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_filter(pattern)
  # @param [CairoPattern] pattern 
  # @return [Symbol from _enum_cairo_filter_t_] 
  # @scope class
  attach_function :cairo_pattern_get_filter, :cairo_pattern_get_filter, [CairoPattern], :cairo_filter_t
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_rgba(pattern, red, green, blue, alpha)
  # @param [CairoPattern] pattern 
  # @param [FFI::Pointer(*Double)] red 
  # @param [FFI::Pointer(*Double)] green 
  # @param [FFI::Pointer(*Double)] blue 
  # @param [FFI::Pointer(*Double)] alpha 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_pattern_get_rgba, :cairo_pattern_get_rgba, [CairoPattern, :pointer, :pointer, :pointer, :pointer], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_surface(pattern, surface)
  # @param [CairoPattern] pattern 
  # @param [FFI::Pointer(**CairoSurfaceT)] surface 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_pattern_get_surface, :cairo_pattern_get_surface, [CairoPattern, :pointer], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_color_stop_rgba(pattern, index, offset, red, green, blue, alpha)
  # @param [CairoPattern] pattern 
  # @param [Integer] index 
  # @param [FFI::Pointer(*Double)] offset 
  # @param [FFI::Pointer(*Double)] red 
  # @param [FFI::Pointer(*Double)] green 
  # @param [FFI::Pointer(*Double)] blue 
  # @param [FFI::Pointer(*Double)] alpha 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_pattern_get_color_stop_rgba, :cairo_pattern_get_color_stop_rgba, [CairoPattern, :int, :pointer, :pointer, :pointer, :pointer, :pointer], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_color_stop_count(pattern, count)
  # @param [CairoPattern] pattern 
  # @param [FFI::Pointer(*Int)] count 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_pattern_get_color_stop_count, :cairo_pattern_get_color_stop_count, [CairoPattern, :pointer], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_linear_points(pattern, x0, y0, x1, y1)
  # @param [CairoPattern] pattern 
  # @param [FFI::Pointer(*Double)] x0 
  # @param [FFI::Pointer(*Double)] y0 
  # @param [FFI::Pointer(*Double)] x1 
  # @param [FFI::Pointer(*Double)] y1 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_pattern_get_linear_points, :cairo_pattern_get_linear_points, [CairoPattern, :pointer, :pointer, :pointer, :pointer], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_pattern_get_radial_circles(pattern, x0, y0, r0, x1, y1, r1)
  # @param [CairoPattern] pattern 
  # @param [FFI::Pointer(*Double)] x0 
  # @param [FFI::Pointer(*Double)] y0 
  # @param [FFI::Pointer(*Double)] r0 
  # @param [FFI::Pointer(*Double)] x1 
  # @param [FFI::Pointer(*Double)] y1 
  # @param [FFI::Pointer(*Double)] r1 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_pattern_get_radial_circles, :cairo_pattern_get_radial_circles, [CairoPattern, :pointer, :pointer, :pointer, :pointer, :pointer, :pointer], :cairo_status_t
  
  # Matrix functions
  # 
  # @method cairo_matrix_init(matrix, xx, yx, xy, yy, x0, y0)
  # @param [CairoMatrix] matrix 
  # @param [Float] xx 
  # @param [Float] yx 
  # @param [Float] xy 
  # @param [Float] yy 
  # @param [Float] x0 
  # @param [Float] y0 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_init, :cairo_matrix_init, [CairoMatrix, :double, :double, :double, :double, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_init_identity(matrix)
  # @param [CairoMatrix] matrix 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_init_identity, :cairo_matrix_init_identity, [CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_init_translate(matrix, tx, ty)
  # @param [CairoMatrix] matrix 
  # @param [Float] tx 
  # @param [Float] ty 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_init_translate, :cairo_matrix_init_translate, [CairoMatrix, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_init_scale(matrix, sx, sy)
  # @param [CairoMatrix] matrix 
  # @param [Float] sx 
  # @param [Float] sy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_init_scale, :cairo_matrix_init_scale, [CairoMatrix, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_init_rotate(matrix, radians)
  # @param [CairoMatrix] matrix 
  # @param [Float] radians 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_init_rotate, :cairo_matrix_init_rotate, [CairoMatrix, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_translate(matrix, tx, ty)
  # @param [CairoMatrix] matrix 
  # @param [Float] tx 
  # @param [Float] ty 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_translate, :cairo_matrix_translate, [CairoMatrix, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_scale(matrix, sx, sy)
  # @param [CairoMatrix] matrix 
  # @param [Float] sx 
  # @param [Float] sy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_scale, :cairo_matrix_scale, [CairoMatrix, :double, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_rotate(matrix, radians)
  # @param [CairoMatrix] matrix 
  # @param [Float] radians 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_rotate, :cairo_matrix_rotate, [CairoMatrix, :double], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_invert(matrix)
  # @param [CairoMatrix] matrix 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_matrix_invert, :cairo_matrix_invert, [CairoMatrix], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_matrix_multiply(result, a, b)
  # @param [CairoMatrix] result 
  # @param [CairoMatrix] a 
  # @param [CairoMatrix] b 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_multiply, :cairo_matrix_multiply, [CairoMatrix, CairoMatrix, CairoMatrix], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_transform_distance(matrix, dx, dy)
  # @param [CairoMatrix] matrix 
  # @param [FFI::Pointer(*Double)] dx 
  # @param [FFI::Pointer(*Double)] dy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_transform_distance, :cairo_matrix_transform_distance, [CairoMatrix, :pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method cairo_matrix_transform_point(matrix, x, y)
  # @param [CairoMatrix] matrix 
  # @param [FFI::Pointer(*Double)] x 
  # @param [FFI::Pointer(*Double)] y 
  # @return [nil] 
  # @scope class
  attach_function :cairo_matrix_transform_point, :cairo_matrix_transform_point, [CairoMatrix, :pointer, :pointer], :void
  
  # cairo_region_t:
  # 
  # A #cairo_region_t represents a set of integer-aligned rectangles.
  # 
  # It allows set-theoretical operations like cairo_region_union() and
  # cairo_region_intersect() to be performed on them.
  # 
  # Memory management of #cairo_region_t is done with
  # cairo_region_reference() and cairo_region_destroy().
  # 
  # Since: 1.10
  class CairoRegion < FFI::Struct
  end
  
  # cairo_rectangle_int_t:
  # @x: X coordinate of the left side of the rectangle
  # @y: Y coordinate of the the top side of the rectangle
  # @width: width of the rectangle
  # @height: height of the rectangle
  # 
  # A data structure for holding a rectangle with integer coordinates.
  # 
  # Since: 1.10
  # 
  # = Fields:
  # :x ::
  #   (Integer) 
  # :y ::
  #   (Integer) 
  # :width ::
  #   (Integer) 
  # :height ::
  #   (Integer) 
  class CairoRectangleInt < FFI::Struct
    layout :x, :int,
           :y, :int,
           :width, :int,
           :height, :int
  end
  
  # cairo_rectangle_int_t:
  # @x: X coordinate of the left side of the rectangle
  # @y: Y coordinate of the the top side of the rectangle
  # @width: width of the rectangle
  # @height: height of the rectangle
  # 
  # A data structure for holding a rectangle with integer coordinates.
  # 
  # Since: 1.10
  # 
  # = Fields:
  # :x ::
  #   (Integer) 
  # :y ::
  #   (Integer) 
  # :width ::
  #   (Integer) 
  # :height ::
  #   (Integer) 
  class CairoRectangleIntT < FFI::Struct
    layout :x, :int,
           :y, :int,
           :width, :int,
           :height, :int
  end
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_region_overlap).</em>
  # 
  # === Options:
  # :in ::
  #   
  # :out ::
  #   completely inside region
  # :part ::
  #   completely outside region
  # 
  # @method _enum_cairo_region_overlap_
  # @return [Symbol]
  # @scope class
  enum :cairo_region_overlap, [
    :in,
    :out,
    :part
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:cairo_region_overlap_t).</em>
  # 
  # === Options:
  # :in ::
  #   
  # :out ::
  #   completely inside region
  # :part ::
  #   completely outside region
  # 
  # @method _enum_cairo_region_overlap_t_
  # @return [Symbol]
  # @scope class
  enum :cairo_region_overlap_t, [
    :in,
    :out,
    :part
  ]
  
  # (Not documented)
  # 
  # @method cairo_region_create()
  # @return [CairoRegion] 
  # @scope class
  attach_function :cairo_region_create, :cairo_region_create, [], CairoRegion
  
  # (Not documented)
  # 
  # @method cairo_region_create_rectangle(rectangle)
  # @param [CairoRectangleInt] rectangle 
  # @return [CairoRegion] 
  # @scope class
  attach_function :cairo_region_create_rectangle, :cairo_region_create_rectangle, [CairoRectangleInt], CairoRegion
  
  # (Not documented)
  # 
  # @method cairo_region_create_rectangles(rects, count)
  # @param [CairoRectangleInt] rects 
  # @param [Integer] count 
  # @return [CairoRegion] 
  # @scope class
  attach_function :cairo_region_create_rectangles, :cairo_region_create_rectangles, [CairoRectangleInt, :int], CairoRegion
  
  # (Not documented)
  # 
  # @method cairo_region_copy(original)
  # @param [CairoRegion] original 
  # @return [CairoRegion] 
  # @scope class
  attach_function :cairo_region_copy, :cairo_region_copy, [CairoRegion], CairoRegion
  
  # (Not documented)
  # 
  # @method cairo_region_reference(region)
  # @param [CairoRegion] region 
  # @return [CairoRegion] 
  # @scope class
  attach_function :cairo_region_reference, :cairo_region_reference, [CairoRegion], CairoRegion
  
  # (Not documented)
  # 
  # @method cairo_region_destroy(region)
  # @param [CairoRegion] region 
  # @return [nil] 
  # @scope class
  attach_function :cairo_region_destroy, :cairo_region_destroy, [CairoRegion], :void
  
  # (Not documented)
  # 
  # @method cairo_region_equal(a, b)
  # @param [CairoRegion] a 
  # @param [CairoRegion] b 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_region_equal, :cairo_region_equal, [CairoRegion, CairoRegion], :int
  
  # (Not documented)
  # 
  # @method cairo_region_status(region)
  # @param [CairoRegion] region 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_region_status, :cairo_region_status, [CairoRegion], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_region_get_extents(region, extents)
  # @param [CairoRegion] region 
  # @param [CairoRectangleInt] extents 
  # @return [nil] 
  # @scope class
  attach_function :cairo_region_get_extents, :cairo_region_get_extents, [CairoRegion, CairoRectangleInt], :void
  
  # (Not documented)
  # 
  # @method cairo_region_num_rectangles(region)
  # @param [CairoRegion] region 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_region_num_rectangles, :cairo_region_num_rectangles, [CairoRegion], :int
  
  # (Not documented)
  # 
  # @method cairo_region_get_rectangle(region, nth, rectangle)
  # @param [CairoRegion] region 
  # @param [Integer] nth 
  # @param [CairoRectangleInt] rectangle 
  # @return [nil] 
  # @scope class
  attach_function :cairo_region_get_rectangle, :cairo_region_get_rectangle, [CairoRegion, :int, CairoRectangleInt], :void
  
  # (Not documented)
  # 
  # @method cairo_region_is_empty(region)
  # @param [CairoRegion] region 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_region_is_empty, :cairo_region_is_empty, [CairoRegion], :int
  
  # (Not documented)
  # 
  # @method cairo_region_contains_rectangle(region, rectangle)
  # @param [CairoRegion] region 
  # @param [CairoRectangleInt] rectangle 
  # @return [Symbol from _enum_cairo_region_overlap_t_] 
  # @scope class
  attach_function :cairo_region_contains_rectangle, :cairo_region_contains_rectangle, [CairoRegion, CairoRectangleInt], :cairo_region_overlap_t
  
  # (Not documented)
  # 
  # @method cairo_region_contains_point(region, x, y)
  # @param [CairoRegion] region 
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [Integer] 
  # @scope class
  attach_function :cairo_region_contains_point, :cairo_region_contains_point, [CairoRegion, :int, :int], :int
  
  # (Not documented)
  # 
  # @method cairo_region_translate(region, dx, dy)
  # @param [CairoRegion] region 
  # @param [Integer] dx 
  # @param [Integer] dy 
  # @return [nil] 
  # @scope class
  attach_function :cairo_region_translate, :cairo_region_translate, [CairoRegion, :int, :int], :void
  
  # (Not documented)
  # 
  # @method cairo_region_subtract(dst, other)
  # @param [CairoRegion] dst 
  # @param [CairoRegion] other 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_region_subtract, :cairo_region_subtract, [CairoRegion, CairoRegion], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_region_subtract_rectangle(dst, rectangle)
  # @param [CairoRegion] dst 
  # @param [CairoRectangleInt] rectangle 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_region_subtract_rectangle, :cairo_region_subtract_rectangle, [CairoRegion, CairoRectangleInt], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_region_intersect(dst, other)
  # @param [CairoRegion] dst 
  # @param [CairoRegion] other 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_region_intersect, :cairo_region_intersect, [CairoRegion, CairoRegion], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_region_intersect_rectangle(dst, rectangle)
  # @param [CairoRegion] dst 
  # @param [CairoRectangleInt] rectangle 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_region_intersect_rectangle, :cairo_region_intersect_rectangle, [CairoRegion, CairoRectangleInt], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_region_union(dst, other)
  # @param [CairoRegion] dst 
  # @param [CairoRegion] other 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_region_union, :cairo_region_union, [CairoRegion, CairoRegion], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_region_union_rectangle(dst, rectangle)
  # @param [CairoRegion] dst 
  # @param [CairoRectangleInt] rectangle 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_region_union_rectangle, :cairo_region_union_rectangle, [CairoRegion, CairoRectangleInt], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_region_xor(dst, other)
  # @param [CairoRegion] dst 
  # @param [CairoRegion] other 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_region_xor, :cairo_region_xor, [CairoRegion, CairoRegion], :cairo_status_t
  
  # (Not documented)
  # 
  # @method cairo_region_xor_rectangle(dst, rectangle)
  # @param [CairoRegion] dst 
  # @param [CairoRectangleInt] rectangle 
  # @return [Symbol from _enum_cairo_status_t_] 
  # @scope class
  attach_function :cairo_region_xor_rectangle, :cairo_region_xor_rectangle, [CairoRegion, CairoRectangleInt], :cairo_status_t
  
  # Functions to be used while debugging (not intended for use in production code)
  # 
  # @method cairo_debug_reset_static_data()
  # @return [nil] 
  # @scope class
  attach_function :cairo_debug_reset_static_data, :cairo_debug_reset_static_data, [], :void
  
end
