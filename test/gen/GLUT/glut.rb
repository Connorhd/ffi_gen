# Generated by ffi_gen. Please do not change this file by hand.

require 'ffi'

module GLUT
  extend FFI::Library
  ffi_lib 'glut'
  
  # Initialization functions, see fglut_init.c
  # 
  # @method init(pargc, argv)
  # @param [FFI::Pointer(*Int)] pargc 
  # @param [FFI::Pointer(**Char_S)] argv 
  # @return [nil] 
  # @scope class
  attach_function :init, :glutInit, [:pointer, :pointer], :void
  
  # (Not documented)
  # 
  # @method init_window_position(x, y)
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :init_window_position, :glutInitWindowPosition, [:int, :int], :void
  
  # (Not documented)
  # 
  # @method init_window_size(width, height)
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :init_window_size, :glutInitWindowSize, [:int, :int], :void
  
  # (Not documented)
  # 
  # @method init_display_mode(display_mode)
  # @param [Integer] display_mode 
  # @return [nil] 
  # @scope class
  attach_function :init_display_mode, :glutInitDisplayMode, [:uint], :void
  
  # (Not documented)
  # 
  # @method init_display_string(display_mode)
  # @param [String] display_mode 
  # @return [nil] 
  # @scope class
  attach_function :init_display_string, :glutInitDisplayString, [:string], :void
  
  # Process loop function, see freeglut_main.c
  # 
  # @method main_loop()
  # @return [nil] 
  # @scope class
  attach_function :main_loop, :glutMainLoop, [], :void
  
  # Window management functions, see freeglut_window.c
  # 
  # @method create_window(title)
  # @param [String] title 
  # @return [Integer] 
  # @scope class
  attach_function :create_window, :glutCreateWindow, [:string], :int
  
  # (Not documented)
  # 
  # @method create_sub_window(window, x, y, width, height)
  # @param [Integer] window 
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [Integer] 
  # @scope class
  attach_function :create_sub_window, :glutCreateSubWindow, [:int, :int, :int, :int, :int], :int
  
  # (Not documented)
  # 
  # @method destroy_window(window)
  # @param [Integer] window 
  # @return [nil] 
  # @scope class
  attach_function :destroy_window, :glutDestroyWindow, [:int], :void
  
  # (Not documented)
  # 
  # @method set_window(window)
  # @param [Integer] window 
  # @return [nil] 
  # @scope class
  attach_function :set_window, :glutSetWindow, [:int], :void
  
  # (Not documented)
  # 
  # @method get_window()
  # @return [Integer] 
  # @scope class
  attach_function :get_window, :glutGetWindow, [], :int
  
  # (Not documented)
  # 
  # @method set_window_title(title)
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :set_window_title, :glutSetWindowTitle, [:string], :void
  
  # (Not documented)
  # 
  # @method set_icon_title(title)
  # @param [String] title 
  # @return [nil] 
  # @scope class
  attach_function :set_icon_title, :glutSetIconTitle, [:string], :void
  
  # (Not documented)
  # 
  # @method reshape_window(width, height)
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :reshape_window, :glutReshapeWindow, [:int, :int], :void
  
  # (Not documented)
  # 
  # @method position_window(x, y)
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :position_window, :glutPositionWindow, [:int, :int], :void
  
  # (Not documented)
  # 
  # @method show_window()
  # @return [nil] 
  # @scope class
  attach_function :show_window, :glutShowWindow, [], :void
  
  # (Not documented)
  # 
  # @method hide_window()
  # @return [nil] 
  # @scope class
  attach_function :hide_window, :glutHideWindow, [], :void
  
  # (Not documented)
  # 
  # @method iconify_window()
  # @return [nil] 
  # @scope class
  attach_function :iconify_window, :glutIconifyWindow, [], :void
  
  # (Not documented)
  # 
  # @method push_window()
  # @return [nil] 
  # @scope class
  attach_function :push_window, :glutPushWindow, [], :void
  
  # (Not documented)
  # 
  # @method pop_window()
  # @return [nil] 
  # @scope class
  attach_function :pop_window, :glutPopWindow, [], :void
  
  # (Not documented)
  # 
  # @method full_screen()
  # @return [nil] 
  # @scope class
  attach_function :full_screen, :glutFullScreen, [], :void
  
  # Display-connected functions, see freeglut_display.c
  # 
  # @method post_window_redisplay(window)
  # @param [Integer] window 
  # @return [nil] 
  # @scope class
  attach_function :post_window_redisplay, :glutPostWindowRedisplay, [:int], :void
  
  # (Not documented)
  # 
  # @method post_redisplay()
  # @return [nil] 
  # @scope class
  attach_function :post_redisplay, :glutPostRedisplay, [], :void
  
  # (Not documented)
  # 
  # @method swap_buffers()
  # @return [nil] 
  # @scope class
  attach_function :swap_buffers, :glutSwapBuffers, [], :void
  
  # Mouse cursor functions, see freeglut_cursor.c
  # 
  # @method warp_pointer(x, y)
  # @param [Integer] x 
  # @param [Integer] y 
  # @return [nil] 
  # @scope class
  attach_function :warp_pointer, :glutWarpPointer, [:int, :int], :void
  
  # (Not documented)
  # 
  # @method set_cursor(cursor)
  # @param [Integer] cursor 
  # @return [nil] 
  # @scope class
  attach_function :set_cursor, :glutSetCursor, [:int], :void
  
  # Overlay stuff, see freeglut_overlay.c
  # 
  # @method establish_overlay()
  # @return [nil] 
  # @scope class
  attach_function :establish_overlay, :glutEstablishOverlay, [], :void
  
  # (Not documented)
  # 
  # @method remove_overlay()
  # @return [nil] 
  # @scope class
  attach_function :remove_overlay, :glutRemoveOverlay, [], :void
  
  # (Not documented)
  # 
  # @method use_layer(layer)
  # @param [Integer] layer 
  # @return [nil] 
  # @scope class
  attach_function :use_layer, :glutUseLayer, [:uint], :void
  
  # (Not documented)
  # 
  # @method post_overlay_redisplay()
  # @return [nil] 
  # @scope class
  attach_function :post_overlay_redisplay, :glutPostOverlayRedisplay, [], :void
  
  # (Not documented)
  # 
  # @method post_window_overlay_redisplay(window)
  # @param [Integer] window 
  # @return [nil] 
  # @scope class
  attach_function :post_window_overlay_redisplay, :glutPostWindowOverlayRedisplay, [:int], :void
  
  # (Not documented)
  # 
  # @method show_overlay()
  # @return [nil] 
  # @scope class
  attach_function :show_overlay, :glutShowOverlay, [], :void
  
  # (Not documented)
  # 
  # @method hide_overlay()
  # @return [nil] 
  # @scope class
  attach_function :hide_overlay, :glutHideOverlay, [], :void
  
  # Menu stuff, see freeglut_menu.c
  # 
  # @method create_menu(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [Integer] 
  # @scope class
  attach_function :create_menu, :glutCreateMenu, [:pointer], :int
  
  # (Not documented)
  # 
  # @method destroy_menu(menu)
  # @param [Integer] menu 
  # @return [nil] 
  # @scope class
  attach_function :destroy_menu, :glutDestroyMenu, [:int], :void
  
  # (Not documented)
  # 
  # @method get_menu()
  # @return [Integer] 
  # @scope class
  attach_function :get_menu, :glutGetMenu, [], :int
  
  # (Not documented)
  # 
  # @method set_menu(menu)
  # @param [Integer] menu 
  # @return [nil] 
  # @scope class
  attach_function :set_menu, :glutSetMenu, [:int], :void
  
  # (Not documented)
  # 
  # @method add_menu_entry(label, value)
  # @param [String] label 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :add_menu_entry, :glutAddMenuEntry, [:string, :int], :void
  
  # (Not documented)
  # 
  # @method add_sub_menu(label, sub_menu)
  # @param [String] label 
  # @param [Integer] sub_menu 
  # @return [nil] 
  # @scope class
  attach_function :add_sub_menu, :glutAddSubMenu, [:string, :int], :void
  
  # (Not documented)
  # 
  # @method change_to_menu_entry(item, label, value)
  # @param [Integer] item 
  # @param [String] label 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :change_to_menu_entry, :glutChangeToMenuEntry, [:int, :string, :int], :void
  
  # (Not documented)
  # 
  # @method change_to_sub_menu(item, label, value)
  # @param [Integer] item 
  # @param [String] label 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :change_to_sub_menu, :glutChangeToSubMenu, [:int, :string, :int], :void
  
  # (Not documented)
  # 
  # @method remove_menu_item(item)
  # @param [Integer] item 
  # @return [nil] 
  # @scope class
  attach_function :remove_menu_item, :glutRemoveMenuItem, [:int], :void
  
  # (Not documented)
  # 
  # @method attach_menu(button)
  # @param [Integer] button 
  # @return [nil] 
  # @scope class
  attach_function :attach_menu, :glutAttachMenu, [:int], :void
  
  # (Not documented)
  # 
  # @method detach_menu(button)
  # @param [Integer] button 
  # @return [nil] 
  # @scope class
  attach_function :detach_menu, :glutDetachMenu, [:int], :void
  
  # Global callback functions, see freeglut_callbacks.c
  # 
  # @method timer_func(time, callback, value)
  # @param [Integer] time 
  # @param [FFI::Pointer(*)] callback 
  # @param [Integer] value 
  # @return [nil] 
  # @scope class
  attach_function :timer_func, :glutTimerFunc, [:uint, :pointer, :int], :void
  
  # (Not documented)
  # 
  # @method idle_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :idle_func, :glutIdleFunc, [:pointer], :void
  
  # Window-specific callback functions, see freeglut_callbacks.c
  # 
  # @method keyboard_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :keyboard_func, :glutKeyboardFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method special_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :special_func, :glutSpecialFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method reshape_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :reshape_func, :glutReshapeFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method visibility_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :visibility_func, :glutVisibilityFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method display_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :display_func, :glutDisplayFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method mouse_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :mouse_func, :glutMouseFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method motion_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :motion_func, :glutMotionFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method passive_motion_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :passive_motion_func, :glutPassiveMotionFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method entry_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :entry_func, :glutEntryFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method keyboard_up_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :keyboard_up_func, :glutKeyboardUpFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method special_up_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :special_up_func, :glutSpecialUpFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method joystick_func(callback, poll_interval)
  # @param [FFI::Pointer(*)] callback 
  # @param [Integer] poll_interval 
  # @return [nil] 
  # @scope class
  attach_function :joystick_func, :glutJoystickFunc, [:pointer, :int], :void
  
  # (Not documented)
  # 
  # @method menu_state_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :menu_state_func, :glutMenuStateFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method menu_status_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :menu_status_func, :glutMenuStatusFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method overlay_display_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :overlay_display_func, :glutOverlayDisplayFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method window_status_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :window_status_func, :glutWindowStatusFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method spaceball_motion_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :spaceball_motion_func, :glutSpaceballMotionFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method spaceball_rotate_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :spaceball_rotate_func, :glutSpaceballRotateFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method spaceball_button_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :spaceball_button_func, :glutSpaceballButtonFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method button_box_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :button_box_func, :glutButtonBoxFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method dials_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :dials_func, :glutDialsFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tablet_motion_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :tablet_motion_func, :glutTabletMotionFunc, [:pointer], :void
  
  # (Not documented)
  # 
  # @method tablet_button_func(callback)
  # @param [FFI::Pointer(*)] callback 
  # @return [nil] 
  # @scope class
  attach_function :tablet_button_func, :glutTabletButtonFunc, [:pointer], :void
  
  # State setting and retrieval functions, see freeglut_state.c
  # 
  # @method get(query)
  # @param [Integer] query 
  # @return [Integer] 
  # @scope class
  attach_function :get, :glutGet, [:uint], :int
  
  # (Not documented)
  # 
  # @method device_get(query)
  # @param [Integer] query 
  # @return [Integer] 
  # @scope class
  attach_function :device_get, :glutDeviceGet, [:uint], :int
  
  # (Not documented)
  # 
  # @method get_modifiers()
  # @return [Integer] 
  # @scope class
  attach_function :get_modifiers, :glutGetModifiers, [], :int
  
  # (Not documented)
  # 
  # @method layer_get(query)
  # @param [Integer] query 
  # @return [Integer] 
  # @scope class
  attach_function :layer_get, :glutLayerGet, [:uint], :int
  
  # Font stuff, see freeglut_font.c
  # 
  # @method bitmap_character(font, character)
  # @param [FFI::Pointer(*Void)] font 
  # @param [Integer] character 
  # @return [nil] 
  # @scope class
  attach_function :bitmap_character, :glutBitmapCharacter, [:pointer, :int], :void
  
  # (Not documented)
  # 
  # @method bitmap_width(font, character)
  # @param [FFI::Pointer(*Void)] font 
  # @param [Integer] character 
  # @return [Integer] 
  # @scope class
  attach_function :bitmap_width, :glutBitmapWidth, [:pointer, :int], :int
  
  # (Not documented)
  # 
  # @method stroke_character(font, character)
  # @param [FFI::Pointer(*Void)] font 
  # @param [Integer] character 
  # @return [nil] 
  # @scope class
  attach_function :stroke_character, :glutStrokeCharacter, [:pointer, :int], :void
  
  # (Not documented)
  # 
  # @method stroke_width(font, character)
  # @param [FFI::Pointer(*Void)] font 
  # @param [Integer] character 
  # @return [Integer] 
  # @scope class
  attach_function :stroke_width, :glutStrokeWidth, [:pointer, :int], :int
  
  # (Not documented)
  # 
  # @method bitmap_length(font, string)
  # @param [FFI::Pointer(*Void)] font 
  # @param [FFI::Pointer(*UChar)] string 
  # @return [Integer] 
  # @scope class
  attach_function :bitmap_length, :glutBitmapLength, [:pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method stroke_length(font, string)
  # @param [FFI::Pointer(*Void)] font 
  # @param [FFI::Pointer(*UChar)] string 
  # @return [Integer] 
  # @scope class
  attach_function :stroke_length, :glutStrokeLength, [:pointer, :pointer], :int
  
  # Geometry functions, see freeglut_geometry.c
  # 
  # @method wire_cube(size)
  # @param [Float] size 
  # @return [nil] 
  # @scope class
  attach_function :wire_cube, :glutWireCube, [:double], :void
  
  # (Not documented)
  # 
  # @method solid_cube(size)
  # @param [Float] size 
  # @return [nil] 
  # @scope class
  attach_function :solid_cube, :glutSolidCube, [:double], :void
  
  # (Not documented)
  # 
  # @method wire_sphere(radius, slices, stacks)
  # @param [Float] radius 
  # @param [Integer] slices 
  # @param [Integer] stacks 
  # @return [nil] 
  # @scope class
  attach_function :wire_sphere, :glutWireSphere, [:double, :int, :int], :void
  
  # (Not documented)
  # 
  # @method solid_sphere(radius, slices, stacks)
  # @param [Float] radius 
  # @param [Integer] slices 
  # @param [Integer] stacks 
  # @return [nil] 
  # @scope class
  attach_function :solid_sphere, :glutSolidSphere, [:double, :int, :int], :void
  
  # (Not documented)
  # 
  # @method wire_cone(base, height, slices, stacks)
  # @param [Float] base 
  # @param [Float] height 
  # @param [Integer] slices 
  # @param [Integer] stacks 
  # @return [nil] 
  # @scope class
  attach_function :wire_cone, :glutWireCone, [:double, :double, :int, :int], :void
  
  # (Not documented)
  # 
  # @method solid_cone(base, height, slices, stacks)
  # @param [Float] base 
  # @param [Float] height 
  # @param [Integer] slices 
  # @param [Integer] stacks 
  # @return [nil] 
  # @scope class
  attach_function :solid_cone, :glutSolidCone, [:double, :double, :int, :int], :void
  
  # (Not documented)
  # 
  # @method wire_torus(inner_radius, outer_radius, sides, rings)
  # @param [Float] inner_radius 
  # @param [Float] outer_radius 
  # @param [Integer] sides 
  # @param [Integer] rings 
  # @return [nil] 
  # @scope class
  attach_function :wire_torus, :glutWireTorus, [:double, :double, :int, :int], :void
  
  # (Not documented)
  # 
  # @method solid_torus(inner_radius, outer_radius, sides, rings)
  # @param [Float] inner_radius 
  # @param [Float] outer_radius 
  # @param [Integer] sides 
  # @param [Integer] rings 
  # @return [nil] 
  # @scope class
  attach_function :solid_torus, :glutSolidTorus, [:double, :double, :int, :int], :void
  
  # (Not documented)
  # 
  # @method wire_dodecahedron()
  # @return [nil] 
  # @scope class
  attach_function :wire_dodecahedron, :glutWireDodecahedron, [], :void
  
  # (Not documented)
  # 
  # @method solid_dodecahedron()
  # @return [nil] 
  # @scope class
  attach_function :solid_dodecahedron, :glutSolidDodecahedron, [], :void
  
  # (Not documented)
  # 
  # @method wire_octahedron()
  # @return [nil] 
  # @scope class
  attach_function :wire_octahedron, :glutWireOctahedron, [], :void
  
  # (Not documented)
  # 
  # @method solid_octahedron()
  # @return [nil] 
  # @scope class
  attach_function :solid_octahedron, :glutSolidOctahedron, [], :void
  
  # (Not documented)
  # 
  # @method wire_tetrahedron()
  # @return [nil] 
  # @scope class
  attach_function :wire_tetrahedron, :glutWireTetrahedron, [], :void
  
  # (Not documented)
  # 
  # @method solid_tetrahedron()
  # @return [nil] 
  # @scope class
  attach_function :solid_tetrahedron, :glutSolidTetrahedron, [], :void
  
  # (Not documented)
  # 
  # @method wire_icosahedron()
  # @return [nil] 
  # @scope class
  attach_function :wire_icosahedron, :glutWireIcosahedron, [], :void
  
  # (Not documented)
  # 
  # @method solid_icosahedron()
  # @return [nil] 
  # @scope class
  attach_function :solid_icosahedron, :glutSolidIcosahedron, [], :void
  
  # Teapot rendering functions, found in freeglut_teapot.c
  # 
  # @method wire_teapot(size)
  # @param [Float] size 
  # @return [nil] 
  # @scope class
  attach_function :wire_teapot, :glutWireTeapot, [:double], :void
  
  # (Not documented)
  # 
  # @method solid_teapot(size)
  # @param [Float] size 
  # @return [nil] 
  # @scope class
  attach_function :solid_teapot, :glutSolidTeapot, [:double], :void
  
  # Game mode functions, see freeglut_gamemode.c
  # 
  # @method game_mode_string(string)
  # @param [String] string 
  # @return [nil] 
  # @scope class
  attach_function :game_mode_string, :glutGameModeString, [:string], :void
  
  # (Not documented)
  # 
  # @method enter_game_mode()
  # @return [Integer] 
  # @scope class
  attach_function :enter_game_mode, :glutEnterGameMode, [], :int
  
  # (Not documented)
  # 
  # @method leave_game_mode()
  # @return [nil] 
  # @scope class
  attach_function :leave_game_mode, :glutLeaveGameMode, [], :void
  
  # (Not documented)
  # 
  # @method game_mode_get(query)
  # @param [Integer] query 
  # @return [Integer] 
  # @scope class
  attach_function :game_mode_get, :glutGameModeGet, [:uint], :int
  
  # Video resize functions, see freeglut_videoresize.c
  # 
  # @method video_resize_get(query)
  # @param [Integer] query 
  # @return [Integer] 
  # @scope class
  attach_function :video_resize_get, :glutVideoResizeGet, [:uint], :int
  
  # (Not documented)
  # 
  # @method setup_video_resizing()
  # @return [nil] 
  # @scope class
  attach_function :setup_video_resizing, :glutSetupVideoResizing, [], :void
  
  # (Not documented)
  # 
  # @method stop_video_resizing()
  # @return [nil] 
  # @scope class
  attach_function :stop_video_resizing, :glutStopVideoResizing, [], :void
  
  # (Not documented)
  # 
  # @method video_resize(x, y, width, height)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :video_resize, :glutVideoResize, [:int, :int, :int, :int], :void
  
  # (Not documented)
  # 
  # @method video_pan(x, y, width, height)
  # @param [Integer] x 
  # @param [Integer] y 
  # @param [Integer] width 
  # @param [Integer] height 
  # @return [nil] 
  # @scope class
  attach_function :video_pan, :glutVideoPan, [:int, :int, :int, :int], :void
  
  # Colormap functions, see freeglut_misc.c
  # 
  # @method set_color(color, red, green, blue)
  # @param [Integer] color 
  # @param [Float] red 
  # @param [Float] green 
  # @param [Float] blue 
  # @return [nil] 
  # @scope class
  attach_function :set_color, :glutSetColor, [:int, :float, :float, :float], :void
  
  # (Not documented)
  # 
  # @method get_color(color, component)
  # @param [Integer] color 
  # @param [Integer] component 
  # @return [Float] 
  # @scope class
  attach_function :get_color, :glutGetColor, [:int, :int], :float
  
  # (Not documented)
  # 
  # @method copy_colormap(window)
  # @param [Integer] window 
  # @return [nil] 
  # @scope class
  attach_function :copy_colormap, :glutCopyColormap, [:int], :void
  
  # Misc keyboard and joystick functions, see freeglut_misc.c
  # 
  # @method ignore_key_repeat(ignore)
  # @param [Integer] ignore 
  # @return [nil] 
  # @scope class
  attach_function :ignore_key_repeat, :glutIgnoreKeyRepeat, [:int], :void
  
  # (Not documented)
  # 
  # @method set_key_repeat(repeat_mode)
  # @param [Integer] repeat_mode 
  # @return [nil] 
  # @scope class
  attach_function :set_key_repeat, :glutSetKeyRepeat, [:int], :void
  
  # (Not documented)
  # 
  # @method force_joystick_func()
  # @return [nil] 
  # @scope class
  attach_function :force_joystick_func, :glutForceJoystickFunc, [], :void
  
  # Misc functions, see freeglut_misc.c
  # 
  # @method extension_supported(extension)
  # @param [String] extension 
  # @return [Integer] 
  # @scope class
  attach_function :extension_supported, :glutExtensionSupported, [:string], :int
  
  # (Not documented)
  # 
  # @method report_errors()
  # @return [nil] 
  # @scope class
  attach_function :report_errors, :glutReportErrors, [], :void
  
end
