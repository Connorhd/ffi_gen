# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module LLVM
  extend FFI::Library
  ffi_lib 'LLVM-3.0'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  LTO_H = 1
  
  LTO_API_VERSION = 4
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:lto_symbol_attributes).</em>
  # 
  # === Options:
  # :alignment_mask ::
  #   
  # :permissions_mask ::
  #   log2 of alignment
  # :permissions_code ::
  #   
  # :permissions_data ::
  #   
  # :permissions_rodata ::
  #   
  # :definition_mask ::
  #   
  # :definition_regular ::
  #   
  # :definition_tentative ::
  #   
  # :definition_weak ::
  #   
  # :definition_undefined ::
  #   
  # :definition_weakundef ::
  #   
  # :scope_mask ::
  #   
  # :scope_internal ::
  #   
  # :scope_hidden ::
  #   
  # :scope_protected ::
  #   
  # :scope_default ::
  #   
  # :scope_default_can_be_hidden ::
  #   
  # 
  # @method _enum_lto_symbol_attributes_
  # @return [Symbol]
  # @scope class
  enum :lto_symbol_attributes, [
    :alignment_mask, 31,
    :permissions_mask, 224,
    :permissions_code, 160,
    :permissions_data, 192,
    :permissions_rodata, 128,
    :definition_mask, 1792,
    :definition_regular, 256,
    :definition_tentative, 512,
    :definition_weak, 768,
    :definition_undefined, 1024,
    :definition_weakundef, 1280,
    :scope_mask, 14336,
    :scope_internal, 2048,
    :scope_hidden, 4096,
    :scope_protected, 8192,
    :scope_default, 6144,
    :scope_default_can_be_hidden, 10240
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:lto_debug_model).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :dwarf ::
  #   
  # 
  # @method _enum_lto_debug_model_
  # @return [Symbol]
  # @scope class
  enum :lto_debug_model, [
    :none, 0,
    :dwarf, 1
  ]
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:lto_codegen_model).</em>
  # 
  # === Options:
  # :pic_model_static ::
  #   
  # :pic_model_dynamic ::
  #   
  # :pic_model_dynamic_no_pic ::
  #   
  # 
  # @method _enum_lto_codegen_model_
  # @return [Symbol]
  # @scope class
  enum :lto_codegen_model, [
    :pic_model_static, 0,
    :pic_model_dynamic, 1,
    :pic_model_dynamic_no_pic, 2
  ]
  
  # opaque reference to a loaded object module
  module LTOModuleWrappers
    # @return [nil] 
    def dispose()
      LLVM.lto_module_dispose(self)
    end
    
    # @return [String] 
    def get_target_triple()
      LLVM.lto_module_get_target_triple(self)
    end
    
    # @param [String] triple 
    # @return [nil] 
    def set_target_triple(triple)
      LLVM.lto_module_set_target_triple(self, triple)
    end
    
    # @return [Integer] 
    def get_num_symbols()
      LLVM.lto_module_get_num_symbols(self)
    end
    
    # @param [Integer] index 
    # @return [String] 
    def get_symbol_name(index)
      LLVM.lto_module_get_symbol_name(self, index)
    end
    
    # @param [Integer] index 
    # @return [Symbol from _enum_lto_symbol_attributes_] 
    def get_symbol_attribute(index)
      LLVM.lto_module_get_symbol_attribute(self, index)
    end
  end
  
  class LTOModule < FFI::Struct
    include LTOModuleWrappers
    layout :dummy, :char
  end
  
  # opaque reference to a code generator
  class LTOCodeGenerator < FFI::Struct
    layout :dummy, :char
  end
  
  # Returns a printable string.
  # 
  # @method lto_get_version()
  # @return [String] 
  # @scope class
  attach_function :lto_get_version, :lto_get_version, [], :string
  
  # Returns the last error string or NULL if last operation was successful.
  # 
  # @method lto_get_error_message()
  # @return [String] 
  # @scope class
  attach_function :lto_get_error_message, :lto_get_error_message, [], :string
  
  # Checks if a file is a loadable object file.
  # 
  # @method lto_module_is_object_file(path)
  # @param [String] path 
  # @return [Boolean] 
  # @scope class
  attach_function :lto_module_is_object_file, :lto_module_is_object_file, [:string], :bool
  
  # Checks if a file is a loadable object compiled for requested target.
  # 
  # @method lto_module_is_object_file_for_target(path, target_triple_prefix)
  # @param [String] path 
  # @param [String] target_triple_prefix 
  # @return [Boolean] 
  # @scope class
  attach_function :lto_module_is_object_file_for_target, :lto_module_is_object_file_for_target, [:string, :string], :bool
  
  # Checks if a buffer is a loadable object file.
  # 
  # @method lto_module_is_object_file_in_memory(mem, length)
  # @param [FFI::Pointer(*Void)] mem 
  # @param [Integer] length 
  # @return [Boolean] 
  # @scope class
  attach_function :lto_module_is_object_file_in_memory, :lto_module_is_object_file_in_memory, [:pointer, :ulong], :bool
  
  # Checks if a buffer is a loadable object compiled for requested target.
  # 
  # @method lto_module_is_object_file_in_memory_for_target(mem, length, target_triple_prefix)
  # @param [FFI::Pointer(*Void)] mem 
  # @param [Integer] length 
  # @param [String] target_triple_prefix 
  # @return [Boolean] 
  # @scope class
  attach_function :lto_module_is_object_file_in_memory_for_target, :lto_module_is_object_file_in_memory_for_target, [:pointer, :ulong, :string], :bool
  
  # Loads an object file from disk.
  # Returns NULL on error (check lto_get_error_message() for details).
  # 
  # @method lto_module_create(path)
  # @param [String] path 
  # @return [LTOModule] 
  # @scope class
  attach_function :lto_module_create, :lto_module_create, [:string], LTOModule
  
  # Loads an object file from memory.
  # Returns NULL on error (check lto_get_error_message() for details).
  # 
  # @method lto_module_create_from_memory(mem, length)
  # @param [FFI::Pointer(*Void)] mem 
  # @param [Integer] length 
  # @return [LTOModule] 
  # @scope class
  attach_function :lto_module_create_from_memory, :lto_module_create_from_memory, [:pointer, :ulong], LTOModule
  
  # Loads an object file from disk. The seek point of fd is not preserved.
  # Returns NULL on error (check lto_get_error_message() for details).
  # 
  # @method lto_module_create_from_fd(fd, path, file_size)
  # @param [Integer] fd 
  # @param [String] path 
  # @param [Integer] file_size 
  # @return [LTOModule] 
  # @scope class
  attach_function :lto_module_create_from_fd, :lto_module_create_from_fd, [:int, :string, :ulong], LTOModule
  
  # Loads an object file from disk. The seek point of fd is not preserved.
  # Returns NULL on error (check lto_get_error_message() for details).
  # 
  # @method lto_module_create_from_fd_at_offset(fd, path, file_size, map_size, offset)
  # @param [Integer] fd 
  # @param [String] path 
  # @param [Integer] file_size 
  # @param [Integer] map_size 
  # @param [Integer] offset 
  # @return [LTOModule] 
  # @scope class
  attach_function :lto_module_create_from_fd_at_offset, :lto_module_create_from_fd_at_offset, [:int, :string, :ulong, :ulong, :long], LTOModule
  
  # Frees all memory internally allocated by the module.
  # Upon return the lto_module_t is no longer valid.
  # 
  # @method lto_module_dispose(mod)
  # @param [LTOModule] mod 
  # @return [nil] 
  # @scope class
  attach_function :lto_module_dispose, :lto_module_dispose, [LTOModule], :void
  
  # Returns triple string which the object module was compiled under.
  # 
  # @method lto_module_get_target_triple(mod)
  # @param [LTOModule] mod 
  # @return [String] 
  # @scope class
  attach_function :lto_module_get_target_triple, :lto_module_get_target_triple, [LTOModule], :string
  
  # Sets triple string with which the object will be codegened.
  # 
  # @method lto_module_set_target_triple(mod, triple)
  # @param [LTOModule] mod 
  # @param [String] triple 
  # @return [nil] 
  # @scope class
  attach_function :lto_module_set_target_triple, :lto_module_set_target_triple, [LTOModule, :string], :void
  
  # Returns the number of symbols in the object module.
  # 
  # @method lto_module_get_num_symbols(mod)
  # @param [LTOModule] mod 
  # @return [Integer] 
  # @scope class
  attach_function :lto_module_get_num_symbols, :lto_module_get_num_symbols, [LTOModule], :uint
  
  # Returns the name of the ith symbol in the object module.
  # 
  # @method lto_module_get_symbol_name(mod, index)
  # @param [LTOModule] mod 
  # @param [Integer] index 
  # @return [String] 
  # @scope class
  attach_function :lto_module_get_symbol_name, :lto_module_get_symbol_name, [LTOModule, :uint], :string
  
  # Returns the attributes of the ith symbol in the object module.
  # 
  # @method lto_module_get_symbol_attribute(mod, index)
  # @param [LTOModule] mod 
  # @param [Integer] index 
  # @return [Symbol from _enum_lto_symbol_attributes_] 
  # @scope class
  attach_function :lto_module_get_symbol_attribute, :lto_module_get_symbol_attribute, [LTOModule, :uint], :lto_symbol_attributes
  
  # Instantiates a code generator.
  # Returns NULL on error (check lto_get_error_message() for details).
  # 
  # @method lto_codegen_create()
  # @return [LTOCodeGenerator] 
  # @scope class
  attach_function :lto_codegen_create, :lto_codegen_create, [], LTOCodeGenerator
  
  # Frees all code generator and all memory it internally allocated.
  # Upon return the lto_code_gen_t is no longer valid.
  # 
  # @method lto_codegen_dispose(lto_code_generator)
  # @param [LTOCodeGenerator] lto_code_generator 
  # @return [nil] 
  # @scope class
  attach_function :lto_codegen_dispose, :lto_codegen_dispose, [LTOCodeGenerator], :void
  
  # Add an object module to the set of modules for which code will be generated.
  # Returns true on error (check lto_get_error_message() for details).
  # 
  # @method lto_codegen_add_module(cg, mod)
  # @param [LTOCodeGenerator] cg 
  # @param [LTOModule] mod 
  # @return [Boolean] 
  # @scope class
  attach_function :lto_codegen_add_module, :lto_codegen_add_module, [LTOCodeGenerator, LTOModule], :bool
  
  # Sets if debug info should be generated.
  # Returns true on error (check lto_get_error_message() for details).
  # 
  # @method lto_codegen_set_debug_model(cg, lto_debug_model)
  # @param [LTOCodeGenerator] cg 
  # @param [Symbol from _enum_lto_debug_model_] lto_debug_model 
  # @return [Boolean] 
  # @scope class
  attach_function :lto_codegen_set_debug_model, :lto_codegen_set_debug_model, [LTOCodeGenerator, :lto_debug_model], :bool
  
  # Sets which PIC code model to generated.
  # Returns true on error (check lto_get_error_message() for details).
  # 
  # @method lto_codegen_set_pic_model(cg, lto_codegen_model)
  # @param [LTOCodeGenerator] cg 
  # @param [Symbol from _enum_lto_codegen_model_] lto_codegen_model 
  # @return [Boolean] 
  # @scope class
  attach_function :lto_codegen_set_pic_model, :lto_codegen_set_pic_model, [LTOCodeGenerator, :lto_codegen_model], :bool
  
  # Sets the cpu to generate code for.
  # 
  # @method lto_codegen_set_cpu(cg, cpu)
  # @param [LTOCodeGenerator] cg 
  # @param [String] cpu 
  # @return [nil] 
  # @scope class
  attach_function :lto_codegen_set_cpu, :lto_codegen_set_cpu, [LTOCodeGenerator, :string], :void
  
  # Sets the location of the assembler tool to run. If not set, libLTO
  # will use gcc to invoke the assembler.
  # 
  # @method lto_codegen_set_assembler_path(cg, path)
  # @param [LTOCodeGenerator] cg 
  # @param [String] path 
  # @return [nil] 
  # @scope class
  attach_function :lto_codegen_set_assembler_path, :lto_codegen_set_assembler_path, [LTOCodeGenerator, :string], :void
  
  # Sets extra arguments that libLTO should pass to the assembler.
  # 
  # @method lto_codegen_set_assembler_args(cg, args, nargs)
  # @param [LTOCodeGenerator] cg 
  # @param [FFI::Pointer(**CharS)] args 
  # @param [Integer] nargs 
  # @return [nil] 
  # @scope class
  attach_function :lto_codegen_set_assembler_args, :lto_codegen_set_assembler_args, [LTOCodeGenerator, :pointer, :int], :void
  
  # Adds to a list of all global symbols that must exist in the final
  # generated code.  If a function is not listed, it might be
  # inlined into every usage and optimized away.
  # 
  # @method lto_codegen_add_must_preserve_symbol(cg, symbol)
  # @param [LTOCodeGenerator] cg 
  # @param [String] symbol 
  # @return [nil] 
  # @scope class
  attach_function :lto_codegen_add_must_preserve_symbol, :lto_codegen_add_must_preserve_symbol, [LTOCodeGenerator, :string], :void
  
  # Writes a new object file at the specified path that contains the
  # merged contents of all modules added so far.
  # Returns true on error (check lto_get_error_message() for details).
  # 
  # @method lto_codegen_write_merged_modules(cg, path)
  # @param [LTOCodeGenerator] cg 
  # @param [String] path 
  # @return [Boolean] 
  # @scope class
  attach_function :lto_codegen_write_merged_modules, :lto_codegen_write_merged_modules, [LTOCodeGenerator, :string], :bool
  
  # Generates code for all added modules into one native object file.
  # On success returns a pointer to a generated mach-o/ELF buffer and
  # length set to the buffer size.  The buffer is owned by the 
  # lto_code_gen_t and will be freed when lto_codegen_dispose()
  # is called, or lto_codegen_compile() is called again.
  # On failure, returns NULL (check lto_get_error_message() for details).
  # 
  # @method lto_codegen_compile(cg, length)
  # @param [LTOCodeGenerator] cg 
  # @param [FFI::Pointer(*SizeT)] length 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  attach_function :lto_codegen_compile, :lto_codegen_compile, [LTOCodeGenerator, :pointer], :pointer
  
  # Generates code for all added modules into one native object file.
  # The name of the file is written to name. Returns true on error.
  # 
  # @method lto_codegen_compile_to_file(cg, name)
  # @param [LTOCodeGenerator] cg 
  # @param [FFI::Pointer(**CharS)] name 
  # @return [Boolean] 
  # @scope class
  attach_function :lto_codegen_compile_to_file, :lto_codegen_compile_to_file, [LTOCodeGenerator, :pointer], :bool
  
  # Sets options to help debug codegen bugs.
  # 
  # @method lto_codegen_debug_options(cg, string)
  # @param [LTOCodeGenerator] cg 
  # @param [String] string 
  # @return [nil] 
  # @scope class
  attach_function :lto_codegen_debug_options, :lto_codegen_debug_options, [LTOCodeGenerator, :string], :void
  
end
