# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module Cairo
  extend FFI::Library
  ffi_lib 'cairo'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # (Not documented)
  module ScriptInterpreterWrappers
    # @param [FFI::Pointer(*ScriptInterpreterHooks)] hooks 
    # @return [nil] 
    def install_hooks(hooks)
      Cairo.script_interpreter_install_hooks(self, hooks)
    end
    
    # @param [String] filename 
    # @return [unknown] 
    def run(filename)
      Cairo.script_interpreter_run(self, filename)
    end
    
    # @param [FFI::Pointer(*FILE)] stream 
    # @return [unknown] 
    def feed_stream(stream)
      Cairo.script_interpreter_feed_stream(self, stream)
    end
    
    # @param [String] line 
    # @param [Integer] len 
    # @return [unknown] 
    def feed_string(line, len)
      Cairo.script_interpreter_feed_string(self, line, len)
    end
    
    # @return [Integer] 
    def get_line_number()
      Cairo.script_interpreter_get_line_number(self)
    end
    
    # @return [ScriptInterpreter] 
    def reference()
      ScriptInterpreter.new Cairo.script_interpreter_reference(self)
    end
    
    # @return [unknown] 
    def finish()
      Cairo.script_interpreter_finish(self)
    end
    
    # @return [unknown] 
    def destroy()
      Cairo.script_interpreter_destroy(self)
    end
  end
  
  class ScriptInterpreter < FFI::Struct
    include ScriptInterpreterWrappers
    layout :dummy, :char
  end
  
  # XXX expose csi_dictionary_t and pass to hooks
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_csi_destroy_func_t_(ptr)
  # @param [FFI::Pointer(*Void)] ptr 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  callback :csi_destroy_func_t, [:pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_csi_surface_create_func_t_(closure, content, width, height, uid)
  # @param [FFI::Pointer(*Void)] closure 
  # @param [unknown] content 
  # @param [Float] width 
  # @param [Float] height 
  # @param [Integer] uid 
  # @return [unknown] 
  # @scope class
  callback :csi_surface_create_func_t, [:pointer, :char, :double, :double, :long], :char
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_csi_context_create_func_t_(closure, surface)
  # @param [FFI::Pointer(*Void)] closure 
  # @param [FFI::Pointer(*SurfaceT)] surface 
  # @return [unknown] 
  # @scope class
  callback :csi_context_create_func_t, [:pointer, :pointer], :char
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_csi_show_page_func_t_(cr)
  # @param [FFI::Pointer(*T)] cr 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  callback :csi_show_page_func_t, [:pointer], :pointer
  
  # (Not documented)
  # 
  # <em>This entry is only for documentation and no real method.</em>
  # 
  # @method _callback_csi_copy_page_func_t_(cr)
  # @param [FFI::Pointer(*T)] cr 
  # @return [FFI::Pointer(*Void)] 
  # @scope class
  callback :csi_copy_page_func_t, [:pointer], :pointer
  
  # (Not documented)
  # 
  # = Fields:
  # :closure ::
  #   (FFI::Pointer(*Void)) 
  # :surface_create ::
  #   (Proc(_callback_csi_surface_create_func_t_)) 
  # :surface_destroy ::
  #   (Proc(_callback_csi_destroy_func_t_)) 
  # :context_create ::
  #   (Proc(_callback_csi_context_create_func_t_)) 
  # :context_destroy ::
  #   (Proc(_callback_csi_destroy_func_t_)) 
  # :show_page ::
  #   (Proc(_callback_csi_show_page_func_t_)) 
  # :copy_page ::
  #   (Proc(_callback_csi_copy_page_func_t_)) 
  class ScriptInterpreterHooks < FFI::Struct
    layout :closure, :pointer,
           :surface_create, :csi_surface_create_func_t,
           :surface_destroy, :csi_destroy_func_t,
           :context_create, :csi_context_create_func_t,
           :context_destroy, :csi_destroy_func_t,
           :show_page, :csi_show_page_func_t,
           :copy_page, :csi_copy_page_func_t
  end
  
  # (Not documented)
  # 
  # @method script_interpreter_create()
  # @return [ScriptInterpreter] 
  # @scope class
  attach_function :script_interpreter_create, :cairo_script_interpreter_create, [], ScriptInterpreter
  
  # (Not documented)
  # 
  # @method script_interpreter_install_hooks(ctx, hooks)
  # @param [ScriptInterpreter] ctx 
  # @param [ScriptInterpreterHooks] hooks 
  # @return [nil] 
  # @scope class
  attach_function :script_interpreter_install_hooks, :cairo_script_interpreter_install_hooks, [ScriptInterpreter, ScriptInterpreterHooks], :void
  
  # (Not documented)
  # 
  # @method script_interpreter_run(ctx, filename)
  # @param [ScriptInterpreter] ctx 
  # @param [String] filename 
  # @return [unknown] 
  # @scope class
  attach_function :script_interpreter_run, :cairo_script_interpreter_run, [ScriptInterpreter, :string], :char
  
  # (Not documented)
  # 
  # @method script_interpreter_feed_stream(ctx, stream)
  # @param [ScriptInterpreter] ctx 
  # @param [FFI::Pointer(*FILE)] stream 
  # @return [unknown] 
  # @scope class
  attach_function :script_interpreter_feed_stream, :cairo_script_interpreter_feed_stream, [ScriptInterpreter, :pointer], :char
  
  # (Not documented)
  # 
  # @method script_interpreter_feed_string(ctx, line, len)
  # @param [ScriptInterpreter] ctx 
  # @param [String] line 
  # @param [Integer] len 
  # @return [unknown] 
  # @scope class
  attach_function :script_interpreter_feed_string, :cairo_script_interpreter_feed_string, [ScriptInterpreter, :string, :int], :char
  
  # (Not documented)
  # 
  # @method script_interpreter_get_line_number(ctx)
  # @param [ScriptInterpreter] ctx 
  # @return [Integer] 
  # @scope class
  attach_function :script_interpreter_get_line_number, :cairo_script_interpreter_get_line_number, [ScriptInterpreter], :uint
  
  # (Not documented)
  # 
  # @method script_interpreter_reference(ctx)
  # @param [ScriptInterpreter] ctx 
  # @return [ScriptInterpreter] 
  # @scope class
  attach_function :script_interpreter_reference, :cairo_script_interpreter_reference, [ScriptInterpreter], ScriptInterpreter
  
  # (Not documented)
  # 
  # @method script_interpreter_finish(ctx)
  # @param [ScriptInterpreter] ctx 
  # @return [unknown] 
  # @scope class
  attach_function :script_interpreter_finish, :cairo_script_interpreter_finish, [ScriptInterpreter], :char
  
  # (Not documented)
  # 
  # @method script_interpreter_destroy(ctx)
  # @param [ScriptInterpreter] ctx 
  # @return [unknown] 
  # @scope class
  attach_function :script_interpreter_destroy, :cairo_script_interpreter_destroy, [ScriptInterpreter], :char
  
  # (Not documented)
  # 
  # @method script_interpreter_translate_stream(stream, write_func, closure)
  # @param [FFI::Pointer(*FILE)] stream 
  # @param [FFI::Pointer(WriteFuncT)] write_func 
  # @param [FFI::Pointer(*Void)] closure 
  # @return [unknown] 
  # @scope class
  attach_function :script_interpreter_translate_stream, :cairo_script_interpreter_translate_stream, [:pointer, :pointer, :pointer], :char
  
end
