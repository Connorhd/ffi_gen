# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  def string_wide_copy(src, src_len, output)
    string_wide_set(src, src_len, output, TRUE)
  end
  
  def string_utf8_copy(src, src_len, output)
    string_utf8_set(src, src_len, output, TRUE)
  end
  
  def string_utf16_copy(src, src_len, output)
    string_utf16_set(src, src_len, output, TRUE)
  end
  
  # functions if you want this managed for you.
  # 
  # = Fields:
  # :str ::
  #   (FFI::Pointer(*WcharT)) 
  # :length ::
  #   (Integer) 
  # :dtor ::
  #   (FFI::Pointer(*)) 
  class StringWideT < FFI::Struct
    layout :str, :pointer,
           :length, :ulong,
           :dtor, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :str ::
  #   (String) 
  # :length ::
  #   (Integer) 
  # :dtor ::
  #   (FFI::Pointer(*)) 
  class StringUtf8T < FFI::Struct
    layout :str, :string,
           :length, :ulong,
           :dtor, :pointer
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :str ::
  #   (FFI::Pointer(*Char16)) 
  # :length ::
  #   (Integer) 
  # :dtor ::
  #   (FFI::Pointer(*)) 
  class StringUtf16T < FFI::Struct
    layout :str, :pointer,
           :length, :ulong,
           :dtor, :pointer
  end
  
  # These functions set string values. If |copy| is true (1) the value will be
  # copied instead of referenced. It is up to the user to properly manage
  # the lifespan of references.
  # 
  # @method string_wide_set(src, src_len, output, copy)
  # @param [FFI::Pointer(*WcharT)] src 
  # @param [Integer] src_len 
  # @param [StringWideT] output 
  # @param [Integer] copy 
  # @return [Integer] 
  # @scope class
  attach_function :string_wide_set, :cef_string_wide_set, [:pointer, :ulong, StringWideT, :int], :int
  
  # (Not documented)
  # 
  # @method string_utf8_set(src, src_len, output, copy)
  # @param [String] src 
  # @param [Integer] src_len 
  # @param [StringUtf8T] output 
  # @param [Integer] copy 
  # @return [Integer] 
  # @scope class
  attach_function :string_utf8_set, :cef_string_utf8_set, [:string, :ulong, StringUtf8T, :int], :int
  
  # (Not documented)
  # 
  # @method string_utf16_set(src, src_len, output, copy)
  # @param [FFI::Pointer(*Char16)] src 
  # @param [Integer] src_len 
  # @param [StringUtf16T] output 
  # @param [Integer] copy 
  # @return [Integer] 
  # @scope class
  attach_function :string_utf16_set, :cef_string_utf16_set, [:pointer, :ulong, StringUtf16T, :int], :int
  
  # These functions clear string values. The structure itself is not freed.
  # 
  # @method string_wide_clear(str)
  # @param [StringWideT] str 
  # @return [nil] 
  # @scope class
  attach_function :string_wide_clear, :cef_string_wide_clear, [StringWideT], :void
  
  # (Not documented)
  # 
  # @method string_utf8_clear(str)
  # @param [StringUtf8T] str 
  # @return [nil] 
  # @scope class
  attach_function :string_utf8_clear, :cef_string_utf8_clear, [StringUtf8T], :void
  
  # (Not documented)
  # 
  # @method string_utf16_clear(str)
  # @param [StringUtf16T] str 
  # @return [nil] 
  # @scope class
  attach_function :string_utf16_clear, :cef_string_utf16_clear, [StringUtf16T], :void
  
  # These functions compare two string values with the same results as strcmp().
  # 
  # @method string_wide_cmp(str1, str2)
  # @param [StringWideT] str1 
  # @param [StringWideT] str2 
  # @return [Integer] 
  # @scope class
  attach_function :string_wide_cmp, :cef_string_wide_cmp, [StringWideT, StringWideT], :int
  
  # (Not documented)
  # 
  # @method string_utf8_cmp(str1, str2)
  # @param [StringUtf8T] str1 
  # @param [StringUtf8T] str2 
  # @return [Integer] 
  # @scope class
  attach_function :string_utf8_cmp, :cef_string_utf8_cmp, [StringUtf8T, StringUtf8T], :int
  
  # (Not documented)
  # 
  # @method string_utf16_cmp(str1, str2)
  # @param [StringUtf16T] str1 
  # @param [StringUtf16T] str2 
  # @return [Integer] 
  # @scope class
  attach_function :string_utf16_cmp, :cef_string_utf16_cmp, [StringUtf16T, StringUtf16T], :int
  
  # These functions convert between UTF-8, -16, and -32 strings. They are
  # potentially slow so unnecessary conversions should be avoided. The best
  # possible result will always be written to |output| with the boolean return
  # value indicating whether the conversion is 100% valid.
  # 
  # @method string_wide_to_utf8(src, src_len, output)
  # @param [FFI::Pointer(*WcharT)] src 
  # @param [Integer] src_len 
  # @param [StringUtf8T] output 
  # @return [Integer] 
  # @scope class
  attach_function :string_wide_to_utf8, :cef_string_wide_to_utf8, [:pointer, :ulong, StringUtf8T], :int
  
  # (Not documented)
  # 
  # @method string_utf8_to_wide(src, src_len, output)
  # @param [String] src 
  # @param [Integer] src_len 
  # @param [StringWideT] output 
  # @return [Integer] 
  # @scope class
  attach_function :string_utf8_to_wide, :cef_string_utf8_to_wide, [:string, :ulong, StringWideT], :int
  
  # (Not documented)
  # 
  # @method string_wide_to_utf16(src, src_len, output)
  # @param [FFI::Pointer(*WcharT)] src 
  # @param [Integer] src_len 
  # @param [StringUtf16T] output 
  # @return [Integer] 
  # @scope class
  attach_function :string_wide_to_utf16, :cef_string_wide_to_utf16, [:pointer, :ulong, StringUtf16T], :int
  
  # (Not documented)
  # 
  # @method string_utf16_to_wide(src, src_len, output)
  # @param [FFI::Pointer(*Char16)] src 
  # @param [Integer] src_len 
  # @param [StringWideT] output 
  # @return [Integer] 
  # @scope class
  attach_function :string_utf16_to_wide, :cef_string_utf16_to_wide, [:pointer, :ulong, StringWideT], :int
  
  # (Not documented)
  # 
  # @method string_utf8_to_utf16(src, src_len, output)
  # @param [String] src 
  # @param [Integer] src_len 
  # @param [StringUtf16T] output 
  # @return [Integer] 
  # @scope class
  attach_function :string_utf8_to_utf16, :cef_string_utf8_to_utf16, [:string, :ulong, StringUtf16T], :int
  
  # (Not documented)
  # 
  # @method string_utf16_to_utf8(src, src_len, output)
  # @param [FFI::Pointer(*Char16)] src 
  # @param [Integer] src_len 
  # @param [StringUtf8T] output 
  # @return [Integer] 
  # @scope class
  attach_function :string_utf16_to_utf8, :cef_string_utf16_to_utf8, [:pointer, :ulong, StringUtf8T], :int
  
  # These functions convert an ASCII string, typically a hardcoded constant, to a
  # Wide/UTF16 string. Use instead of the UTF8 conversion routines if you know
  # the string is ASCII.
  # 
  # @method string_ascii_to_wide(src, src_len, output)
  # @param [String] src 
  # @param [Integer] src_len 
  # @param [StringWideT] output 
  # @return [Integer] 
  # @scope class
  attach_function :string_ascii_to_wide, :cef_string_ascii_to_wide, [:string, :ulong, StringWideT], :int
  
  # (Not documented)
  # 
  # @method string_ascii_to_utf16(src, src_len, output)
  # @param [String] src 
  # @param [Integer] src_len 
  # @param [StringUtf16T] output 
  # @return [Integer] 
  # @scope class
  attach_function :string_ascii_to_utf16, :cef_string_ascii_to_utf16, [:string, :ulong, StringUtf16T], :int
  
  # These functions allocate a new string structure. They must be freed by
  # calling the associated free function.
  # 
  # @method string_userfree_wide_alloc()
  # @return [StringWideT] 
  # @scope class
  attach_function :string_userfree_wide_alloc, :cef_string_userfree_wide_alloc, [], StringWideT
  
  # (Not documented)
  # 
  # @method string_userfree_utf8_alloc()
  # @return [StringUtf8T] 
  # @scope class
  attach_function :string_userfree_utf8_alloc, :cef_string_userfree_utf8_alloc, [], StringUtf8T
  
  # (Not documented)
  # 
  # @method string_userfree_utf16_alloc()
  # @return [StringUtf16T] 
  # @scope class
  attach_function :string_userfree_utf16_alloc, :cef_string_userfree_utf16_alloc, [], StringUtf16T
  
  # These functions free the string structure allocated by the associated
  # alloc function. Any string contents will first be cleared.
  # 
  # @method string_userfree_wide_free(str)
  # @param [StringWideT] str 
  # @return [nil] 
  # @scope class
  attach_function :string_userfree_wide_free, :cef_string_userfree_wide_free, [StringWideT], :void
  
  # (Not documented)
  # 
  # @method string_userfree_utf8_free(str)
  # @param [StringUtf8T] str 
  # @return [nil] 
  # @scope class
  attach_function :string_userfree_utf8_free, :cef_string_userfree_utf8_free, [StringUtf8T], :void
  
  # (Not documented)
  # 
  # @method string_userfree_utf16_free(str)
  # @param [StringUtf16T] str 
  # @return [nil] 
  # @scope class
  attach_function :string_userfree_utf16_free, :cef_string_userfree_utf16_free, [StringUtf16T], :void
  
end
