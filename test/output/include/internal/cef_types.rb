# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # Log severity levels.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:log_severity_t).</em>
  # 
  # === Options:
  # :logseverity_verbose ::
  #   
  # :logseverity_info ::
  #   
  # :logseverity_warning ::
  #   
  # :logseverity_error ::
  #   
  # :logseverity_error_report ::
  #   
  # :logseverity_disable ::
  #   Disables logging completely.
  # 
  # @method _enum_log_severity_t_
  # @return [Symbol]
  # @scope class
  enum :log_severity_t, [
    :logseverity_verbose, -1,
    :logseverity_info, 0,
    :logseverity_warning, 1,
    :logseverity_error, 2,
    :logseverity_error_report, 3,
    :logseverity_disable, 99
  ]
  
  # Initialization settings. Specify NULL or 0 to get the recommended default
  # values.
  # 
  # = Fields:
  # :size ::
  #   (Integer) Size of this structure.
  # :single_process ::
  #   (Integer) Set to true (1) to use a single process for the browser and renderer. This
  #   run mode is not officially supported by Chromium and is less stable than
  #   the multi-process default.
  # :browser_subprocess_path ::
  #   (unknown) The path to a separate executable that will be launched for sub-processes.
  #   By default the browser process executable is used. See the comments on
  #   CefExecuteProcess() for details.
  # :multi_threaded_message_loop ::
  #   (Integer) Set to true (1) to have the browser process message loop run in a separate
  #   thread. If false (0) than the CefDoMessageLoopWork() function must be
  #   called from your application message loop.
  # :command_line_args_disabled ::
  #   (Integer) Set to true (1) to disable configuration of browser process features using
  #   standard CEF and Chromium command-line arguments. Configuration can still
  #   be specified using CEF data structures or via the
  #   CefApp::OnBeforeCommandLineProcessing() method.
  # :cache_path ::
  #   (unknown) The location where cache data will be stored on disk. If empty an in-memory
  #   cache will be used. HTML5 databases such as localStorage will only persist
  #   across sessions if a cache path is specified.
  # :user_agent ::
  #   (unknown) Value that will be returned as the User-Agent HTTP header. If empty the
  #   default User-Agent string will be used.
  # :product_version ::
  #   (unknown) Value that will be inserted as the product portion of the default
  #   User-Agent string. If empty the Chromium product version will be used. If
  #   |userAgent| is specified this value will be ignored.
  # :locale ::
  #   (unknown) The locale string that will be passed to WebKit. If empty the default
  #   locale of "en-US" will be used. This value is ignored on Linux where locale
  #   is determined using environment variable parsing with the precedence order:
  #   LANGUAGE, LC_ALL, LC_MESSAGES and LANG.
  # :log_file ::
  #   (unknown) The directory and file name to use for the debug log. If empty, the
  #   default name of "debug.log" will be used and the file will be written
  #   to the application directory.
  # :log_severity ::
  #   (Symbol from _enum_log_severity_t_) The log severity. Only messages of this severity level or higher will be
  #   logged.
  # :javascript_flags ::
  #   (unknown) Custom flags that will be used when initializing the V8 JavaScript engine.
  #   The consequences of using custom flags may not be well tested.
  # :auto_detect_proxy_settings_enabled ::
  #   (Integer) Set to true (1) to use the system proxy resolver on Windows when
  #   "Automatically detect settings" is checked. This setting is disabled
  #   by default for performance reasons.
  # :pack_file_path ::
  #   (unknown) The fully qualified path for the cef.pak file. If this value is empty
  #   the cef.pak file must be located in the module directory. This value is
  #   ignored on Mac OS X where pack files are always loaded from the app bundle
  #   resource directory.
  # :locales_dir_path ::
  #   (unknown) The fully qualified path for the locales directory. If this value is empty
  #   the locales directory must be located in the module directory. This value
  #   is ignored on Mac OS X where pack files are always loaded from the app
  #   bundle resource directory.
  # :pack_loading_disabled ::
  #   (Integer) Set to true (1) to disable loading of pack files for resources and locales.
  #   A resource bundle handler must be provided for the browser and render
  #   processes via CefApp::GetResourceBundleHandler() if loading of pack files
  #   is disabled.
  # :remote_debugging_port ::
  #   (Integer) Set to a value between 1024 and 65535 to enable remote debugging on the
  #   specified port. For example, if 8080 is specified the remote debugging URL
  #   will be http://localhost:8080. CEF can be remotely debugged from any CEF or
  #   Chrome browser window.
  class SettingsT < FFI::Struct
    layout :size, :ulong,
           :single_process, :int,
           :browser_subprocess_path, :char,
           :multi_threaded_message_loop, :int,
           :command_line_args_disabled, :int,
           :cache_path, :char,
           :user_agent, :char,
           :product_version, :char,
           :locale, :char,
           :log_file, :char,
           :log_severity, :log_severity_t,
           :javascript_flags, :char,
           :auto_detect_proxy_settings_enabled, :int,
           :pack_file_path, :char,
           :locales_dir_path, :char,
           :pack_loading_disabled, :int,
           :remote_debugging_port, :int
  end
  
  # Browser initialization settings. Specify NULL or 0 to get the recommended
  # default values. The consequences of using custom values may not be well
  # tested.
  # 
  # = Fields:
  # :size ::
  #   (Integer) Size of this structure.
  # :standard_font_family ::
  #   (unknown) Font settings.
  # :fixed_font_family ::
  #   (unknown) 
  # :serif_font_family ::
  #   (unknown) 
  # :sans_serif_font_family ::
  #   (unknown) 
  # :cursive_font_family ::
  #   (unknown) 
  # :fantasy_font_family ::
  #   (unknown) 
  # :default_font_size ::
  #   (Integer) 
  # :default_fixed_font_size ::
  #   (Integer) 
  # :minimum_font_size ::
  #   (Integer) 
  # :minimum_logical_font_size ::
  #   (Integer) 
  # :remote_fonts_disabled ::
  #   (Integer) Set to true (1) to disable loading of fonts from remote sources.
  # :default_encoding ::
  #   (unknown) Default encoding for Web content. If empty "ISO-8859-1" will be used.
  # :encoding_detector_enabled ::
  #   (Integer) Set to true (1) to attempt automatic detection of content encoding.
  # :javascript_disabled ::
  #   (Integer) Set to true (1) to disable JavaScript.
  # :javascript_open_windows_disallowed ::
  #   (Integer) Set to true (1) to disallow JavaScript from opening windows.
  # :javascript_close_windows_disallowed ::
  #   (Integer) Set to true (1) to disallow JavaScript from closing windows.
  # :javascript_access_clipboard_disallowed ::
  #   (Integer) Set to true (1) to disallow JavaScript from accessing the clipboard.
  # :dom_paste_disabled ::
  #   (Integer) Set to true (1) to disable DOM pasting in the editor. DOM pasting also
  #   depends on |javascript_cannot_access_clipboard| being false (0).
  # :caret_browsing_enabled ::
  #   (Integer) Set to true (1) to enable drawing of the caret position.
  # :java_disabled ::
  #   (Integer) Set to true (1) to disable Java.
  # :plugins_disabled ::
  #   (Integer) Set to true (1) to disable plugins.
  # :universal_access_from_file_urls_allowed ::
  #   (Integer) Set to true (1) to allow access to all URLs from file URLs.
  # :file_access_from_file_urls_allowed ::
  #   (Integer) Set to true (1) to allow access to file URLs from other file URLs.
  # :web_security_disabled ::
  #   (Integer) Set to true (1) to allow risky security behavior such as cross-site
  #   scripting (XSS). Use with extreme care.
  # :xss_auditor_enabled ::
  #   (Integer) Set to true (1) to enable console warnings about XSS attempts.
  # :image_load_disabled ::
  #   (Integer) Set to true (1) to suppress the network load of image URLs.  A cached
  #   image will still be rendered if requested.
  # :shrink_standalone_images_to_fit ::
  #   (Integer) Set to true (1) to shrink standalone images to fit the page.
  # :site_specific_quirks_disabled ::
  #   (Integer) Set to true (1) to disable browser backwards compatibility features.
  # :text_area_resize_disabled ::
  #   (Integer) Set to true (1) to disable resize of text areas.
  # :page_cache_disabled ::
  #   (Integer) Set to true (1) to disable use of the page cache.
  # :tab_to_links_disabled ::
  #   (Integer) Set to true (1) to not have the tab key advance focus to links.
  # :hyperlink_auditing_disabled ::
  #   (Integer) Set to true (1) to disable hyperlink pings (<a ping> and window.sendPing).
  # :user_style_sheet_enabled ::
  #   (Integer) Set to true (1) to enable the user style sheet for all pages.
  # :user_style_sheet_location ::
  #   (unknown) Location of the user style sheet. This must be a data URL of the form
  #   "data:text/css;charset=utf-8;base64,csscontent" where "csscontent" is the
  #   base64 encoded contents of the CSS file.
  # :author_and_user_styles_disabled ::
  #   (Integer) Set to true (1) to disable style sheets.
  # :local_storage_disabled ::
  #   (Integer) Set to true (1) to disable local storage.
  # :databases_disabled ::
  #   (Integer) Set to true (1) to disable databases.
  # :application_cache_disabled ::
  #   (Integer) Set to true (1) to disable application cache.
  # :webgl_disabled ::
  #   (Integer) Set to true (1) to disable WebGL.
  # :accelerated_compositing_disabled ::
  #   (Integer) Set to true (1) to disable accelerated compositing.
  # :accelerated_layers_disabled ::
  #   (Integer) Set to true (1) to disable accelerated layers. This affects features like
  #   3D CSS transforms.
  # :accelerated_video_disabled ::
  #   (Integer) Set to true (1) to disable accelerated video.
  # :accelerated_2d_canvas_disabled ::
  #   (Integer) Set to true (1) to disable accelerated 2d canvas.
  # :accelerated_painting_enabled ::
  #   (Integer) Set to true (1) to enable accelerated painting.
  # :accelerated_filters_enabled ::
  #   (Integer) Set to true (1) to enable accelerated filters.
  # :accelerated_plugins_disabled ::
  #   (Integer) Set to true (1) to disable accelerated plugins.
  # :developer_tools_disabled ::
  #   (Integer) Set to true (1) to disable developer tools (WebKit inspector).
  # :fullscreen_enabled ::
  #   (Integer) Set to true (1) to enable fullscreen mode.
  class BrowserSettingsT < FFI::Struct
    layout :size, :ulong,
           :standard_font_family, :char,
           :fixed_font_family, :char,
           :serif_font_family, :char,
           :sans_serif_font_family, :char,
           :cursive_font_family, :char,
           :fantasy_font_family, :char,
           :default_font_size, :int,
           :default_fixed_font_size, :int,
           :minimum_font_size, :int,
           :minimum_logical_font_size, :int,
           :remote_fonts_disabled, :int,
           :default_encoding, :char,
           :encoding_detector_enabled, :int,
           :javascript_disabled, :int,
           :javascript_open_windows_disallowed, :int,
           :javascript_close_windows_disallowed, :int,
           :javascript_access_clipboard_disallowed, :int,
           :dom_paste_disabled, :int,
           :caret_browsing_enabled, :int,
           :java_disabled, :int,
           :plugins_disabled, :int,
           :universal_access_from_file_urls_allowed, :int,
           :file_access_from_file_urls_allowed, :int,
           :web_security_disabled, :int,
           :xss_auditor_enabled, :int,
           :image_load_disabled, :int,
           :shrink_standalone_images_to_fit, :int,
           :site_specific_quirks_disabled, :int,
           :text_area_resize_disabled, :int,
           :page_cache_disabled, :int,
           :tab_to_links_disabled, :int,
           :hyperlink_auditing_disabled, :int,
           :user_style_sheet_enabled, :int,
           :user_style_sheet_location, :char,
           :author_and_user_styles_disabled, :int,
           :local_storage_disabled, :int,
           :databases_disabled, :int,
           :application_cache_disabled, :int,
           :webgl_disabled, :int,
           :accelerated_compositing_disabled, :int,
           :accelerated_layers_disabled, :int,
           :accelerated_video_disabled, :int,
           :accelerated_2d_canvas_disabled, :int,
           :accelerated_painting_enabled, :int,
           :accelerated_filters_enabled, :int,
           :accelerated_plugins_disabled, :int,
           :developer_tools_disabled, :int,
           :fullscreen_enabled, :int
  end
  
  # URL component parts.
  # 
  # = Fields:
  # :spec ::
  #   (unknown) The complete URL specification.
  # :scheme ::
  #   (unknown) Scheme component not including the colon (e.g., "http").
  # :username ::
  #   (unknown) User name component.
  # :password ::
  #   (unknown) Password component.
  # :host ::
  #   (unknown) Host component. This may be a hostname, an IPv4 address or an IPv6 literal
  #   surrounded by square brackets (e.g., "(2001:db8::1)").
  # :port ::
  #   (unknown) Port number component.
  # :path ::
  #   (unknown) Path component including the first slash following the host.
  # :query ::
  #   (unknown) Query string component (i.e., everything following the '?').
  class UrlpartsT < FFI::Struct
    layout :spec, :char,
           :scheme, :char,
           :username, :char,
           :password, :char,
           :host, :char,
           :port, :char,
           :path, :char,
           :query, :char
  end
  
  # Cookie information.
  # 
  # = Fields:
  # :name ::
  #   (unknown) The cookie name.
  # :value ::
  #   (unknown) The cookie value.
  # :domain ::
  #   (unknown) If |domain| is empty a host cookie will be created instead of a domain
  #   cookie. Domain cookies are stored with a leading "." and are visible to
  #   sub-domains whereas host cookies are not.
  # :path ::
  #   (unknown) If |path| is non-empty only URLs at or below the path will get the cookie
  #   value.
  # :secure ::
  #   (Integer) If |secure| is true the cookie will only be sent for HTTPS requests.
  # :httponly ::
  #   (Integer) If |httponly| is true the cookie will only be sent for HTTP requests.
  # :creation ::
  #   (unknown) The cookie creation date. This is automatically populated by the system on
  #   cookie creation.
  # :last_access ::
  #   (unknown) The cookie last access date. This is automatically populated by the system
  #   on access.
  # :has_expires ::
  #   (Integer) The cookie expiration date is only valid if |has_expires| is true.
  # :expires ::
  #   (unknown) 
  class CookieT < FFI::Struct
    layout :name, :char,
           :value, :char,
           :domain, :char,
           :path, :char,
           :secure, :int,
           :httponly, :int,
           :creation, :char,
           :last_access, :char,
           :has_expires, :int,
           :expires, :char
  end
  
  # Storage types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:storage_type_t).</em>
  # 
  # === Options:
  # :st_localstorage ::
  #   
  # :st_sessionstorage ::
  #   
  # 
  # @method _enum_storage_type_t_
  # @return [Symbol]
  # @scope class
  enum :storage_type_t, [
    :st_localstorage, 0,
    :st_sessionstorage, 1
  ]
  
  # Supported error code values. See net\base\net_error_list.h for complete
  # descriptions of the error codes.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:errorcode_t).</em>
  # 
  # === Options:
  # :err_none ::
  #   
  # :err_failed ::
  #   
  # :err_aborted ::
  #   
  # :err_invalid_argument ::
  #   
  # :err_invalid_handle ::
  #   
  # :err_file_not_found ::
  #   
  # :err_timed_out ::
  #   
  # :err_file_too_big ::
  #   
  # :err_unexpected ::
  #   
  # :err_access_denied ::
  #   
  # :err_not_implemented ::
  #   
  # :err_connection_closed ::
  #   
  # :err_connection_reset ::
  #   
  # :err_connection_refused ::
  #   
  # :err_connection_aborted ::
  #   
  # :err_connection_failed ::
  #   
  # :err_name_not_resolved ::
  #   
  # :err_internet_disconnected ::
  #   
  # :err_ssl_protocol_error ::
  #   
  # :err_address_invalid ::
  #   
  # :err_address_unreachable ::
  #   
  # :err_ssl_client_auth_cert_needed ::
  #   
  # :err_tunnel_connection_failed ::
  #   
  # :err_no_ssl_versions_enabled ::
  #   
  # :err_ssl_version_or_cipher_mismatch ::
  #   
  # :err_ssl_renegotiation_requested ::
  #   
  # :err_cert_common_name_invalid ::
  #   
  # :err_cert_date_invalid ::
  #   
  # :err_cert_authority_invalid ::
  #   
  # :err_cert_contains_errors ::
  #   
  # :err_cert_no_revocation_mechanism ::
  #   
  # :err_cert_unable_to_check_revocation ::
  #   
  # :err_cert_revoked ::
  #   
  # :err_cert_invalid ::
  #   
  # :err_cert_end ::
  #   
  # :err_invalid_url ::
  #   
  # :err_disallowed_url_scheme ::
  #   
  # :err_unknown_url_scheme ::
  #   
  # :err_too_many_redirects ::
  #   
  # :err_unsafe_redirect ::
  #   
  # :err_unsafe_port ::
  #   
  # :err_invalid_response ::
  #   
  # :err_invalid_chunked_encoding ::
  #   
  # :err_method_not_supported ::
  #   
  # :err_unexpected_proxy_auth ::
  #   
  # :err_empty_response ::
  #   
  # :err_response_headers_too_big ::
  #   
  # :err_cache_miss ::
  #   
  # :err_insecure_response ::
  #   
  # 
  # @method _enum_errorcode_t_
  # @return [Symbol]
  # @scope class
  enum :errorcode_t, [
    :err_none, 0,
    :err_failed, -2,
    :err_aborted, -3,
    :err_invalid_argument, -4,
    :err_invalid_handle, -5,
    :err_file_not_found, -6,
    :err_timed_out, -7,
    :err_file_too_big, -8,
    :err_unexpected, -9,
    :err_access_denied, -10,
    :err_not_implemented, -11,
    :err_connection_closed, -100,
    :err_connection_reset, -101,
    :err_connection_refused, -102,
    :err_connection_aborted, -103,
    :err_connection_failed, -104,
    :err_name_not_resolved, -105,
    :err_internet_disconnected, -106,
    :err_ssl_protocol_error, -107,
    :err_address_invalid, -108,
    :err_address_unreachable, -109,
    :err_ssl_client_auth_cert_needed, -110,
    :err_tunnel_connection_failed, -111,
    :err_no_ssl_versions_enabled, -112,
    :err_ssl_version_or_cipher_mismatch, -113,
    :err_ssl_renegotiation_requested, -114,
    :err_cert_common_name_invalid, -200,
    :err_cert_date_invalid, -201,
    :err_cert_authority_invalid, -202,
    :err_cert_contains_errors, -203,
    :err_cert_no_revocation_mechanism, -204,
    :err_cert_unable_to_check_revocation, -205,
    :err_cert_revoked, -206,
    :err_cert_invalid, -207,
    :err_cert_end, -208,
    :err_invalid_url, -300,
    :err_disallowed_url_scheme, -301,
    :err_unknown_url_scheme, -302,
    :err_too_many_redirects, -310,
    :err_unsafe_redirect, -311,
    :err_unsafe_port, -312,
    :err_invalid_response, -320,
    :err_invalid_chunked_encoding, -321,
    :err_method_not_supported, -322,
    :err_unexpected_proxy_auth, -323,
    :err_empty_response, -324,
    :err_response_headers_too_big, -325,
    :err_cache_miss, -400,
    :err_insecure_response, -501
  ]
  
  # V8 access control values.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:v8_accesscontrol_t).</em>
  # 
  # === Options:
  # :access_control_default ::
  #   
  # :access_control_all_can_read ::
  #   
  # :access_control_all_can_write ::
  #   
  # :access_control_prohibits_overwriting ::
  #   
  # 
  # @method _enum_v8_accesscontrol_t_
  # @return [Symbol]
  # @scope class
  enum :v8_accesscontrol_t, [
    :access_control_default, 0,
    :access_control_all_can_read, 1,
    :access_control_all_can_write, 2,
    :access_control_prohibits_overwriting, 4
  ]
  
  # V8 property attribute values.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:v8_propertyattribute_t).</em>
  # 
  # === Options:
  # :property_attribute_none ::
  #   
  # :property_attribute_readonly ::
  #   Configurable
  # :property_attribute_dontenum ::
  #   Not writeable
  # :property_attribute_dontdelete ::
  #   Not enumerable
  # 
  # @method _enum_v8_propertyattribute_t_
  # @return [Symbol]
  # @scope class
  enum :v8_propertyattribute_t, [
    :property_attribute_none, 0,
    :property_attribute_readonly, 1,
    :property_attribute_dontenum, 2,
    :property_attribute_dontdelete, 4
  ]
  
  # Post data elements may represent either bytes or files.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:postdataelement_type_t).</em>
  # 
  # === Options:
  # :pde_type_empty ::
  #   
  # :pde_type_bytes ::
  #   
  # :pde_type_file ::
  #   
  # 
  # @method _enum_postdataelement_type_t_
  # @return [Symbol]
  # @scope class
  enum :postdataelement_type_t, [
    :pde_type_empty, 0,
    :pde_type_bytes, 1,
    :pde_type_file, 2
  ]
  
  # Flags used to customize the behavior of CefURLRequest.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:urlrequest_flags_t).</em>
  # 
  # === Options:
  # :ur_flag_none ::
  #   Default behavior.
  # :ur_flag_skip_cache ::
  #   If set the cache will be skipped when handling the request.
  # :ur_flag_allow_cached_credentials ::
  #   If set user name, password, and cookies may be sent with the request.
  # :ur_flag_allow_cookies ::
  #   If set cookies may be sent with the request and saved from the response.
  #   UR_FLAG_ALLOW_CACHED_CREDENTIALS must also be set.
  # :ur_flag_report_upload_progress ::
  #   If set upload progress events will be generated when a request has a body.
  # :ur_flag_report_load_timing ::
  #   If set load timing info will be collected for the request.
  # :ur_flag_report_raw_headers ::
  #   If set the headers sent and received for the request will be recorded.
  # :ur_flag_no_download_data ::
  #   If set the CefURLRequestClient::OnDownloadData method will not be called.
  # :ur_flag_no_retry_on_5xx ::
  #   If set 5XX redirect errors will be propagated to the observer instead of
  #   automatically re-tried. This currently only applies for requests
  #   originated in the browser process.
  # 
  # @method _enum_urlrequest_flags_t_
  # @return [Symbol]
  # @scope class
  enum :urlrequest_flags_t, [
    :ur_flag_none, 0,
    :ur_flag_skip_cache, 1,
    :ur_flag_allow_cached_credentials, 2,
    :ur_flag_allow_cookies, 4,
    :ur_flag_report_upload_progress, 8,
    :ur_flag_report_load_timing, 16,
    :ur_flag_report_raw_headers, 32,
    :ur_flag_no_download_data, 64,
    :ur_flag_no_retry_on_5xx, 128
  ]
  
  # Flags that represent CefURLRequest status.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:urlrequest_status_t).</em>
  # 
  # === Options:
  # :ur_unknown ::
  #   Unknown status.
  # :ur_success ::
  #   Request succeeded.
  # :ur_io_pending ::
  #   An IO request is pending, and the caller will be informed when it is
  #   completed.
  # :ur_handled_externally ::
  #   Request was successful but was handled by an external program, so there
  #   is no response data. This usually means the current page should not be
  #   navigated, but no error should be displayed.
  # :ur_canceled ::
  #   Request was canceled programatically.
  # :ur_failed ::
  #   Request failed for some reason.
  # 
  # @method _enum_urlrequest_status_t_
  # @return [Symbol]
  # @scope class
  enum :urlrequest_status_t, [
    :ur_unknown, 0,
    :ur_success, 1,
    :ur_io_pending, 2,
    :ur_handled_externally, 3,
    :ur_canceled, 4,
    :ur_failed, 5
  ]
  
  # Structure representing a rectangle.
  # 
  # = Fields:
  # :x ::
  #   (Integer) 
  # :y ::
  #   (Integer) 
  # :width ::
  #   (Integer) 
  # :height ::
  #   (Integer) 
  class RectT < FFI::Struct
    layout :x, :int,
           :y, :int,
           :width, :int,
           :height, :int
  end
  
  # Existing process IDs.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:process_id_t).</em>
  # 
  # === Options:
  # :pid_browser ::
  #   Browser process.
  # :pid_renderer ::
  #   Renderer process.
  # 
  # @method _enum_process_id_t_
  # @return [Symbol]
  # @scope class
  enum :process_id_t, [
    :pid_browser, 0,
    :pid_renderer, 1
  ]
  
  # Existing thread IDs.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:thread_id_t).</em>
  # 
  # === Options:
  # :tid_ui ::
  #   The main thread in the browser. This will be the same as the main
  #   application thread if CefInitialize() is called with a
  #   CefSettings.multi_threaded_message_loop value of false.
  # :tid_db ::
  #   Used to interact with the database.
  # :tid_file ::
  #   Used to interact with the file system.
  # :tid_file_user_blocking ::
  #   Used for file system operations that block user interactions.
  #   Responsiveness of this thread affects users.
  # :tid_process_launcher ::
  #   Used to launch and terminate browser processes.
  # :tid_cache ::
  #   Used to handle slow HTTP cache operations.
  # :tid_io ::
  #   Used to process IPC and network messages.
  # :tid_renderer ::
  #   The main thread in the renderer. Used for all WebKit and V8 interaction.
  # 
  # @method _enum_thread_id_t_
  # @return [Symbol]
  # @scope class
  enum :thread_id_t, [
    :tid_ui, 0,
    :tid_db, 1,
    :tid_file, 2,
    :tid_file_user_blocking, 3,
    :tid_process_launcher, 4,
    :tid_cache, 5,
    :tid_io, 6,
    :tid_renderer, 7
  ]
  
  # Supported value types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:value_type_t).</em>
  # 
  # === Options:
  # :vtype_invalid ::
  #   
  # :vtype_null ::
  #   
  # :vtype_bool ::
  #   
  # :vtype_int ::
  #   
  # :vtype_double ::
  #   
  # :vtype_string ::
  #   
  # :vtype_binary ::
  #   
  # :vtype_dictionary ::
  #   
  # :vtype_list ::
  #   
  # 
  # @method _enum_value_type_t_
  # @return [Symbol]
  # @scope class
  enum :value_type_t, [
    :vtype_invalid, 0,
    :vtype_null, 1,
    :vtype_bool, 2,
    :vtype_int, 3,
    :vtype_double, 4,
    :vtype_string, 5,
    :vtype_binary, 6,
    :vtype_dictionary, 7,
    :vtype_list, 8
  ]
  
  # Supported JavaScript dialog types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:jsdialog_type_t).</em>
  # 
  # === Options:
  # :jsdialogtype_alert ::
  #   
  # :jsdialogtype_confirm ::
  #   
  # :jsdialogtype_prompt ::
  #   
  # 
  # @method _enum_jsdialog_type_t_
  # @return [Symbol]
  # @scope class
  enum :jsdialog_type_t, [
    :jsdialogtype_alert, 0,
    :jsdialogtype_confirm, 1,
    :jsdialogtype_prompt, 2
  ]
  
  # Supported menu IDs. Non-English translations can be provided for the
  # IDS_MENU_* strings in CefResourceBundleHandler::GetLocalizedString().
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:menu_id_t).</em>
  # 
  # === Options:
  # :back ::
  #   Navigation.
  # :forward ::
  #   
  # :reload ::
  #   
  # :reload_nocache ::
  #   
  # :stopload ::
  #   
  # :undo ::
  #   Editing.
  # :redo_ ::
  #   
  # :cut ::
  #   
  # :copy ::
  #   
  # :paste ::
  #   
  # :delete ::
  #   
  # :select_all ::
  #   
  # :find ::
  #   Miscellaneous.
  # :print ::
  #   
  # :view_source ::
  #   
  # :user_first ::
  #   defined in the tools/gritsettings/resource_ids file.
  # :user_last ::
  #   
  # 
  # @method _enum_menu_id_t_
  # @return [Symbol]
  # @scope class
  enum :menu_id_t, [
    :back, 100,
    :forward, 101,
    :reload, 102,
    :reload_nocache, 103,
    :stopload, 104,
    :undo, 110,
    :redo_, 111,
    :cut, 112,
    :copy, 113,
    :paste, 114,
    :delete, 115,
    :select_all, 116,
    :find, 130,
    :print, 131,
    :view_source, 132,
    :user_first, 26500,
    :user_last, 28500
  ]
  
  # Supported event bit flags.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:event_flags_t).</em>
  # 
  # === Options:
  # :eventflag_none ::
  #   
  # :eventflag_caps_lock_down ::
  #   
  # :eventflag_shift_down ::
  #   
  # :eventflag_control_down ::
  #   
  # :eventflag_alt_down ::
  #   
  # :eventflag_left_mouse_button ::
  #   
  # :eventflag_middle_mouse_button ::
  #   
  # :eventflag_right_mouse_button ::
  #   
  # :eventflag_command_down ::
  #   Mac OS-X command key.
  # :eventflag_extended ::
  #   Windows extended key (see WM_KEYDOWN doc).
  # 
  # @method _enum_event_flags_t_
  # @return [Symbol]
  # @scope class
  enum :event_flags_t, [
    :eventflag_none, 0,
    :eventflag_caps_lock_down, 1,
    :eventflag_shift_down, 2,
    :eventflag_control_down, 4,
    :eventflag_alt_down, 8,
    :eventflag_left_mouse_button, 16,
    :eventflag_middle_mouse_button, 32,
    :eventflag_right_mouse_button, 64,
    :eventflag_command_down, 128,
    :eventflag_extended, 256
  ]
  
  # Supported menu item types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:menu_item_type_t).</em>
  # 
  # === Options:
  # :menuitemtype_none ::
  #   
  # :menuitemtype_command ::
  #   
  # :menuitemtype_check ::
  #   
  # :menuitemtype_radio ::
  #   
  # :menuitemtype_separator ::
  #   
  # :menuitemtype_submenu ::
  #   
  # 
  # @method _enum_menu_item_type_t_
  # @return [Symbol]
  # @scope class
  enum :menu_item_type_t, [
    :menuitemtype_none, 0,
    :menuitemtype_command, 1,
    :menuitemtype_check, 2,
    :menuitemtype_radio, 3,
    :menuitemtype_separator, 4,
    :menuitemtype_submenu, 5
  ]
  
  # Supported context menu type flags.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:context_menu_type_flags_t).</em>
  # 
  # === Options:
  # :cm_typeflag_none ::
  #   No node is selected.
  # :cm_typeflag_page ::
  #   The top page is selected.
  # :cm_typeflag_frame ::
  #   A subframe page is selected.
  # :cm_typeflag_link ::
  #   A link is selected.
  # :cm_typeflag_media ::
  #   A media node is selected.
  # :cm_typeflag_selection ::
  #   There is a textual or mixed selection that is selected.
  # :cm_typeflag_editable ::
  #   An editable element is selected.
  # 
  # @method _enum_context_menu_type_flags_t_
  # @return [Symbol]
  # @scope class
  enum :context_menu_type_flags_t, [
    :cm_typeflag_none, 0,
    :cm_typeflag_page, 1,
    :cm_typeflag_frame, 2,
    :cm_typeflag_link, 4,
    :cm_typeflag_media, 8,
    :cm_typeflag_selection, 16,
    :cm_typeflag_editable, 32
  ]
  
  # Supported context menu media types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:context_menu_media_type_t).</em>
  # 
  # === Options:
  # :cm_mediatype_none ::
  #   No special node is in context.
  # :cm_mediatype_image ::
  #   An image node is selected.
  # :cm_mediatype_video ::
  #   A video node is selected.
  # :cm_mediatype_audio ::
  #   An audio node is selected.
  # :cm_mediatype_file ::
  #   A file node is selected.
  # :cm_mediatype_plugin ::
  #   A plugin node is selected.
  # 
  # @method _enum_context_menu_media_type_t_
  # @return [Symbol]
  # @scope class
  enum :context_menu_media_type_t, [
    :cm_mediatype_none, 0,
    :cm_mediatype_image, 1,
    :cm_mediatype_video, 2,
    :cm_mediatype_audio, 3,
    :cm_mediatype_file, 4,
    :cm_mediatype_plugin, 5
  ]
  
  # Supported context menu media state bit flags.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:context_menu_media_state_flags_t).</em>
  # 
  # === Options:
  # :cm_mediaflag_none ::
  #   
  # :cm_mediaflag_error ::
  #   
  # :cm_mediaflag_paused ::
  #   
  # :cm_mediaflag_muted ::
  #   
  # :cm_mediaflag_loop ::
  #   
  # :cm_mediaflag_can_save ::
  #   
  # :cm_mediaflag_has_audio ::
  #   
  # :cm_mediaflag_has_video ::
  #   
  # :cm_mediaflag_control_root_element ::
  #   
  # :cm_mediaflag_can_print ::
  #   
  # :cm_mediaflag_can_rotate ::
  #   
  # 
  # @method _enum_context_menu_media_state_flags_t_
  # @return [Symbol]
  # @scope class
  enum :context_menu_media_state_flags_t, [
    :cm_mediaflag_none, 0,
    :cm_mediaflag_error, 1,
    :cm_mediaflag_paused, 2,
    :cm_mediaflag_muted, 4,
    :cm_mediaflag_loop, 8,
    :cm_mediaflag_can_save, 16,
    :cm_mediaflag_has_audio, 32,
    :cm_mediaflag_has_video, 64,
    :cm_mediaflag_control_root_element, 128,
    :cm_mediaflag_can_print, 256,
    :cm_mediaflag_can_rotate, 512
  ]
  
  # Supported context menu edit state bit flags.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:context_menu_edit_state_flags_t).</em>
  # 
  # === Options:
  # :cm_editflag_none ::
  #   
  # :cm_editflag_can_undo ::
  #   
  # :cm_editflag_can_redo ::
  #   
  # :cm_editflag_can_cut ::
  #   
  # :cm_editflag_can_copy ::
  #   
  # :cm_editflag_can_paste ::
  #   
  # :cm_editflag_can_delete ::
  #   
  # :cm_editflag_can_select_all ::
  #   
  # :cm_editflag_can_translate ::
  #   
  # 
  # @method _enum_context_menu_edit_state_flags_t_
  # @return [Symbol]
  # @scope class
  enum :context_menu_edit_state_flags_t, [
    :cm_editflag_none, 0,
    :cm_editflag_can_undo, 1,
    :cm_editflag_can_redo, 2,
    :cm_editflag_can_cut, 4,
    :cm_editflag_can_copy, 8,
    :cm_editflag_can_paste, 16,
    :cm_editflag_can_delete, 32,
    :cm_editflag_can_select_all, 64,
    :cm_editflag_can_translate, 128
  ]
  
  # Key event types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:key_event_type_t).</em>
  # 
  # === Options:
  # :keyevent_rawkeydown ::
  #   
  # :keyevent_keydown ::
  #   
  # :keyevent_keyup ::
  #   
  # :keyevent_char ::
  #   
  # 
  # @method _enum_key_event_type_t_
  # @return [Symbol]
  # @scope class
  enum :key_event_type_t, [
    :keyevent_rawkeydown, 0,
    :keyevent_keydown, 1,
    :keyevent_keyup, 2,
    :keyevent_char, 3
  ]
  
  # Key event modifiers.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:key_event_modifiers_t).</em>
  # 
  # === Options:
  # :shift ::
  #   
  # :ctrl ::
  #   
  # :alt ::
  #   
  # :meta ::
  #   
  # :keypad ::
  #   
  # 
  # @method _enum_key_event_modifiers_t_
  # @return [Symbol]
  # @scope class
  enum :key_event_modifiers_t, [
    :shift, 1,
    :ctrl, 2,
    :alt, 4,
    :meta, 8,
    :keypad, 16
  ]
  
  # Structure representing keyboard event information.
  # 
  # = Fields:
  # :type ::
  #   (Symbol from _enum_key_event_type_t_) The type of keyboard event.
  # :modifiers ::
  #   (Integer) Bit flags describing any pressed modifier keys. See
  #   cef_key_event_modifiers_t for values.
  # :windows_key_code ::
  #   (Integer) The Windows key code for the key event. This value is used by the DOM
  #   specification. Sometimes it comes directly from the event (i.e. on
  #   Windows) and sometimes it's determined using a mapping function. See
  #   WebCore/platform/chromium/KeyboardCodes.h for the list of values.
  # :native_key_code ::
  #   (Integer) The actual key code genenerated by the platform.
  # :is_system_key ::
  #   (Integer) Indicates whether the event is considered a "system key" event (see
  #   http://msdn.microsoft.com/en-us/library/ms646286(VS.85).aspx for details).
  #   This value will always be false on non-Windows platforms.
  # :character ::
  #   (Integer) The character generated by the keystroke.
  # :unmodified_character ::
  #   (Integer) Same as |character| but unmodified by any concurrently-held modifiers
  #   (except shift). This is useful for working out shortcut keys.
  # :focus_on_editable_field ::
  #   (Integer) True if the focus is currently on an editable field on the page. This is
  #   useful for determining if standard key events should be intercepted.
  class KeyEventT < FFI::Struct
    layout :type, :key_event_type_t,
           :modifiers, :int,
           :windows_key_code, :int,
           :native_key_code, :int,
           :is_system_key, :int,
           :character, :ushort,
           :unmodified_character, :ushort,
           :focus_on_editable_field, :int
  end
  
  # Focus sources.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:focus_source_t).</em>
  # 
  # === Options:
  # :navigation ::
  #   The source is explicit navigation via the API (LoadURL(), etc).
  # :system ::
  #   The source is a system-generated focus event.
  # 
  # @method _enum_focus_source_t_
  # @return [Symbol]
  # @scope class
  enum :focus_source_t, [
    :navigation, 0,
    :system, 1
  ]
  
  # Supported XML encoding types. The parser supports ASCII, ISO-8859-1, and
  # UTF16 (LE and BE) by default. All other types must be translated to UTF8
  # before being passed to the parser. If a BOM is detected and the correct
  # decoder is available then that decoder will be used automatically.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:xml_encoding_type_t).</em>
  # 
  # === Options:
  # :none ::
  #   
  # :utf8 ::
  #   
  # :utf16le ::
  #   
  # :utf16be ::
  #   
  # :ascii ::
  #   
  # 
  # @method _enum_xml_encoding_type_t_
  # @return [Symbol]
  # @scope class
  enum :xml_encoding_type_t, [
    :none, 0,
    :utf8, 1,
    :utf16le, 2,
    :utf16be, 3,
    :ascii, 4
  ]
  
  # XML node types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:xml_node_type_t).</em>
  # 
  # === Options:
  # :unsupported ::
  #   
  # :processing_instruction ::
  #   
  # :document_type ::
  #   
  # :element_start ::
  #   
  # :element_end ::
  #   
  # :attribute ::
  #   
  # :text ::
  #   
  # :cdata ::
  #   
  # :entity_reference ::
  #   
  # :whitespace ::
  #   
  # :comment ::
  #   
  # 
  # @method _enum_xml_node_type_t_
  # @return [Symbol]
  # @scope class
  enum :xml_node_type_t, [
    :unsupported, 0,
    :processing_instruction, 1,
    :document_type, 2,
    :element_start, 3,
    :element_end, 4,
    :attribute, 5,
    :text, 6,
    :cdata, 7,
    :entity_reference, 8,
    :whitespace, 9,
    :comment, 10
  ]
  
  # Status message types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:handler_statustype_t).</em>
  # 
  # === Options:
  # :text ::
  #   
  # :mouseover_url ::
  #   
  # :keyboard_focus_url ::
  #   
  # 
  # @method _enum_handler_statustype_t_
  # @return [Symbol]
  # @scope class
  enum :handler_statustype_t, [
    :text, 0,
    :mouseover_url, 1,
    :keyboard_focus_url, 2
  ]
  
  # Popup window features.
  # 
  # = Fields:
  # :x ::
  #   (Integer) 
  # :x_set ::
  #   (Integer) 
  # :y ::
  #   (Integer) 
  # :y_set ::
  #   (Integer) 
  # :width ::
  #   (Integer) 
  # :width_set ::
  #   (Integer) 
  # :height ::
  #   (Integer) 
  # :height_set ::
  #   (Integer) 
  # :menu_bar_visible ::
  #   (Integer) 
  # :status_bar_visible ::
  #   (Integer) 
  # :tool_bar_visible ::
  #   (Integer) 
  # :location_bar_visible ::
  #   (Integer) 
  # :scrollbars_visible ::
  #   (Integer) 
  # :resizable ::
  #   (Integer) 
  # :fullscreen ::
  #   (Integer) 
  # :dialog ::
  #   (Integer) 
  # :additional_features ::
  #   (FFI::Pointer(StringListT)) 
  class PopupFeaturesT < FFI::Struct
    layout :x, :int,
           :x_set, :int,
           :y, :int,
           :y_set, :int,
           :width, :int,
           :width_set, :int,
           :height, :int,
           :height_set, :int,
           :menu_bar_visible, :int,
           :status_bar_visible, :int,
           :tool_bar_visible, :int,
           :location_bar_visible, :int,
           :scrollbars_visible, :int,
           :resizable, :int,
           :fullscreen, :int,
           :dialog, :int,
           :additional_features, :pointer
  end
  
  # Proxy types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:proxy_type_t).</em>
  # 
  # === Options:
  # :direct ::
  #   
  # :named ::
  #   
  # :pac_string ::
  #   
  # 
  # @method _enum_proxy_type_t_
  # @return [Symbol]
  # @scope class
  enum :proxy_type_t, [
    :direct, 0,
    :named, 1,
    :pac_string, 2
  ]
  
  # Proxy information.
  # 
  # = Fields:
  # :proxy_type ::
  #   (Symbol from _enum_proxy_type_t_) 
  # :proxy_list ::
  #   (unknown) 
  class ProxyInfoT < FFI::Struct
    layout :proxy_type, :proxy_type_t,
           :proxy_list, :char
  end
  
  # DOM document types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:dom_document_type_t).</em>
  # 
  # === Options:
  # :unknown ::
  #   
  # :html ::
  #   
  # :xhtml ::
  #   
  # :plugin ::
  #   
  # 
  # @method _enum_dom_document_type_t_
  # @return [Symbol]
  # @scope class
  enum :dom_document_type_t, [
    :unknown, 0,
    :html, 1,
    :xhtml, 2,
    :plugin, 3
  ]
  
  # DOM event category flags.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:dom_event_category_t).</em>
  # 
  # === Options:
  # :unknown ::
  #   
  # :ui ::
  #   
  # :mouse ::
  #   
  # :mutation ::
  #   
  # :keyboard ::
  #   
  # :text ::
  #   
  # :composition ::
  #   
  # :drag ::
  #   
  # :clipboard ::
  #   
  # :message ::
  #   
  # :wheel ::
  #   
  # :before_text_inserted ::
  #   
  # :overflow ::
  #   
  # :page_transition ::
  #   
  # :popstate ::
  #   
  # :progress ::
  #   
  # :xmlhttprequest_progress ::
  #   
  # :webkit_animation ::
  #   
  # :webkit_transition ::
  #   
  # :before_load ::
  #   
  # 
  # @method _enum_dom_event_category_t_
  # @return [Symbol]
  # @scope class
  enum :dom_event_category_t, [
    :unknown, 0,
    :ui, 1,
    :mouse, 2,
    :mutation, 4,
    :keyboard, 8,
    :text, 16,
    :composition, 32,
    :drag, 64,
    :clipboard, 128,
    :message, 256,
    :wheel, 512,
    :before_text_inserted, 1024,
    :overflow, 2048,
    :page_transition, 4096,
    :popstate, 8192,
    :progress, 16384,
    :xmlhttprequest_progress, 32768,
    :webkit_animation, 65536,
    :webkit_transition, 131072,
    :before_load, 262144
  ]
  
  # DOM event processing phases.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:dom_event_phase_t).</em>
  # 
  # === Options:
  # :unknown ::
  #   
  # :capturing ::
  #   
  # :at_target ::
  #   
  # :bubbling ::
  #   
  # 
  # @method _enum_dom_event_phase_t_
  # @return [Symbol]
  # @scope class
  enum :dom_event_phase_t, [
    :unknown, 0,
    :capturing, 1,
    :at_target, 2,
    :bubbling, 3
  ]
  
  # DOM node types.
  # 
  # <em>This entry is only for documentation and no real method. The FFI::Enum can be accessed via #enum_type(:dom_node_type_t).</em>
  # 
  # === Options:
  # :unsupported ::
  #   
  # :element ::
  #   
  # :attribute ::
  #   
  # :text ::
  #   
  # :cdata_section ::
  #   
  # :entity_reference ::
  #   
  # :entity ::
  #   
  # :processing_instructions ::
  #   
  # :comment ::
  #   
  # :document ::
  #   
  # :document_type ::
  #   
  # :document_fragment ::
  #   
  # :notation ::
  #   
  # :xpath_namespace ::
  #   
  # 
  # @method _enum_dom_node_type_t_
  # @return [Symbol]
  # @scope class
  enum :dom_node_type_t, [
    :unsupported, 0,
    :element, 1,
    :attribute, 2,
    :text, 3,
    :cdata_section, 4,
    :entity_reference, 5,
    :entity, 6,
    :processing_instructions, 7,
    :comment, 8,
    :document, 9,
    :document_type, 10,
    :document_fragment, 11,
    :notation, 12,
    :xpath_namespace, 13
  ]
  
end
