# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :base ::
  #   (unknown) ///
  # :read ::
  #   (FFI::Pointer(*)) ///
  # :seek ::
  #   (FFI::Pointer(*)) ///
  # :tell ::
  #   (FFI::Pointer(*)) ///
  # :eof ::
  #   (FFI::Pointer(*)) ///
  class CefReadHandlerT < FFI::Struct
    layout :base, :char,
           :read, :pointer,
           :seek, :pointer,
           :tell, :pointer,
           :eof, :pointer
  end
  
  # ///
  # 
  # = Fields:
  # :base ::
  #   (unknown) ///
  # :read ::
  #   (FFI::Pointer(*)) ///
  # :seek ::
  #   (FFI::Pointer(*)) ///
  # :tell ::
  #   (FFI::Pointer(*)) ///
  # :eof ::
  #   (FFI::Pointer(*)) ///
  class CefStreamReaderT < FFI::Struct
    layout :base, :char,
           :read, :pointer,
           :seek, :pointer,
           :tell, :pointer,
           :eof, :pointer
  end
  
  # (Not documented)
  # 
  # @method stream_reader_create_for_file(file_name)
  # @param [FFI::Pointer(*StringT)] file_name 
  # @return [CefStreamReaderT] 
  # @scope class
  attach_function :stream_reader_create_for_file, :cef_stream_reader_create_for_file, [:pointer], CefStreamReaderT
  
  # (Not documented)
  # 
  # @method stream_reader_create_for_data(data, size)
  # @param [FFI::Pointer(*Void)] data 
  # @param [Integer] size 
  # @return [CefStreamReaderT] 
  # @scope class
  attach_function :stream_reader_create_for_data, :cef_stream_reader_create_for_data, [:pointer, :ulong], CefStreamReaderT
  
  # (Not documented)
  # 
  # @method stream_reader_create_for_handler(handler)
  # @param [CefReadHandlerT] handler 
  # @return [CefStreamReaderT] 
  # @scope class
  attach_function :stream_reader_create_for_handler, :cef_stream_reader_create_for_handler, [CefReadHandlerT], CefStreamReaderT
  
  # ///
  # 
  # = Fields:
  # :base ::
  #   (unknown) ///
  # :write ::
  #   (FFI::Pointer(*)) ///
  # :seek ::
  #   (FFI::Pointer(*)) ///
  # :tell ::
  #   (FFI::Pointer(*)) ///
  # :flush ::
  #   (FFI::Pointer(*)) ///
  class CefWriteHandlerT < FFI::Struct
    layout :base, :char,
           :write, :pointer,
           :seek, :pointer,
           :tell, :pointer,
           :flush, :pointer
  end
  
  # ///
  # 
  # = Fields:
  # :base ::
  #   (unknown) ///
  # :write ::
  #   (FFI::Pointer(*)) ///
  # :seek ::
  #   (FFI::Pointer(*)) ///
  # :tell ::
  #   (FFI::Pointer(*)) ///
  # :flush ::
  #   (FFI::Pointer(*)) ///
  class CefStreamWriterT < FFI::Struct
    layout :base, :char,
           :write, :pointer,
           :seek, :pointer,
           :tell, :pointer,
           :flush, :pointer
  end
  
  # (Not documented)
  # 
  # @method stream_writer_create_for_file(file_name)
  # @param [FFI::Pointer(*StringT)] file_name 
  # @return [CefStreamWriterT] 
  # @scope class
  attach_function :stream_writer_create_for_file, :cef_stream_writer_create_for_file, [:pointer], CefStreamWriterT
  
  # (Not documented)
  # 
  # @method stream_writer_create_for_handler(handler)
  # @param [CefWriteHandlerT] handler 
  # @return [CefStreamWriterT] 
  # @scope class
  attach_function :stream_writer_create_for_handler, :cef_stream_writer_create_for_handler, [CefWriteHandlerT], CefStreamWriterT
  
end
