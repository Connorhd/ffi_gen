# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :base ::
  #   (unknown) ///
  # :move_to_next_node ::
  #   (FFI::Pointer(*)) ///
  # :close ::
  #   (FFI::Pointer(*)) ///
  # :has_error ::
  #   (FFI::Pointer(*)) ///
  # :get_error ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_type ::
  #   (FFI::Pointer(*)) ///
  # :get_depth ::
  #   (FFI::Pointer(*)) ///
  # :get_local_name ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_prefix ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_qualified_name ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_namespace_uri ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_base_uri ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_xml_lang ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :is_empty_element ::
  #   (FFI::Pointer(*)) ///
  # :has_value ::
  #   (FFI::Pointer(*)) ///
  # :get_value ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :has_attributes ::
  #   (FFI::Pointer(*)) ///
  # :get_attribute_count ::
  #   (FFI::Pointer(*)) ///
  # :get_attribute_byindex ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_attribute_byqname ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_attribute_bylname ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_inner_xml ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_outer_xml ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_line_number ::
  #   (FFI::Pointer(*)) ///
  # :move_to_attribute_byindex ::
  #   (FFI::Pointer(*)) ///
  # :move_to_attribute_byqname ::
  #   (FFI::Pointer(*)) ///
  # :move_to_attribute_bylname ::
  #   (FFI::Pointer(*)) ///
  # :move_to_first_attribute ::
  #   (FFI::Pointer(*)) ///
  # :move_to_next_attribute ::
  #   (FFI::Pointer(*)) ///
  # :move_to_carrying_element ::
  #   (FFI::Pointer(*)) ///
  class CefXmlReaderT < FFI::Struct
    layout :base, :char,
           :move_to_next_node, :pointer,
           :close, :pointer,
           :has_error, :pointer,
           :get_error, :pointer,
           :get_type, :pointer,
           :get_depth, :pointer,
           :get_local_name, :pointer,
           :get_prefix, :pointer,
           :get_qualified_name, :pointer,
           :get_namespace_uri, :pointer,
           :get_base_uri, :pointer,
           :get_xml_lang, :pointer,
           :is_empty_element, :pointer,
           :has_value, :pointer,
           :get_value, :pointer,
           :has_attributes, :pointer,
           :get_attribute_count, :pointer,
           :get_attribute_byindex, :pointer,
           :get_attribute_byqname, :pointer,
           :get_attribute_bylname, :pointer,
           :get_inner_xml, :pointer,
           :get_outer_xml, :pointer,
           :get_line_number, :pointer,
           :move_to_attribute_byindex, :pointer,
           :move_to_attribute_byqname, :pointer,
           :move_to_attribute_bylname, :pointer,
           :move_to_first_attribute, :pointer,
           :move_to_next_attribute, :pointer,
           :move_to_carrying_element, :pointer
  end
  
  # ///
  class CefStreamReaderT < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # @method xml_reader_create(stream, encoding_type, uri)
  # @param [CefStreamReaderT] stream 
  # @param [unknown] encoding_type 
  # @param [FFI::Pointer(*StringT)] uri 
  # @return [CefXmlReaderT] 
  # @scope class
  attach_function :xml_reader_create, :cef_xml_reader_create, [CefStreamReaderT, :char, :pointer], CefXmlReaderT
  
end
