# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # Supports creation and modification of menus. See cef_menu_id_t for the
  # command ids that have default implementations. All user-defined command ids
  # should be between MENU_ID_USER_FIRST and MENU_ID_USER_LAST. The functions of
  # this structure can only be accessed on the browser process the UI thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :clear ::
  #   (FFI::Pointer(*)) Clears the menu. Returns true (1) on success.
  # :get_count ::
  #   (FFI::Pointer(*)) Returns the number of items in this menu.
  # :add_separator ::
  #   (FFI::Pointer(*)) Add a separator to the menu. Returns true (1) on success.
  # :add_item ::
  #   (FFI::Pointer(*)) Add an item to the menu. Returns true (1) on success.
  # :add_check_item ::
  #   (FFI::Pointer(*)) Add a check item to the menu. Returns true (1) on success.
  # :add_radio_item ::
  #   (FFI::Pointer(*)) Add a radio item to the menu. Only a single item with the specified
  #   |group_id| can be checked at a time. Returns true (1) on success.
  # :add_sub_menu ::
  #   (FFI::Pointer(*)) Add a sub-menu to the menu. The new sub-menu is returned.
  # :insert_separator_at ::
  #   (FFI::Pointer(*)) Insert a separator in the menu at the specified |index|. Returns true (1)
  #   on success.
  # :insert_item_at ::
  #   (FFI::Pointer(*)) Insert an item in the menu at the specified |index|. Returns true (1) on
  #   success.
  # :insert_check_item_at ::
  #   (FFI::Pointer(*)) Insert a check item in the menu at the specified |index|. Returns true (1)
  #   on success.
  # :insert_radio_item_at ::
  #   (FFI::Pointer(*)) Insert a radio item in the menu at the specified |index|. Only a single
  #   item with the specified |group_id| can be checked at a time. Returns true
  #   (1) on success.
  # :insert_sub_menu_at ::
  #   (FFI::Pointer(*)) Insert a sub-menu in the menu at the specified |index|. The new sub-menu is
  #   returned.
  # :remove ::
  #   (FFI::Pointer(*)) Removes the item with the specified |command_id|. Returns true (1) on
  #   success.
  # :remove_at ::
  #   (FFI::Pointer(*)) Removes the item at the specified |index|. Returns true (1) on success.
  # :get_index_of ::
  #   (FFI::Pointer(*)) Returns the index associated with the specified |command_id| or -1 if not
  #   found due to the command id not existing in the menu.
  # :get_command_id_at ::
  #   (FFI::Pointer(*)) Returns the command id at the specified |index| or -1 if not found due to
  #   invalid range or the index being a separator.
  # :set_command_id_at ::
  #   (FFI::Pointer(*)) Sets the command id at the specified |index|. Returns true (1) on success.
  # :get_label ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_label_at ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :set_label ::
  #   (FFI::Pointer(*)) Sets the label for the specified |command_id|. Returns true (1) on success.
  # :set_label_at ::
  #   (FFI::Pointer(*)) Set the label at the specified |index|. Returns true (1) on success.
  # :get_type ::
  #   (FFI::Pointer(*)) Returns the item type for the specified |command_id|.
  # :get_type_at ::
  #   (FFI::Pointer(*)) Returns the item type at the specified |index|.
  # :get_group_id ::
  #   (FFI::Pointer(*)) Returns the group id for the specified |command_id| or -1 if invalid.
  # :get_group_id_at ::
  #   (FFI::Pointer(*)) Returns the group id at the specified |index| or -1 if invalid.
  # :set_group_id ::
  #   (FFI::Pointer(*)) Sets the group id for the specified |command_id|. Returns true (1) on
  #   success.
  # :set_group_id_at ::
  #   (FFI::Pointer(*)) Sets the group id at the specified |index|. Returns true (1) on success.
  # :get_sub_menu ::
  #   (FFI::Pointer(*)) Returns the submenu for the specified |command_id| or NULL if invalid.
  # :get_sub_menu_at ::
  #   (FFI::Pointer(*)) Returns the submenu at the specified |index| or NULL if invalid.
  # :is_visible ::
  #   (FFI::Pointer(*)) Returns true (1) if the specified |command_id| is visible.
  # :is_visible_at ::
  #   (FFI::Pointer(*)) Returns true (1) if the specified |index| is visible.
  # :set_visible ::
  #   (FFI::Pointer(*)) Change the visibility of the specified |command_id|. Returns true (1) on
  #   success.
  # :set_visible_at ::
  #   (FFI::Pointer(*)) Change the visibility at the specified |index|. Returns true (1) on
  #   success.
  # :is_enabled ::
  #   (FFI::Pointer(*)) Returns true (1) if the specified |command_id| is enabled.
  # :is_enabled_at ::
  #   (FFI::Pointer(*)) Returns true (1) if the specified |index| is enabled.
  # :set_enabled ::
  #   (FFI::Pointer(*)) Change the enabled status of the specified |command_id|. Returns true (1)
  #   on success.
  # :set_enabled_at ::
  #   (FFI::Pointer(*)) Change the enabled status at the specified |index|. Returns true (1) on
  #   success.
  # :is_checked ::
  #   (FFI::Pointer(*)) Returns true (1) if the specified |command_id| is checked. Only applies to
  #   check and radio items.
  # :is_checked_at ::
  #   (FFI::Pointer(*)) Returns true (1) if the specified |index| is checked. Only applies to check
  #   and radio items.
  # :set_checked ::
  #   (FFI::Pointer(*)) Check the specified |command_id|. Only applies to check and radio items.
  #   Returns true (1) on success.
  # :set_checked_at ::
  #   (FFI::Pointer(*)) Check the specified |index|. Only applies to check and radio items. Returns
  #   true (1) on success.
  # :has_accelerator ::
  #   (FFI::Pointer(*)) Returns true (1) if the specified |command_id| has a keyboard accelerator
  #   assigned.
  # :has_accelerator_at ::
  #   (FFI::Pointer(*)) Returns true (1) if the specified |index| has a keyboard accelerator
  #   assigned.
  # :set_accelerator ::
  #   (FFI::Pointer(*)) Set the keyboard accelerator for the specified |command_id|. |key_code| can
  #   be any virtual key or character value. Returns true (1) on success.
  # :set_accelerator_at ::
  #   (FFI::Pointer(*)) Set the keyboard accelerator at the specified |index|. |key_code| can be
  #   any virtual key or character value. Returns true (1) on success.
  # :remove_accelerator ::
  #   (FFI::Pointer(*)) Remove the keyboard accelerator for the specified |command_id|. Returns
  #   true (1) on success.
  # :remove_accelerator_at ::
  #   (FFI::Pointer(*)) Remove the keyboard accelerator at the specified |index|. Returns true (1)
  #   on success.
  # :get_accelerator ::
  #   (FFI::Pointer(*)) Retrieves the keyboard accelerator for the specified |command_id|. Returns
  #   true (1) on success.
  # :get_accelerator_at ::
  #   (FFI::Pointer(*)) Retrieves the keyboard accelerator for the specified |index|. Returns true
  #   (1) on success.
  class MenuModelT < FFI::Struct
    layout :base, :char,
           :clear, :pointer,
           :get_count, :pointer,
           :add_separator, :pointer,
           :add_item, :pointer,
           :add_check_item, :pointer,
           :add_radio_item, :pointer,
           :add_sub_menu, :pointer,
           :insert_separator_at, :pointer,
           :insert_item_at, :pointer,
           :insert_check_item_at, :pointer,
           :insert_radio_item_at, :pointer,
           :insert_sub_menu_at, :pointer,
           :remove, :pointer,
           :remove_at, :pointer,
           :get_index_of, :pointer,
           :get_command_id_at, :pointer,
           :set_command_id_at, :pointer,
           :get_label, :pointer,
           :get_label_at, :pointer,
           :set_label, :pointer,
           :set_label_at, :pointer,
           :get_type, :pointer,
           :get_type_at, :pointer,
           :get_group_id, :pointer,
           :get_group_id_at, :pointer,
           :set_group_id, :pointer,
           :set_group_id_at, :pointer,
           :get_sub_menu, :pointer,
           :get_sub_menu_at, :pointer,
           :is_visible, :pointer,
           :is_visible_at, :pointer,
           :set_visible, :pointer,
           :set_visible_at, :pointer,
           :is_enabled, :pointer,
           :is_enabled_at, :pointer,
           :set_enabled, :pointer,
           :set_enabled_at, :pointer,
           :is_checked, :pointer,
           :is_checked_at, :pointer,
           :set_checked, :pointer,
           :set_checked_at, :pointer,
           :has_accelerator, :pointer,
           :has_accelerator_at, :pointer,
           :set_accelerator, :pointer,
           :set_accelerator_at, :pointer,
           :remove_accelerator, :pointer,
           :remove_accelerator_at, :pointer,
           :get_accelerator, :pointer,
           :get_accelerator_at, :pointer
  end
  
end
