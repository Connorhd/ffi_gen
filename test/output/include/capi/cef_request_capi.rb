# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # Structure used to represent a web request. The functions of this structure
  # may be called on any thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :is_read_only ::
  #   (FFI::Pointer(*)) Returns true (1) if this object is read-only.
  # :get_url ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :set_url ::
  #   (FFI::Pointer(*)) Set the fully qualified URL.
  # :get_method ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :set_method ::
  #   (FFI::Pointer(*)) Set the request function type.
  # :get_post_data ::
  #   (FFI::Pointer(*)) Get the post data.
  # :set_post_data ::
  #   (FFI::Pointer(*)) Set the post data.
  # :get_header_map ::
  #   (FFI::Pointer(*)) Get the header values.
  # :set_header_map ::
  #   (FFI::Pointer(*)) Set the header values.
  # :set ::
  #   (FFI::Pointer(*)) Set all values at one time.
  # :get_flags ::
  #   (FFI::Pointer(*)) Get the flags used in combination with cef_urlrequest_t. See
  #   cef_urlrequest_flags_t for supported values.
  # :set_flags ::
  #   (FFI::Pointer(*)) Set the flags used in combination with cef_urlrequest_t.  See
  #   cef_urlrequest_flags_t for supported values.
  # :get_first_party_for_cookies ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :set_first_party_for_cookies ::
  #   (FFI::Pointer(*)) Get the URL to the first party for cookies used in combination with
  #   cef_urlrequest_t.
  class RequestT < FFI::Struct
    layout :base, :char,
           :is_read_only, :pointer,
           :get_url, :pointer,
           :set_url, :pointer,
           :get_method, :pointer,
           :set_method, :pointer,
           :get_post_data, :pointer,
           :set_post_data, :pointer,
           :get_header_map, :pointer,
           :set_header_map, :pointer,
           :set, :pointer,
           :get_flags, :pointer,
           :set_flags, :pointer,
           :get_first_party_for_cookies, :pointer,
           :set_first_party_for_cookies, :pointer
  end
  
  # Create a new cef_request_t object.
  # 
  # @method request_create()
  # @return [RequestT] 
  # @scope class
  attach_function :request_create, :cef_request_create, [], RequestT
  
  # (Not documented)
  class PostDataElementT < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class PostDataElementT < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class PostDataElementT < FFI::Struct
    layout :dummy, :char
  end
  
  # Structure used to represent post data for a web request. The functions of
  # this structure may be called on any thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :is_read_only ::
  #   (FFI::Pointer(*)) Returns true (1) if this object is read-only.
  # :get_element_count ::
  #   (FFI::Pointer(*)) Returns the number of existing post data elements.
  # :get_elements ::
  #   (FFI::Pointer(*)) Retrieve the post data elements.
  # :remove_element ::
  #   (FFI::Pointer(*)) Remove the specified post data element.  Returns true (1) if the removal
  #   succeeds.
  # :add_element ::
  #   (FFI::Pointer(*)) Add the specified post data element.  Returns true (1) if the add succeeds.
  # :remove_elements ::
  #   (FFI::Pointer(*)) Remove all existing post data elements.
  class PostDataT < FFI::Struct
    layout :base, :char,
           :is_read_only, :pointer,
           :get_element_count, :pointer,
           :get_elements, :pointer,
           :remove_element, :pointer,
           :add_element, :pointer,
           :remove_elements, :pointer
  end
  
  # Create a new cef_post_data_t object.
  # 
  # @method post_data_create()
  # @return [PostDataT] 
  # @scope class
  attach_function :post_data_create, :cef_post_data_create, [], PostDataT
  
  # Structure used to represent a single element in the request post data. The
  # functions of this structure may be called on any thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :is_read_only ::
  #   (FFI::Pointer(*)) Returns true (1) if this object is read-only.
  # :set_to_empty ::
  #   (FFI::Pointer(*)) Remove all contents from the post data element.
  # :set_to_file ::
  #   (FFI::Pointer(*)) The post data element will represent a file.
  # :set_to_bytes ::
  #   (FFI::Pointer(*)) The post data element will represent bytes.  The bytes passed in will be
  #   copied.
  # :get_type ::
  #   (FFI::Pointer(*)) Return the type of this post data element.
  # :get_file ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_bytes_count ::
  #   (FFI::Pointer(*)) Return the number of bytes.
  # :get_bytes ::
  #   (FFI::Pointer(*)) Read up to |size| bytes into |bytes| and return the number of bytes
  #   actually read.
  class PostDataElementT < FFI::Struct
    layout :base, :char,
           :is_read_only, :pointer,
           :set_to_empty, :pointer,
           :set_to_file, :pointer,
           :set_to_bytes, :pointer,
           :get_type, :pointer,
           :get_file, :pointer,
           :get_bytes_count, :pointer,
           :get_bytes, :pointer
  end
  
  # Create a new cef_post_data_element_t object.
  # 
  # @method post_data_element_create()
  # @return [PostDataElementT] 
  # @scope class
  attach_function :post_data_element_create, :cef_post_data_element_create, [], PostDataElementT
  
end
