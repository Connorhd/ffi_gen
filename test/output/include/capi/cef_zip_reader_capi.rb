# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # Structure that supports the reading of zip archives via the zlib unzip API.
  # The functions of this structure should only be called on the thread that
  # creates the object.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :move_to_first_file ::
  #   (FFI::Pointer(*)) Moves the cursor to the first file in the archive. Returns true (1) if the
  #   cursor position was set successfully.
  # :move_to_next_file ::
  #   (FFI::Pointer(*)) Moves the cursor to the next file in the archive. Returns true (1) if the
  #   cursor position was set successfully.
  # :move_to_file ::
  #   (FFI::Pointer(*)) Moves the cursor to the specified file in the archive. If |caseSensitive|
  #   is true (1) then the search will be case sensitive. Returns true (1) if the
  #   cursor position was set successfully.
  # :close ::
  #   (FFI::Pointer(*)) Closes the archive. This should be called directly to ensure that cleanup
  #   occurs on the correct thread.
  # :get_file_name ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_file_size ::
  #   (FFI::Pointer(*)) Returns the uncompressed size of the file.
  # :get_file_last_modified ::
  #   (FFI::Pointer(*)) Returns the last modified timestamp for the file.
  # :open_file ::
  #   (FFI::Pointer(*)) Opens the file for reading of uncompressed data. A read password may
  #   optionally be specified.
  # :close_file ::
  #   (FFI::Pointer(*)) Closes the file.
  # :read_file ::
  #   (FFI::Pointer(*)) Read uncompressed file contents into the specified buffer. Returns < 0 if
  #   an error occurred, 0 if at the end of file, or the number of bytes read.
  # :tell ::
  #   (FFI::Pointer(*)) Returns the current offset in the uncompressed file contents.
  # :eof ::
  #   (FFI::Pointer(*)) Returns true (1) if at end of the file contents.
  class ZipReaderT < FFI::Struct
    layout :base, :char,
           :move_to_first_file, :pointer,
           :move_to_next_file, :pointer,
           :move_to_file, :pointer,
           :close, :pointer,
           :get_file_name, :pointer,
           :get_file_size, :pointer,
           :get_file_last_modified, :pointer,
           :open_file, :pointer,
           :close_file, :pointer,
           :read_file, :pointer,
           :tell, :pointer,
           :eof, :pointer
  end
  
  # (Not documented)
  class StreamReaderT < FFI::Struct
    layout :dummy, :char
  end
  
  # Create a new cef_zip_reader_t object. The returned object's functions can
  # only be called from the thread that created the object.
  # 
  # @method zip_reader_create(stream)
  # @param [StreamReaderT] stream 
  # @return [ZipReaderT] 
  # @scope class
  attach_function :zip_reader_create, :cef_zip_reader_create, [StreamReaderT], ZipReaderT
  
end
