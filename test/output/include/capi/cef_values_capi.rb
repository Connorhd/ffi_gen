# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # Structure representing a binary value. Can be used on any process and thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :is_valid ::
  #   (FFI::Pointer(*)) Returns true (1) if this object is valid. Do not call any other functions
  #   if this function returns false (0).
  # :is_owned ::
  #   (FFI::Pointer(*)) Returns true (1) if this object is currently owned by another object.
  # :copy ::
  #   (FFI::Pointer(*)) Returns a copy of this object. The data in this object will also be copied.
  # :get_size ::
  #   (FFI::Pointer(*)) Returns the data size.
  # :get_data ::
  #   (FFI::Pointer(*)) Read up to |buffer_size| number of bytes into |buffer|. Reading begins at
  #   the specified byte |data_offset|. Returns the number of bytes read.
  class BinaryValueT < FFI::Struct
    layout :base, :char,
           :is_valid, :pointer,
           :is_owned, :pointer,
           :copy, :pointer,
           :get_size, :pointer,
           :get_data, :pointer
  end
  
  # Creates a new object that is not owned by any other object. The specified
  # |data| will be copied.
  # 
  # @method binary_value_create(data, data_size)
  # @param [FFI::Pointer(*Void)] data 
  # @param [Integer] data_size 
  # @return [BinaryValueT] 
  # @scope class
  attach_function :binary_value_create, :cef_binary_value_create, [:pointer, :ulong], BinaryValueT
  
  # Structure representing a dictionary value. Can be used on any process and
  # thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :is_valid ::
  #   (FFI::Pointer(*)) Returns true (1) if this object is valid. Do not call any other functions
  #   if this function returns false (0).
  # :is_owned ::
  #   (FFI::Pointer(*)) Returns true (1) if this object is currently owned by another object.
  # :is_read_only ::
  #   (FFI::Pointer(*)) Returns true (1) if the values of this object are read-only. Some APIs may
  #   expose read-only objects.
  # :copy ::
  #   (FFI::Pointer(*)) Returns a writable copy of this object. If |exclude_NULL_children| is true
  #   (1) any NULL dictionaries or lists will be excluded from the copy.
  # :get_size ::
  #   (FFI::Pointer(*)) Returns the number of values.
  # :clear ::
  #   (FFI::Pointer(*)) Removes all values. Returns true (1) on success.
  # :has_key ::
  #   (FFI::Pointer(*)) Returns true (1) if the current dictionary has a value for the given key.
  # :get_keys ::
  #   (FFI::Pointer(*)) Reads all keys for this dictionary into the specified vector.
  # :remove ::
  #   (FFI::Pointer(*)) Removes the value at the specified key. Returns true (1) is the value was
  #   removed successfully.
  # :get_type ::
  #   (FFI::Pointer(*)) Returns the value type for the specified key.
  # :get_bool ::
  #   (FFI::Pointer(*)) Returns the value at the specified key as type bool.
  # :get_int ::
  #   (FFI::Pointer(*)) Returns the value at the specified key as type int.
  # :get_double ::
  #   (FFI::Pointer(*)) Returns the value at the specified key as type double.
  # :get_string ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_binary ::
  #   (FFI::Pointer(*)) Returns the value at the specified key as type binary.
  # :get_dictionary ::
  #   (FFI::Pointer(*)) Returns the value at the specified key as type dictionary.
  # :get_list ::
  #   (FFI::Pointer(*)) Returns the value at the specified key as type list.
  # :set_null ::
  #   (FFI::Pointer(*)) Sets the value at the specified key as type null. Returns true (1) if the
  #   value was set successfully.
  # :set_bool ::
  #   (FFI::Pointer(*)) Sets the value at the specified key as type bool. Returns true (1) if the
  #   value was set successfully.
  # :set_int ::
  #   (FFI::Pointer(*)) Sets the value at the specified key as type int. Returns true (1) if the
  #   value was set successfully.
  # :set_double ::
  #   (FFI::Pointer(*)) Sets the value at the specified key as type double. Returns true (1) if the
  #   value was set successfully.
  # :set_string ::
  #   (FFI::Pointer(*)) Sets the value at the specified key as type string. Returns true (1) if the
  #   value was set successfully.
  # :set_binary ::
  #   (FFI::Pointer(*)) Sets the value at the specified key as type binary. Returns true (1) if the
  #   value was set successfully. If |value| is currently owned by another object
  #   then the value will be copied and the |value| reference will not change.
  #   Otherwise, ownership will be transferred to this object and the |value|
  #   reference will be invalidated.
  # :set_dictionary ::
  #   (FFI::Pointer(*)) Sets the value at the specified key as type dict. Returns true (1) if the
  #   value was set successfully. After calling this function the |value| object
  #   will no longer be valid. If |value| is currently owned by another object
  #   then the value will be copied and the |value| reference will not change.
  #   Otherwise, ownership will be transferred to this object and the |value|
  #   reference will be invalidated.
  # :set_list ::
  #   (FFI::Pointer(*)) Sets the value at the specified key as type list. Returns true (1) if the
  #   value was set successfully. After calling this function the |value| object
  #   will no longer be valid. If |value| is currently owned by another object
  #   then the value will be copied and the |value| reference will not change.
  #   Otherwise, ownership will be transferred to this object and the |value|
  #   reference will be invalidated.
  class DictionaryValueT < FFI::Struct
    layout :base, :char,
           :is_valid, :pointer,
           :is_owned, :pointer,
           :is_read_only, :pointer,
           :copy, :pointer,
           :get_size, :pointer,
           :clear, :pointer,
           :has_key, :pointer,
           :get_keys, :pointer,
           :remove, :pointer,
           :get_type, :pointer,
           :get_bool, :pointer,
           :get_int, :pointer,
           :get_double, :pointer,
           :get_string, :pointer,
           :get_binary, :pointer,
           :get_dictionary, :pointer,
           :get_list, :pointer,
           :set_null, :pointer,
           :set_bool, :pointer,
           :set_int, :pointer,
           :set_double, :pointer,
           :set_string, :pointer,
           :set_binary, :pointer,
           :set_dictionary, :pointer,
           :set_list, :pointer
  end
  
  # Creates a new object that is not owned by any other object.
  # 
  # @method dictionary_value_create()
  # @return [DictionaryValueT] 
  # @scope class
  attach_function :dictionary_value_create, :cef_dictionary_value_create, [], DictionaryValueT
  
  # Structure representing a list value. Can be used on any process and thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :is_valid ::
  #   (FFI::Pointer(*)) Returns true (1) if this object is valid. Do not call any other functions
  #   if this function returns false (0).
  # :is_owned ::
  #   (FFI::Pointer(*)) Returns true (1) if this object is currently owned by another object.
  # :is_read_only ::
  #   (FFI::Pointer(*)) Returns true (1) if the values of this object are read-only. Some APIs may
  #   expose read-only objects.
  # :copy ::
  #   (FFI::Pointer(*)) Returns a writable copy of this object.
  # :set_size ::
  #   (FFI::Pointer(*)) Sets the number of values. If the number of values is expanded all new
  #   value slots will default to type null. Returns true (1) on success.
  # :get_size ::
  #   (FFI::Pointer(*)) Returns the number of values.
  # :clear ::
  #   (FFI::Pointer(*)) Removes all values. Returns true (1) on success.
  # :remove ::
  #   (FFI::Pointer(*)) Removes the value at the specified index.
  # :get_type ::
  #   (FFI::Pointer(*)) Returns the value type at the specified index.
  # :get_bool ::
  #   (FFI::Pointer(*)) Returns the value at the specified index as type bool.
  # :get_int ::
  #   (FFI::Pointer(*)) Returns the value at the specified index as type int.
  # :get_double ::
  #   (FFI::Pointer(*)) Returns the value at the specified index as type double.
  # :get_string ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_binary ::
  #   (FFI::Pointer(*)) Returns the value at the specified index as type binary.
  # :get_dictionary ::
  #   (FFI::Pointer(*)) Returns the value at the specified index as type dictionary.
  # :get_list ::
  #   (FFI::Pointer(*)) Returns the value at the specified index as type list.
  # :set_null ::
  #   (FFI::Pointer(*)) Sets the value at the specified index as type null. Returns true (1) if the
  #   value was set successfully.
  # :set_bool ::
  #   (FFI::Pointer(*)) Sets the value at the specified index as type bool. Returns true (1) if the
  #   value was set successfully.
  # :set_int ::
  #   (FFI::Pointer(*)) Sets the value at the specified index as type int. Returns true (1) if the
  #   value was set successfully.
  # :set_double ::
  #   (FFI::Pointer(*)) Sets the value at the specified index as type double. Returns true (1) if
  #   the value was set successfully.
  # :set_string ::
  #   (FFI::Pointer(*)) Sets the value at the specified index as type string. Returns true (1) if
  #   the value was set successfully.
  # :set_binary ::
  #   (FFI::Pointer(*)) Sets the value at the specified index as type binary. Returns true (1) if
  #   the value was set successfully. After calling this function the |value|
  #   object will no longer be valid. If |value| is currently owned by another
  #   object then the value will be copied and the |value| reference will not
  #   change. Otherwise, ownership will be transferred to this object and the
  #   |value| reference will be invalidated.
  # :set_dictionary ::
  #   (FFI::Pointer(*)) Sets the value at the specified index as type dict. Returns true (1) if the
  #   value was set successfully. After calling this function the |value| object
  #   will no longer be valid. If |value| is currently owned by another object
  #   then the value will be copied and the |value| reference will not change.
  #   Otherwise, ownership will be transferred to this object and the |value|
  #   reference will be invalidated.
  # :set_list ::
  #   (FFI::Pointer(*)) Sets the value at the specified index as type list. Returns true (1) if the
  #   value was set successfully. After calling this function the |value| object
  #   will no longer be valid. If |value| is currently owned by another object
  #   then the value will be copied and the |value| reference will not change.
  #   Otherwise, ownership will be transferred to this object and the |value|
  #   reference will be invalidated.
  class ListValueT < FFI::Struct
    layout :base, :char,
           :is_valid, :pointer,
           :is_owned, :pointer,
           :is_read_only, :pointer,
           :copy, :pointer,
           :set_size, :pointer,
           :get_size, :pointer,
           :clear, :pointer,
           :remove, :pointer,
           :get_type, :pointer,
           :get_bool, :pointer,
           :get_int, :pointer,
           :get_double, :pointer,
           :get_string, :pointer,
           :get_binary, :pointer,
           :get_dictionary, :pointer,
           :get_list, :pointer,
           :set_null, :pointer,
           :set_bool, :pointer,
           :set_int, :pointer,
           :set_double, :pointer,
           :set_string, :pointer,
           :set_binary, :pointer,
           :set_dictionary, :pointer,
           :set_list, :pointer
  end
  
  # Creates a new object that is not owned by any other object.
  # 
  # @method list_value_create()
  # @return [ListValueT] 
  # @scope class
  attach_function :list_value_create, :cef_list_value_create, [], ListValueT
  
end
