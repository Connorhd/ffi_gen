# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # (Not documented)
  class CefDomdocumentT < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :base ::
  #   (unknown) ///
  # :visit ::
  #   (FFI::Pointer(*)) ///
  class CefDomvisitorT < FFI::Struct
    layout :base, :char,
           :visit, :pointer
  end
  
  # ///
  # 
  # = Fields:
  # :base ::
  #   (unknown) ///
  # :get_type ::
  #   (FFI::Pointer(*)) ///
  # :get_document ::
  #   (FFI::Pointer(*)) ///
  # :get_body ::
  #   (FFI::Pointer(*)) ///
  # :get_head ::
  #   (FFI::Pointer(*)) ///
  # :get_title ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_element_by_id ::
  #   (FFI::Pointer(*)) ///
  # :get_focused_node ::
  #   (FFI::Pointer(*)) ///
  # :has_selection ::
  #   (FFI::Pointer(*)) ///
  # :get_selection_start_node ::
  #   (FFI::Pointer(*)) ///
  # :get_selection_start_offset ::
  #   (FFI::Pointer(*)) ///
  # :get_selection_end_node ::
  #   (FFI::Pointer(*)) ///
  # :get_selection_end_offset ::
  #   (FFI::Pointer(*)) ///
  # :get_selection_as_markup ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_selection_as_text ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_base_url ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_complete_url ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  class CefDomdocumentT < FFI::Struct
    layout :base, :char,
           :get_type, :pointer,
           :get_document, :pointer,
           :get_body, :pointer,
           :get_head, :pointer,
           :get_title, :pointer,
           :get_element_by_id, :pointer,
           :get_focused_node, :pointer,
           :has_selection, :pointer,
           :get_selection_start_node, :pointer,
           :get_selection_start_offset, :pointer,
           :get_selection_end_node, :pointer,
           :get_selection_end_offset, :pointer,
           :get_selection_as_markup, :pointer,
           :get_selection_as_text, :pointer,
           :get_base_url, :pointer,
           :get_complete_url, :pointer
  end
  
  # (Not documented)
  class CefDomeventListenerT < FFI::Struct
    layout :dummy, :char
  end
  
  # ///
  # 
  # = Fields:
  # :base ::
  #   (unknown) ///
  # :get_type ::
  #   (FFI::Pointer(*)) ///
  # :is_text ::
  #   (FFI::Pointer(*)) ///
  # :is_element ::
  #   (FFI::Pointer(*)) ///
  # :is_editable ::
  #   (FFI::Pointer(*)) ///
  # :is_form_control_element ::
  #   (FFI::Pointer(*)) ///
  # :get_form_control_element_type ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :is_same ::
  #   (FFI::Pointer(*)) ///
  # :get_name ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_value ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :set_value ::
  #   (FFI::Pointer(*)) ///
  # :get_as_markup ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_document ::
  #   (FFI::Pointer(*)) ///
  # :get_parent ::
  #   (FFI::Pointer(*)) ///
  # :get_previous_sibling ::
  #   (FFI::Pointer(*)) ///
  # :get_next_sibling ::
  #   (FFI::Pointer(*)) ///
  # :has_children ::
  #   (FFI::Pointer(*)) ///
  # :get_first_child ::
  #   (FFI::Pointer(*)) ///
  # :get_last_child ::
  #   (FFI::Pointer(*)) ///
  # :add_event_listener ::
  #   (FFI::Pointer(*)) ///
  # :get_element_tag_name ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :has_element_attributes ::
  #   (FFI::Pointer(*)) ///
  # :has_element_attribute ::
  #   (FFI::Pointer(*)) ///
  # :get_element_attribute ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_element_attributes ::
  #   (FFI::Pointer(*)) ///
  # :set_element_attribute ::
  #   (FFI::Pointer(*)) ///
  # :get_element_inner_text ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  class CefDomnodeT < FFI::Struct
    layout :base, :char,
           :get_type, :pointer,
           :is_text, :pointer,
           :is_element, :pointer,
           :is_editable, :pointer,
           :is_form_control_element, :pointer,
           :get_form_control_element_type, :pointer,
           :is_same, :pointer,
           :get_name, :pointer,
           :get_value, :pointer,
           :set_value, :pointer,
           :get_as_markup, :pointer,
           :get_document, :pointer,
           :get_parent, :pointer,
           :get_previous_sibling, :pointer,
           :get_next_sibling, :pointer,
           :has_children, :pointer,
           :get_first_child, :pointer,
           :get_last_child, :pointer,
           :add_event_listener, :pointer,
           :get_element_tag_name, :pointer,
           :has_element_attributes, :pointer,
           :has_element_attribute, :pointer,
           :get_element_attribute, :pointer,
           :get_element_attributes, :pointer,
           :set_element_attribute, :pointer,
           :get_element_inner_text, :pointer
  end
  
  # ///
  # 
  # = Fields:
  # :base ::
  #   (unknown) ///
  # :get_type ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_category ::
  #   (FFI::Pointer(*)) ///
  # :get_phase ::
  #   (FFI::Pointer(*)) ///
  # :can_bubble ::
  #   (FFI::Pointer(*)) ///
  # :can_cancel ::
  #   (FFI::Pointer(*)) ///
  # :get_document ::
  #   (FFI::Pointer(*)) ///
  # :get_target ::
  #   (FFI::Pointer(*)) ///
  # :get_current_target ::
  #   (FFI::Pointer(*)) ///
  class CefDomeventT < FFI::Struct
    layout :base, :char,
           :get_type, :pointer,
           :get_category, :pointer,
           :get_phase, :pointer,
           :can_bubble, :pointer,
           :can_cancel, :pointer,
           :get_document, :pointer,
           :get_target, :pointer,
           :get_current_target, :pointer
  end
  
  # ///
  # 
  # = Fields:
  # :base ::
  #   (unknown) ///
  # :handle_event ::
  #   (FFI::Pointer(*)) ///
  class CefDomeventListenerT < FFI::Struct
    layout :base, :char,
           :handle_event, :pointer
  end
  
end
