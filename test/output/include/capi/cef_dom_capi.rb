# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # (Not documented)
  class Domdocument < FFI::Struct
    layout :dummy, :char
  end
  
  # Structure to implement for visiting the DOM. The functions of this structure
  # will be called on the render process main thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :visit ::
  #   (FFI::Pointer(*)) Method executed for visiting the DOM. The document object passed to this
  #   function represents a snapshot of the DOM at the time this function is
  #   executed. DOM objects are only valid for the scope of this function. Do not
  #   keep references to or attempt to access any DOM objects outside the scope
  #   of this function.
  class Domvisitor < FFI::Struct
    layout :base, :char,
           :visit, :pointer
  end
  
  # Structure used to represent a DOM document. The functions of this structure
  # should only be called on the render process main thread thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :get_type ::
  #   (FFI::Pointer(*)) Returns the document type.
  # :get_document ::
  #   (FFI::Pointer(*)) Returns the root document node.
  # :get_body ::
  #   (FFI::Pointer(*)) Returns the BODY node of an HTML document.
  # :get_head ::
  #   (FFI::Pointer(*)) Returns the HEAD node of an HTML document.
  # :get_title ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_element_by_id ::
  #   (FFI::Pointer(*)) Returns the document element with the specified ID value.
  # :get_focused_node ::
  #   (FFI::Pointer(*)) Returns the node that currently has keyboard focus.
  # :has_selection ::
  #   (FFI::Pointer(*)) Returns true (1) if a portion of the document is selected.
  # :get_selection_start_node ::
  #   (FFI::Pointer(*)) Returns the selection start node.
  # :get_selection_start_offset ::
  #   (FFI::Pointer(*)) Returns the selection offset within the start node.
  # :get_selection_end_node ::
  #   (FFI::Pointer(*)) Returns the selection end node.
  # :get_selection_end_offset ::
  #   (FFI::Pointer(*)) Returns the selection offset within the end node.
  # :get_selection_as_markup ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_selection_as_text ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_base_url ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_complete_url ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  class Domdocument < FFI::Struct
    layout :base, :char,
           :get_type, :pointer,
           :get_document, :pointer,
           :get_body, :pointer,
           :get_head, :pointer,
           :get_title, :pointer,
           :get_element_by_id, :pointer,
           :get_focused_node, :pointer,
           :has_selection, :pointer,
           :get_selection_start_node, :pointer,
           :get_selection_start_offset, :pointer,
           :get_selection_end_node, :pointer,
           :get_selection_end_offset, :pointer,
           :get_selection_as_markup, :pointer,
           :get_selection_as_text, :pointer,
           :get_base_url, :pointer,
           :get_complete_url, :pointer
  end
  
  # (Not documented)
  class DomeventListener < FFI::Struct
    layout :dummy, :char
  end
  
  # Structure used to represent a DOM node. The functions of this structure
  # should only be called on the render process main thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :get_type ::
  #   (FFI::Pointer(*)) Returns the type for this node.
  # :is_text ::
  #   (FFI::Pointer(*)) Returns true (1) if this is a text node.
  # :is_element ::
  #   (FFI::Pointer(*)) Returns true (1) if this is an element node.
  # :is_editable ::
  #   (FFI::Pointer(*)) Returns true (1) if this is an editable node.
  # :is_form_control_element ::
  #   (FFI::Pointer(*)) Returns true (1) if this is a form control element node.
  # :get_form_control_element_type ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :is_same ::
  #   (FFI::Pointer(*)) Returns true (1) if this object is pointing to the same handle as |that|
  #   object.
  # :get_name ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_value ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :set_value ::
  #   (FFI::Pointer(*)) Set the value of this node. Returns true (1) on success.
  # :get_as_markup ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_document ::
  #   (FFI::Pointer(*)) Returns the document associated with this node.
  # :get_parent ::
  #   (FFI::Pointer(*)) Returns the parent node.
  # :get_previous_sibling ::
  #   (FFI::Pointer(*)) Returns the previous sibling node.
  # :get_next_sibling ::
  #   (FFI::Pointer(*)) Returns the next sibling node.
  # :has_children ::
  #   (FFI::Pointer(*)) Returns true (1) if this node has child nodes.
  # :get_first_child ::
  #   (FFI::Pointer(*)) Return the first child node.
  # :get_last_child ::
  #   (FFI::Pointer(*)) Returns the last child node.
  # :add_event_listener ::
  #   (FFI::Pointer(*)) Add an event listener to this node for the specified event type. If
  #   |useCapture| is true (1) then this listener will be considered a capturing
  #   listener. Capturing listeners will recieve all events of the specified type
  #   before the events are dispatched to any other event targets beneath the
  #   current node in the tree. Events which are bubbling upwards through the
  #   tree will not trigger a capturing listener. Separate calls to this function
  #   can be used to register the same listener with and without capture. See
  #   WebCore/dom/EventNames.h for the list of supported event types.
  # :get_element_tag_name ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :has_element_attributes ::
  #   (FFI::Pointer(*)) Returns true (1) if this element has attributes.
  # :has_element_attribute ::
  #   (FFI::Pointer(*)) Returns true (1) if this element has an attribute named |attrName|.
  # :get_element_attribute ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_element_attributes ::
  #   (FFI::Pointer(*)) Returns a map of all element attributes.
  # :set_element_attribute ::
  #   (FFI::Pointer(*)) Set the value for the element attribute named |attrName|. Returns true (1)
  #   on success.
  # :get_element_inner_text ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  class Domnode < FFI::Struct
    layout :base, :char,
           :get_type, :pointer,
           :is_text, :pointer,
           :is_element, :pointer,
           :is_editable, :pointer,
           :is_form_control_element, :pointer,
           :get_form_control_element_type, :pointer,
           :is_same, :pointer,
           :get_name, :pointer,
           :get_value, :pointer,
           :set_value, :pointer,
           :get_as_markup, :pointer,
           :get_document, :pointer,
           :get_parent, :pointer,
           :get_previous_sibling, :pointer,
           :get_next_sibling, :pointer,
           :has_children, :pointer,
           :get_first_child, :pointer,
           :get_last_child, :pointer,
           :add_event_listener, :pointer,
           :get_element_tag_name, :pointer,
           :has_element_attributes, :pointer,
           :has_element_attribute, :pointer,
           :get_element_attribute, :pointer,
           :get_element_attributes, :pointer,
           :set_element_attribute, :pointer,
           :get_element_inner_text, :pointer
  end
  
  # Structure used to represent a DOM event. The functions of this structure
  # should only be called on the render process main thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :get_type ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_category ::
  #   (FFI::Pointer(*)) Returns the event category.
  # :get_phase ::
  #   (FFI::Pointer(*)) Returns the event processing phase.
  # :can_bubble ::
  #   (FFI::Pointer(*)) Returns true (1) if the event can bubble up the tree.
  # :can_cancel ::
  #   (FFI::Pointer(*)) Returns true (1) if the event can be canceled.
  # :get_document ::
  #   (FFI::Pointer(*)) Returns the document associated with this event.
  # :get_target ::
  #   (FFI::Pointer(*)) Returns the target of the event.
  # :get_current_target ::
  #   (FFI::Pointer(*)) Returns the current target of the event.
  class Domevent < FFI::Struct
    layout :base, :char,
           :get_type, :pointer,
           :get_category, :pointer,
           :get_phase, :pointer,
           :can_bubble, :pointer,
           :can_cancel, :pointer,
           :get_document, :pointer,
           :get_target, :pointer,
           :get_current_target, :pointer
  end
  
  # Structure to implement for handling DOM events. The functions of this
  # structure will be called on the render process main thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :handle_event ::
  #   (FFI::Pointer(*)) Called when an event is received. The event object passed to this function
  #   contains a snapshot of the DOM at the time this function is executed. DOM
  #   objects are only valid for the scope of this function. Do not keep
  #   references to or attempt to access any DOM objects outside the scope of
  #   this function.
  class DomeventListener < FFI::Struct
    layout :base, :char,
           :handle_event, :pointer
  end
  
end
