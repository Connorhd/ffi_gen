# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # (Not documented)
  class V8handler < FFI::Struct
    layout :dummy, :char
  end
  
  # Register a new V8 extension with the specified JavaScript extension code and
  # handler. Functions implemented by the handler are prototyped using the
  # keyword 'native'. The calling of a native function is restricted to the scope
  # in which the prototype of the native function is defined. This function may
  # only be called on the render process main thread.
  # 
  # Example JavaScript extension code: <pre>
  #   // create the 'example' global object if it doesn't already exist.
  #   if (!example)
  #     example = {};
  #   // create the 'example.test' global object if it doesn't already exist.
  #   if (!example.test)
  #     example.test = {};
  #   (function() {
  #     // Define the function 'example.test.myfunction'.
  #     example.test.myfunction = function() {
  #       // Call CefV8Handler::Execute() with the function name 'MyFunction'
  #       // and no arguments.
  #       native function MyFunction();
  #       return MyFunction();
  #     };
  #     // Define the getter function for parameter 'example.test.myparam'.
  #     example.test.__defineGetter__('myparam', function() {
  #       // Call CefV8Handler::Execute() with the function name 'GetMyParam'
  #       // and no arguments.
  #       native function GetMyParam();
  #       return GetMyParam();
  #     });
  #     // Define the setter function for parameter 'example.test.myparam'.
  #     example.test.__defineSetter__('myparam', function(b) {
  #       // Call CefV8Handler::Execute() with the function name 'SetMyParam'
  #       // and a single argument.
  #       native function SetMyParam();
  #       if(b) SetMyParam(b);
  #     });
  # 
  #     // Extension definitions can also contain normal JavaScript variables
  #     // and functions.
  #     var myint = 0;
  #     example.test.increment = function() {
  #       myint += 1;
  #       return myint;
  #     };
  #   })();
  # </pre> Example usage in the page: <pre>
  #   // Call the function.
  #   example.test.myfunction();
  #   // Set the parameter.
  #   example.test.myparam = value;
  #   // Get the parameter.
  #   value = example.test.myparam;
  #   // Call another function.
  #   example.test.increment();
  # </pre>
  # 
  # @method register_extension(extension_name, javascript_code, handler)
  # @param [FFI::Pointer(*String)] extension_name 
  # @param [FFI::Pointer(*String)] javascript_code 
  # @param [V8handler] handler 
  # @return [Integer] 
  # @scope class
  attach_function :register_extension, :cef_register_extension, [:pointer, :pointer, V8handler], :int
  
  # (Not documented)
  class Browser < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class Frame < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class V8exception < FFI::Struct
    layout :dummy, :char
  end
  
  # Structure that encapsulates a V8 context handle. The functions of this
  # structure may only be called on the render process main thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :get_browser ::
  #   (FFI::Pointer(*)) Returns the browser for this context.
  # :get_frame ::
  #   (FFI::Pointer(*)) Returns the frame for this context.
  # :get_global ::
  #   (FFI::Pointer(*)) Returns the global object for this context. The context must be entered
  #   before calling this function.
  # :enter ::
  #   (FFI::Pointer(*)) Enter this context. A context must be explicitly entered before creating a
  #   V8 Object, Array, Function or Date asynchronously. exit() must be called
  #   the same number of times as enter() before releasing this context. V8
  #   objects belong to the context in which they are created. Returns true (1)
  #   if the scope was entered successfully.
  # :exit ::
  #   (FFI::Pointer(*)) Exit this context. Call this function only after calling enter(). Returns
  #   true (1) if the scope was exited successfully.
  # :is_same ::
  #   (FFI::Pointer(*)) Returns true (1) if this object is pointing to the same handle as |that|
  #   object.
  # :eval ::
  #   (FFI::Pointer(*)) Evaluates the specified JavaScript code using this context's global object.
  #   On success |retval| will be set to the return value, if any, and the
  #   function will return true (1). On failure |exception| will be set to the
  #   exception, if any, and the function will return false (0).
  class V8context < FFI::Struct
    layout :base, :char,
           :get_browser, :pointer,
           :get_frame, :pointer,
           :get_global, :pointer,
           :enter, :pointer,
           :exit, :pointer,
           :is_same, :pointer,
           :eval, :pointer
  end
  
  # Returns the current (top) context object in the V8 context stack.
  # 
  # @method v8context_get_current_context()
  # @return [V8context] 
  # @scope class
  attach_function :v8context_get_current_context, :cef_v8context_get_current_context, [], V8context
  
  # Returns the entered (bottom) context object in the V8 context stack.
  # 
  # @method v8context_get_entered_context()
  # @return [V8context] 
  # @scope class
  attach_function :v8context_get_entered_context, :cef_v8context_get_entered_context, [], V8context
  
  # Returns true (1) if V8 is currently inside a context.
  # 
  # @method v8context_in_context()
  # @return [Integer] 
  # @scope class
  attach_function :v8context_in_context, :cef_v8context_in_context, [], :int
  
  # Structure that should be implemented to handle V8 function calls. The
  # functions of this structure will always be called on the render process main
  # thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :execute ::
  #   (FFI::Pointer(*)) Handle execution of the function identified by |name|. |object| is the
  #   receiver ('this' object) of the function. |arguments| is the list of
  #   arguments passed to the function. If execution succeeds set |retval| to the
  #   function return value. If execution fails set |exception| to the exception
  #   that will be thrown. Return true (1) if execution was handled.
  class V8handler < FFI::Struct
    layout :base, :char,
           :execute, :pointer
  end
  
  # Structure that should be implemented to handle V8 accessor calls. Accessor
  # identifiers are registered by calling cef_v8value_t::set_value_byaccessor().
  # The functions of this structure will always be called on the render process
  # main thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :get ::
  #   (FFI::Pointer(*)) Handle retrieval the accessor value identified by |name|. |object| is the
  #   receiver ('this' object) of the accessor. If retrieval succeeds set
  #   |retval| to the return value. If retrieval fails set |exception| to the
  #   exception that will be thrown. Return true (1) if accessor retrieval was
  #   handled.
  # :set ::
  #   (FFI::Pointer(*)) Handle assignment of the accessor value identified by |name|. |object| is
  #   the receiver ('this' object) of the accessor. |value| is the new value
  #   being assigned to the accessor. If assignment fails set |exception| to the
  #   exception that will be thrown. Return true (1) if accessor assignment was
  #   handled.
  class V8accessor < FFI::Struct
    layout :base, :char,
           :get, :pointer,
           :set, :pointer
  end
  
  # Structure representing a V8 exception.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :get_message ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_source_line ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_script_resource_name ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_line_number ::
  #   (FFI::Pointer(*)) Returns the 1-based number of the line where the error occurred or 0 if the
  #   line number is unknown.
  # :get_start_position ::
  #   (FFI::Pointer(*)) Returns the index within the script of the first character where the error
  #   occurred.
  # :get_end_position ::
  #   (FFI::Pointer(*)) Returns the index within the script of the last character where the error
  #   occurred.
  # :get_start_column ::
  #   (FFI::Pointer(*)) Returns the index within the line of the first character where the error
  #   occurred.
  # :get_end_column ::
  #   (FFI::Pointer(*)) Returns the index within the line of the last character where the error
  #   occurred.
  class V8exception < FFI::Struct
    layout :base, :char,
           :get_message, :pointer,
           :get_source_line, :pointer,
           :get_script_resource_name, :pointer,
           :get_line_number, :pointer,
           :get_start_position, :pointer,
           :get_end_position, :pointer,
           :get_start_column, :pointer,
           :get_end_column, :pointer
  end
  
  # Structure representing a V8 value. The functions of this structure may only
  # be called on the render process main thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :is_undefined ::
  #   (FFI::Pointer(*)) True if the value type is undefined.
  # :is_null ::
  #   (FFI::Pointer(*)) True if the value type is null.
  # :is_bool ::
  #   (FFI::Pointer(*)) True if the value type is bool.
  # :is_int ::
  #   (FFI::Pointer(*)) True if the value type is int.
  # :is_uint ::
  #   (FFI::Pointer(*)) True if the value type is unsigned int.
  # :is_double ::
  #   (FFI::Pointer(*)) True if the value type is double.
  # :is_date ::
  #   (FFI::Pointer(*)) True if the value type is Date.
  # :is_string ::
  #   (FFI::Pointer(*)) True if the value type is string.
  # :is_object ::
  #   (FFI::Pointer(*)) True if the value type is object.
  # :is_array ::
  #   (FFI::Pointer(*)) True if the value type is array.
  # :is_function ::
  #   (FFI::Pointer(*)) True if the value type is function.
  # :is_same ::
  #   (FFI::Pointer(*)) Returns true (1) if this object is pointing to the same handle as |that|
  #   object.
  # :get_bool_value ::
  #   (FFI::Pointer(*)) Return a bool value.  The underlying data will be converted to if
  #   necessary.
  # :get_int_value ::
  #   (FFI::Pointer(*)) Return an int value.  The underlying data will be converted to if
  #   necessary.
  # :get_uint_value ::
  #   (FFI::Pointer(*)) Return an unisgned int value.  The underlying data will be converted to if
  #   necessary.
  # :get_double_value ::
  #   (FFI::Pointer(*)) Return a double value.  The underlying data will be converted to if
  #   necessary.
  # :get_date_value ::
  #   (FFI::Pointer(*)) Return a Date value.  The underlying data will be converted to if
  #   necessary.
  # :get_string_value ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :is_user_created ::
  #   (FFI::Pointer(*)) Returns true (1) if this is a user created object.
  # :has_exception ::
  #   (FFI::Pointer(*)) Returns true (1) if the last function call resulted in an exception. This
  #   attribute exists only in the scope of the current CEF value object.
  # :get_exception ::
  #   (FFI::Pointer(*)) Returns the exception resulting from the last function call. This attribute
  #   exists only in the scope of the current CEF value object.
  # :clear_exception ::
  #   (FFI::Pointer(*)) Clears the last exception and returns true (1) on success.
  # :will_rethrow_exceptions ::
  #   (FFI::Pointer(*)) Returns true (1) if this object will re-throw future exceptions. This
  #   attribute exists only in the scope of the current CEF value object.
  # :set_rethrow_exceptions ::
  #   (FFI::Pointer(*)) Set whether this object will re-throw future exceptions. By default
  #   exceptions are not re-thrown. If a exception is re-thrown the current
  #   context should not be accessed again until after the exception has been
  #   caught and not re-thrown. Returns true (1) on success. This attribute
  #   exists only in the scope of the current CEF value object.
  # :has_value_bykey ::
  #   (FFI::Pointer(*)) Returns true (1) if the object has a value with the specified identifier.
  # :has_value_byindex ::
  #   (FFI::Pointer(*)) Returns true (1) if the object has a value with the specified identifier.
  # :delete_value_bykey ::
  #   (FFI::Pointer(*)) Deletes the value with the specified identifier and returns true (1) on
  #   success. Returns false (0) if this function is called incorrectly or an
  #   exception is thrown. For read-only and don't-delete values this function
  #   will return true (1) even though deletion failed.
  # :delete_value_byindex ::
  #   (FFI::Pointer(*)) Deletes the value with the specified identifier and returns true (1) on
  #   success. Returns false (0) if this function is called incorrectly, deletion
  #   fails or an exception is thrown. For read-only and don't-delete values this
  #   function will return true (1) even though deletion failed.
  # :get_value_bykey ::
  #   (FFI::Pointer(*)) Returns the value with the specified identifier on success. Returns NULL if
  #   this function is called incorrectly or an exception is thrown.
  # :get_value_byindex ::
  #   (FFI::Pointer(*)) Returns the value with the specified identifier on success. Returns NULL if
  #   this function is called incorrectly or an exception is thrown.
  # :set_value_bykey ::
  #   (FFI::Pointer(*)) Associates a value with the specified identifier and returns true (1) on
  #   success. Returns false (0) if this function is called incorrectly or an
  #   exception is thrown. For read-only values this function will return true
  #   (1) even though assignment failed.
  # :set_value_byindex ::
  #   (FFI::Pointer(*)) Associates a value with the specified identifier and returns true (1) on
  #   success. Returns false (0) if this function is called incorrectly or an
  #   exception is thrown. For read-only values this function will return true
  #   (1) even though assignment failed.
  # :set_value_byaccessor ::
  #   (FFI::Pointer(*)) Registers an identifier and returns true (1) on success. Access to the
  #   identifier will be forwarded to the cef_v8accessor_t instance passed to
  #   cef_v8value_t::cef_v8value_create_object(). Returns false (0) if this
  #   function is called incorrectly or an exception is thrown. For read-only
  #   values this function will return true (1) even though assignment failed.
  # :get_keys ::
  #   (FFI::Pointer(*)) Read the keys for the object's values into the specified vector. Integer-
  #   based keys will also be returned as strings.
  # :set_user_data ::
  #   (FFI::Pointer(*)) Sets the user data for this object and returns true (1) on success. Returns
  #   false (0) if this function is called incorrectly. This function can only be
  #   called on user created objects.
  # :get_user_data ::
  #   (FFI::Pointer(*)) Returns the user data, if any, assigned to this object.
  # :get_externally_allocated_memory ::
  #   (FFI::Pointer(*)) Returns the amount of externally allocated memory registered for the
  #   object.
  # :adjust_externally_allocated_memory ::
  #   (FFI::Pointer(*)) Adjusts the amount of registered external memory for the object. Used to
  #   give V8 an indication of the amount of externally allocated memory that is
  #   kept alive by JavaScript objects. V8 uses this information to decide when
  #   to perform global garbage collection. Each cef_v8value_t tracks the amount
  #   of external memory associated with it and automatically decreases the
  #   global total by the appropriate amount on its destruction.
  #   |change_in_bytes| specifies the number of bytes to adjust by. This function
  #   returns the number of bytes associated with the object after the
  #   adjustment. This function can only be called on user created objects.
  # :get_array_length ::
  #   (FFI::Pointer(*)) Returns the number of elements in the array.
  # :get_function_name ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_function_handler ::
  #   (FFI::Pointer(*)) Returns the function handler or NULL if not a CEF-created function.
  # :execute_function ::
  #   (FFI::Pointer(*)) Execute the function using the current V8 context. This function should
  #   only be called from within the scope of a cef_v8handler_t or
  #   cef_v8accessor_t callback, or in combination with calling enter() and
  #   exit() on a stored cef_v8context_t reference. |object| is the receiver
  #   ('this' object) of the function. If |object| is NULL the current context's
  #   global object will be used. |arguments| is the list of arguments that will
  #   be passed to the function. Returns the function return value on success.
  #   Returns NULL if this function is called incorrectly or an exception is
  #   thrown.
  # :execute_function_with_context ::
  #   (FFI::Pointer(*)) Execute the function using the specified V8 context. |object| is the
  #   receiver ('this' object) of the function. If |object| is NULL the specified
  #   context's global object will be used. |arguments| is the list of arguments
  #   that will be passed to the function. Returns the function return value on
  #   success. Returns NULL if this function is called incorrectly or an
  #   exception is thrown.
  class V8value < FFI::Struct
    layout :base, :char,
           :is_undefined, :pointer,
           :is_null, :pointer,
           :is_bool, :pointer,
           :is_int, :pointer,
           :is_uint, :pointer,
           :is_double, :pointer,
           :is_date, :pointer,
           :is_string, :pointer,
           :is_object, :pointer,
           :is_array, :pointer,
           :is_function, :pointer,
           :is_same, :pointer,
           :get_bool_value, :pointer,
           :get_int_value, :pointer,
           :get_uint_value, :pointer,
           :get_double_value, :pointer,
           :get_date_value, :pointer,
           :get_string_value, :pointer,
           :is_user_created, :pointer,
           :has_exception, :pointer,
           :get_exception, :pointer,
           :clear_exception, :pointer,
           :will_rethrow_exceptions, :pointer,
           :set_rethrow_exceptions, :pointer,
           :has_value_bykey, :pointer,
           :has_value_byindex, :pointer,
           :delete_value_bykey, :pointer,
           :delete_value_byindex, :pointer,
           :get_value_bykey, :pointer,
           :get_value_byindex, :pointer,
           :set_value_bykey, :pointer,
           :set_value_byindex, :pointer,
           :set_value_byaccessor, :pointer,
           :get_keys, :pointer,
           :set_user_data, :pointer,
           :get_user_data, :pointer,
           :get_externally_allocated_memory, :pointer,
           :adjust_externally_allocated_memory, :pointer,
           :get_array_length, :pointer,
           :get_function_name, :pointer,
           :get_function_handler, :pointer,
           :execute_function, :pointer,
           :execute_function_with_context, :pointer
  end
  
  # Create a new cef_v8value_t object of type undefined.
  # 
  # @method v8value_create_undefined()
  # @return [V8value] 
  # @scope class
  attach_function :v8value_create_undefined, :cef_v8value_create_undefined, [], V8value
  
  # Create a new cef_v8value_t object of type null.
  # 
  # @method v8value_create_null()
  # @return [V8value] 
  # @scope class
  attach_function :v8value_create_null, :cef_v8value_create_null, [], V8value
  
  # Create a new cef_v8value_t object of type bool.
  # 
  # @method v8value_create_bool(value)
  # @param [Integer] value 
  # @return [V8value] 
  # @scope class
  attach_function :v8value_create_bool, :cef_v8value_create_bool, [:int], V8value
  
  # Create a new cef_v8value_t object of type int.
  # 
  # @method v8value_create_int(value)
  # @param [Integer] value 
  # @return [V8value] 
  # @scope class
  attach_function :v8value_create_int, :cef_v8value_create_int, [:int], V8value
  
  # Create a new cef_v8value_t object of type unsigned int.
  # 
  # @method v8value_create_uint(value)
  # @param [Integer] value 
  # @return [V8value] 
  # @scope class
  attach_function :v8value_create_uint, :cef_v8value_create_uint, [:uint], V8value
  
  # Create a new cef_v8value_t object of type double.
  # 
  # @method v8value_create_double(value)
  # @param [Float] value 
  # @return [V8value] 
  # @scope class
  attach_function :v8value_create_double, :cef_v8value_create_double, [:double], V8value
  
  # Create a new cef_v8value_t object of type Date. This function should only be
  # called from within the scope of a cef_v8context_tHandler, cef_v8handler_t or
  # cef_v8accessor_t callback, or in combination with calling enter() and exit()
  # on a stored cef_v8context_t reference.
  # 
  # @method v8value_create_date(date)
  # @param [FFI::Pointer(*Time)] date 
  # @return [V8value] 
  # @scope class
  attach_function :v8value_create_date, :cef_v8value_create_date, [:pointer], V8value
  
  # Create a new cef_v8value_t object of type string.
  # 
  # @method v8value_create_string(value)
  # @param [FFI::Pointer(*String)] value 
  # @return [V8value] 
  # @scope class
  attach_function :v8value_create_string, :cef_v8value_create_string, [:pointer], V8value
  
  # Create a new cef_v8value_t object of type object with optional accessor. This
  # function should only be called from within the scope of a
  # cef_v8context_tHandler, cef_v8handler_t or cef_v8accessor_t callback, or in
  # combination with calling enter() and exit() on a stored cef_v8context_t
  # reference.
  # 
  # @method v8value_create_object(accessor)
  # @param [V8accessor] accessor 
  # @return [V8value] 
  # @scope class
  attach_function :v8value_create_object, :cef_v8value_create_object, [V8accessor], V8value
  
  # Create a new cef_v8value_t object of type array with the specified |length|.
  # If |length| is negative the returned array will have length 0. This function
  # should only be called from within the scope of a cef_v8context_tHandler,
  # cef_v8handler_t or cef_v8accessor_t callback, or in combination with calling
  # enter() and exit() on a stored cef_v8context_t reference.
  # 
  # @method v8value_create_array(length)
  # @param [Integer] length 
  # @return [V8value] 
  # @scope class
  attach_function :v8value_create_array, :cef_v8value_create_array, [:int], V8value
  
  # Create a new cef_v8value_t object of type function. This function should only
  # be called from within the scope of a cef_v8context_tHandler, cef_v8handler_t
  # or cef_v8accessor_t callback, or in combination with calling enter() and
  # exit() on a stored cef_v8context_t reference.
  # 
  # @method v8value_create_function(name, handler)
  # @param [FFI::Pointer(*String)] name 
  # @param [V8handler] handler 
  # @return [V8value] 
  # @scope class
  attach_function :v8value_create_function, :cef_v8value_create_function, [:pointer, V8handler], V8value
  
end
