# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # (Not documented)
  class FrameT < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class ProcessMessageT < FFI::Struct
    layout :dummy, :char
  end
  
  # Structure used to represent a browser window. When used in the browser
  # process the functions of this structure may be called on any thread unless
  # otherwise indicated in the comments. When used in the render process the
  # functions of this structure may only be called on the main thread.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :get_host ::
  #   (FFI::Pointer(*)) Returns the browser host object. This function can only be called in the
  #   browser process.
  # :can_go_back ::
  #   (FFI::Pointer(*)) Returns true (1) if the browser can navigate backwards.
  # :go_back ::
  #   (FFI::Pointer(*)) Navigate backwards.
  # :can_go_forward ::
  #   (FFI::Pointer(*)) Returns true (1) if the browser can navigate forwards.
  # :go_forward ::
  #   (FFI::Pointer(*)) Navigate forwards.
  # :is_loading ::
  #   (FFI::Pointer(*)) Returns true (1) if the browser is currently loading.
  # :reload ::
  #   (FFI::Pointer(*)) Reload the current page.
  # :reload_ignore_cache ::
  #   (FFI::Pointer(*)) Reload the current page ignoring any cached data.
  # :stop_load ::
  #   (FFI::Pointer(*)) Stop loading the page.
  # :get_identifier ::
  #   (FFI::Pointer(*)) Returns the globally unique identifier for this browser.
  # :is_popup ::
  #   (FFI::Pointer(*)) Returns true (1) if the window is a popup window.
  # :has_document ::
  #   (FFI::Pointer(*)) Returns true (1) if a document has been loaded in the browser.
  # :get_main_frame ::
  #   (FFI::Pointer(*)) Returns the main (top-level) frame for the browser window.
  # :get_focused_frame ::
  #   (FFI::Pointer(*)) Returns the focused frame for the browser window.
  # :get_frame_byident ::
  #   (FFI::Pointer(*)) Returns the frame with the specified identifier, or NULL if not found.
  # :get_frame ::
  #   (FFI::Pointer(*)) Returns the frame with the specified name, or NULL if not found.
  # :get_frame_count ::
  #   (FFI::Pointer(*)) Returns the number of frames that currently exist.
  # :get_frame_identifiers ::
  #   (FFI::Pointer(*)) Returns the identifiers of all existing frames.
  # :get_frame_names ::
  #   (FFI::Pointer(*)) Returns the names of all existing frames.
  # :send_process_message ::
  #   (FFI::Pointer(*)) Send a message to the specified |target_process|. Returns true (1) if the
  #   message was sent successfully.
  class BrowserT < FFI::Struct
    layout :base, :char,
           :get_host, :pointer,
           :can_go_back, :pointer,
           :go_back, :pointer,
           :can_go_forward, :pointer,
           :go_forward, :pointer,
           :is_loading, :pointer,
           :reload, :pointer,
           :reload_ignore_cache, :pointer,
           :stop_load, :pointer,
           :get_identifier, :pointer,
           :is_popup, :pointer,
           :has_document, :pointer,
           :get_main_frame, :pointer,
           :get_focused_frame, :pointer,
           :get_frame_byident, :pointer,
           :get_frame, :pointer,
           :get_frame_count, :pointer,
           :get_frame_identifiers, :pointer,
           :get_frame_names, :pointer,
           :send_process_message, :pointer
  end
  
  # (Not documented)
  class ClientT < FFI::Struct
    layout :dummy, :char
  end
  
  # Structure used to represent the browser process aspects of a browser window.
  # The functions of this structure can only be called in the browser process.
  # They may be called on any thread in that process unless otherwise indicated
  # in the comments.
  # 
  # = Fields:
  # :base ::
  #   (unknown) Base structure.
  # :get_browser ::
  #   (FFI::Pointer(*)) Returns the hosted browser object.
  # :parent_window_will_close ::
  #   (FFI::Pointer(*)) Call this function before destroying a contained browser window. This
  #   function performs any internal cleanup that may be needed before the
  #   browser window is destroyed.
  # :close_browser ::
  #   (FFI::Pointer(*)) Closes this browser window.
  # :set_focus ::
  #   (FFI::Pointer(*)) Set focus for the browser window. If |enable| is true (1) focus will be set
  #   to the window. Otherwise, focus will be removed.
  # :get_window_handle ::
  #   (FFI::Pointer(*)) 
  # :get_opener_window_handle ::
  #   (FFI::Pointer(*)) 
  # :get_client ::
  #   (FFI::Pointer(*)) 
  # :get_dev_tools_url ::
  #   (FFI::Pointer(*)) The resulting string must be freed by calling cef_string_userfree_free().
  # :get_zoom_level ::
  #   (FFI::Pointer(*)) Get the zoom level. This function can only be called on the UI thread.
  # :set_zoom_level ::
  #   (FFI::Pointer(*)) Change the zoom level to the specified value.
  class BrowserHostT < FFI::Struct
    layout :base, :char,
           :get_browser, :pointer,
           :parent_window_will_close, :pointer,
           :close_browser, :pointer,
           :set_focus, :pointer,
           :get_window_handle, :pointer,
           :get_opener_window_handle, :pointer,
           :get_client, :pointer,
           :get_dev_tools_url, :pointer,
           :get_zoom_level, :pointer,
           :set_zoom_level, :pointer
  end
  
  # Create a new browser window using the window parameters specified by
  # |windowInfo|. All values will be copied internally and the actual window will
  # be created on the UI thread. This function can be called on any browser
  # process thread and will not block.
  # 
  # @method browser_host_create_browser(window_info, client, url, settings)
  # @param [FFI::Pointer(*WindowInfoT)] window_info 
  # @param [ClientT] client 
  # @param [FFI::Pointer(*StringT)] url 
  # @param [FFI::Pointer(*BrowserSettingsT)] settings 
  # @return [Integer] 
  # @scope class
  attach_function :browser_host_create_browser, :cef_browser_host_create_browser, [:pointer, ClientT, :pointer, :pointer], :int
  
  # Create a new browser window using the window parameters specified by
  # |windowInfo|. This function can only be called on the browser process UI
  # thread.
  # 
  # @method browser_host_create_browser_sync(window_info, client, url, settings)
  # @param [FFI::Pointer(*WindowInfoT)] window_info 
  # @param [ClientT] client 
  # @param [FFI::Pointer(*StringT)] url 
  # @param [FFI::Pointer(*BrowserSettingsT)] settings 
  # @return [BrowserT] 
  # @scope class
  attach_function :browser_host_create_browser_sync, :cef_browser_host_create_browser_sync, [:pointer, ClientT, :pointer, :pointer], BrowserT
  
end
