# Generated by ffi-gen. Please do not change this file by hand.

require 'ffi'

module CEF
  extend FFI::Library
  ffi_lib 'cef'
  
  def self.attach_function(name, *_)
    begin; super; rescue FFI::NotFoundError => e
      (class << self; self; end).class_eval { define_method(name) { |*_| raise e } }
    end
  end
  
  # (Not documented)
  class CefFrameT < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  class CefProcessMessageT < FFI::Struct
    layout :dummy, :char
  end
  
  # (Not documented)
  # 
  # = Fields:
  # :base ::
  #   (unknown) ///
  # :get_host ::
  #   (FFI::Pointer(*)) ///
  # :can_go_back ::
  #   (FFI::Pointer(*)) ///
  # :go_back ::
  #   (FFI::Pointer(*)) ///
  # :can_go_forward ::
  #   (FFI::Pointer(*)) ///
  # :go_forward ::
  #   (FFI::Pointer(*)) ///
  # :is_loading ::
  #   (FFI::Pointer(*)) ///
  # :reload ::
  #   (FFI::Pointer(*)) ///
  # :reload_ignore_cache ::
  #   (FFI::Pointer(*)) ///
  # :stop_load ::
  #   (FFI::Pointer(*)) ///
  # :get_identifier ::
  #   (FFI::Pointer(*)) ///
  # :is_popup ::
  #   (FFI::Pointer(*)) ///
  # :has_document ::
  #   (FFI::Pointer(*)) // Returns true (1) if a document has been loaded in the browser.
  # :get_main_frame ::
  #   (FFI::Pointer(*)) ///
  # :get_focused_frame ::
  #   (FFI::Pointer(*)) ///
  # :get_frame_byident ::
  #   (FFI::Pointer(*)) ///
  # :get_frame ::
  #   (FFI::Pointer(*)) ///
  # :get_frame_count ::
  #   (FFI::Pointer(*)) ///
  # :get_frame_identifiers ::
  #   (FFI::Pointer(*)) ///
  # :get_frame_names ::
  #   (FFI::Pointer(*)) ///
  # :send_process_message ::
  #   (FFI::Pointer(*)) ///
  class CefBrowserT < FFI::Struct
    layout :base, :char,
           :get_host, :pointer,
           :can_go_back, :pointer,
           :go_back, :pointer,
           :can_go_forward, :pointer,
           :go_forward, :pointer,
           :is_loading, :pointer,
           :reload, :pointer,
           :reload_ignore_cache, :pointer,
           :stop_load, :pointer,
           :get_identifier, :pointer,
           :is_popup, :pointer,
           :has_document, :pointer,
           :get_main_frame, :pointer,
           :get_focused_frame, :pointer,
           :get_frame_byident, :pointer,
           :get_frame, :pointer,
           :get_frame_count, :pointer,
           :get_frame_identifiers, :pointer,
           :get_frame_names, :pointer,
           :send_process_message, :pointer
  end
  
  # (Not documented)
  class CefClientT < FFI::Struct
    layout :dummy, :char
  end
  
  # ///
  # 
  # = Fields:
  # :base ::
  #   (unknown) ///
  # :get_browser ::
  #   (FFI::Pointer(*)) ///
  # :parent_window_will_close ::
  #   (FFI::Pointer(*)) ///
  # :close_browser ::
  #   (FFI::Pointer(*)) ///
  # :set_focus ::
  #   (FFI::Pointer(*)) ///
  # :get_window_handle ::
  #   (FFI::Pointer(*)) 
  # :get_opener_window_handle ::
  #   (FFI::Pointer(*)) 
  # :get_client ::
  #   (FFI::Pointer(*)) 
  # :get_dev_tools_url ::
  #   (FFI::Pointer(*)) // The resulting string must be freed by calling cef_string_userfree_free().
  # :get_zoom_level ::
  #   (FFI::Pointer(*)) ///
  # :set_zoom_level ::
  #   (FFI::Pointer(*)) ///
  class CefBrowserHostT < FFI::Struct
    layout :base, :char,
           :get_browser, :pointer,
           :parent_window_will_close, :pointer,
           :close_browser, :pointer,
           :set_focus, :pointer,
           :get_window_handle, :pointer,
           :get_opener_window_handle, :pointer,
           :get_client, :pointer,
           :get_dev_tools_url, :pointer,
           :get_zoom_level, :pointer,
           :set_zoom_level, :pointer
  end
  
  # (Not documented)
  # 
  # @method browser_host_create_browser(window_info, client, url, settings)
  # @param [FFI::Pointer(*WindowInfoT)] window_info 
  # @param [CefClientT] client 
  # @param [FFI::Pointer(*StringT)] url 
  # @param [FFI::Pointer(*CefBrowserSettingsT)] settings 
  # @return [Integer] 
  # @scope class
  attach_function :browser_host_create_browser, :cef_browser_host_create_browser, [:pointer, CefClientT, :pointer, :pointer], :int
  
  # (Not documented)
  # 
  # @method browser_host_create_browser_sync(window_info, client, url, settings)
  # @param [FFI::Pointer(*WindowInfoT)] window_info 
  # @param [CefClientT] client 
  # @param [FFI::Pointer(*StringT)] url 
  # @param [FFI::Pointer(*CefBrowserSettingsT)] settings 
  # @return [CefBrowserT] 
  # @scope class
  attach_function :browser_host_create_browser_sync, :cef_browser_host_create_browser_sync, [:pointer, CefClientT, :pointer, :pointer], CefBrowserT
  
end
